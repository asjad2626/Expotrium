import { ChangeDetectorRef, Inject, Injectable, InjectionToken, NgZone, Optional, } from '@angular/core';
import { isObservable, Subscription } from 'rxjs';
export const HASH_FN = new InjectionToken('HASH_FN', {
    providedIn: 'root',
    factory: createHashFn,
});
const BRAND = '__ngObserve__';
// @dynamic
export class ObserveService {
    constructor(cdRef, hash, zone) {
        this.cdRef = cdRef;
        this.hash = hash;
        this.hooks = new Map();
        this.detectChanges = () => this.cdRef.detectChanges();
        this.collection = (sources, options = {}) => {
            const sink = Array.isArray(sources) ? [] : {};
            Object.defineProperty(sink, BRAND, {
                value: true,
                enumerable: false,
                writable: false,
            });
            const observe = this.observe(sink);
            Object.keys(sources).forEach(key => {
                const source = sources[key];
                const option = options[key];
                observe(key, source, option);
            });
            return sink;
        };
        this.value = (source, options) => {
            const sink = {};
            this.observe(sink)('value', source, options);
            return toValue(sink, 'value');
        };
        if (zone instanceof NgZone) {
            this.detectChanges = () => this.cdRef.markForCheck();
        }
    }
    createUniqueId(key) {
        try {
            throw new Error();
        }
        catch (e) {
            return String(this.hash(e.stack + String(key)));
        }
    }
    observe(sink) {
        const fn = (key, source, { uniqueId = this.createUniqueId(key), errorHandler = () => { } } = {}) => {
            let subscription = new Subscription();
            const noop = () => { };
            const unsubscribe = () => subscription.unsubscribe();
            const complete = () => {
                (this.hooks.get(uniqueId) || noop)();
                this.hooks.delete(uniqueId);
            };
            complete();
            this.hooks.set(uniqueId, unsubscribe);
            // tslint:disable-next-line: deprecation
            subscription = source.subscribe({
                next: x => {
                    sink[key] = x;
                    this.detectChanges();
                },
                error: errorHandler,
                complete,
            });
        };
        return fn;
    }
    ngOnDestroy() {
        this.hooks.forEach(unsubscribe => unsubscribe());
    }
}
ObserveService.decorators = [
    { type: Injectable }
];
ObserveService.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [HASH_FN,] }] },
    { type: NgZone, decorators: [{ type: Optional }] }
];
export const OBSERVE = new InjectionToken('OBSERVE');
export const OBSERVE_PROVIDER = [
    ObserveService,
    {
        provide: OBSERVE,
        useFactory: observeFactory,
        deps: [ObserveService],
    },
];
export function observeFactory(service) {
    return (source, options) => isObservable(source)
        ? service.value(source, options)
        : service.collection(source, options);
}
export class Observed {
    constructor(seed, mapFn) {
        this.seed = seed;
        this.getter = () => mapFn(this.seed);
    }
    get value() {
        return this.getter();
    }
}
export function createHashFn() {
    const k = 2654435761;
    const shift = Math.imul ? (n) => Math.imul(n, k) : (n) => imul(n, k);
    const hashFn = (input) => {
        let index = input.length;
        let hash = 0xabadcafe;
        while (index--) {
            hash = shift(hash ^ input.charCodeAt(index));
        }
        return (hash ^ (hash >>> 16)) >>> 0;
    };
    return hashFn;
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
export function imul(a, b) {
    b |= 0;
    let result = (a & 0x003fffff) * b;
    if (a & 0xffc00000) {
        result += ((a & 0xffc00000) * b) | 0;
    }
    return result | 0;
}
export function isCollection(source) {
    return Boolean(source && source[BRAND]);
}
export function toMappedValue(collection, mapFn) {
    return new Observed(collection, mapFn);
}
export function toValue(collection, key) {
    return new Observed(collection, source => source[key]);
}
export function toValues(collection) {
    if (Array.isArray(collection)) {
        return collection.map((_, index) => new Observed(collection, source => source[index]));
    }
    const values = {};
    for (const key in collection) {
        if (collection.hasOwnProperty(key)) {
            values[key] = new Observed(collection, source => source[key]);
        }
    }
    return values;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctb2JzZXJ2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLW9ic2VydmUvc3JjL2xpYi9uZy1vYnNlcnZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsTUFBTSxFQUNOLFVBQVUsRUFDVixjQUFjLEVBQ2QsTUFBTSxFQUVOLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFjLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUU5RCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQVMsU0FBUyxFQUFFO0lBQzNELFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxZQUFZO0NBQ3RCLENBQUMsQ0FBQztBQUVILE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQztBQUU5QixXQUFXO0FBRVgsTUFBTSxPQUFPLGNBQWM7SUFpQ3pCLFlBQ1UsS0FBd0IsRUFDUCxJQUFZLEVBQ3pCLElBQVk7UUFGaEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFDUCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBbEMvQixVQUFLLEdBQUcsSUFBSSxHQUFHLEVBQStCLENBQUM7UUFDL0Msa0JBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXpELGVBQVUsR0FBd0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFTLEVBQUUsRUFBRTtZQUNqRSxNQUFNLElBQUksR0FBUSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNuRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7Z0JBQ2pDLEtBQUssRUFBRSxJQUFJO2dCQUNYLFVBQVUsRUFBRSxLQUFLO2dCQUNq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QUMsVUFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBSUQsTUFBTSxVQUFVLE9BQU8sQ0FDckIsVUFBZ0QsRUFDaEQsR0FBb0I7SUFFcEIsT0FBTyxJQUFJLFFBQVEsQ0FBQyxVQUFpQixFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQVFELE1BQU0sVUFBVSxRQUFRLENBQ3RCLFVBQTJDO0lBRTNDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUM3QixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hGO0lBRUQsTUFBTSxNQUFNLEdBQW9DLEVBQUUsQ0FBQztJQUVuRCxLQUFLLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRTtRQUM1QixJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQy9EO0tBQ0Y7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIEluamVjdCxcbiAgSW5qZWN0YWJsZSxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIE5nWm9uZSxcbiAgT25EZXN0cm95LFxuICBPcHRpb25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc09ic2VydmFibGUsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY29uc3QgSEFTSF9GTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIYXNoRm4+KCdIQVNIX0ZOJywge1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIGZhY3Rvcnk6IGNyZWF0ZUhhc2hGbixcbn0pO1xuXG5jb25zdCBCUkFORCA9ICdfX25nT2JzZXJ2ZV9fJztcblxuLy8gQGR5bmFtaWNcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPYnNlcnZlU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgaG9va3MgPSBuZXcgTWFwPHN0cmluZyB8IG51bWJlciwgKCkgPT4gdm9pZD4oKTtcbiAgcHJpdmF0ZSBkZXRlY3RDaGFuZ2VzID0gKCkgPT4gdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgY29sbGVjdGlvbjogT2JzZXJ2ZUNvbGxlY3Rpb25GbiA9IChzb3VyY2VzLCBvcHRpb25zID0ge30gYXMgYW55KSA9PiB7XG4gICAgY29uc3Qgc2luazogYW55ID0gQXJyYXkuaXNBcnJheShzb3VyY2VzKSA/IFtdIDoge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNpbmssIEJSQU5ELCB7XG4gICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgb2JzZXJ2ZSA9IHRoaXMub2JzZXJ2ZShzaW5rKTtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2VzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2U6IGFueSA9IHNvdXJjZXNba2V5IGFzIGtleW9mIHR5cGVvZiBzb3VyY2VzXTtcbiAgICAgIGNvbnN0IG9wdGlvbjogYW55ID0gb3B0aW9uc1trZXkgYXMga2V5b2YgdHlwZW9mIG9wdGlvbnNdO1xuICAgICAgb2JzZXJ2ZShrZXksIHNvdXJjZSwgb3B0aW9uKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzaW5rO1xuICB9O1xuXG4gIHZhbHVlOiBPYnNlcnZlVmFsdWVGbiA9IDxWYWx1ZT4oXG4gICAgc291cmNlOiBPYnNlcnZhYmxlPFZhbHVlPixcbiAgICBvcHRpb25zPzogT2JzZXJ2ZVZhbHVlT3B0aW9uc1xuICApOiBPYnNlcnZlZDxWYWx1ZT4gPT4ge1xuICAgIGNvbnN0IHNpbmsgPSB7fTtcblxuICAgIHRoaXMub2JzZXJ2ZShzaW5rKSgndmFsdWUnLCBzb3VyY2UsIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIHRvVmFsdWUoc2luaywgJ3ZhbHVlJyk7XG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQEluamVjdChIQVNIX0ZOKSBwcml2YXRlIGhhc2g6IEhhc2hGbixcbiAgICBAT3B0aW9uYWwoKSB6b25lOiBOZ1pvbmVcbiAgKSB7XG4gICAgaWYgKHpvbmUgaW5zdGFuY2VvZiBOZ1pvbmUpIHtcbiAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcyA9ICgpID0+IHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVVbmlxdWVJZChrZXk6IHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCk6IHN0cmluZyB7XG4gICAgdHJ5IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBTdHJpbmcodGhpcy5oYXNoKGUuc3RhY2sgKyBTdHJpbmcoa2V5KSkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb2JzZXJ2ZShzaW5rOiBhbnkpOiBPYnNlcnZlIHtcbiAgICBjb25zdCBmbiA9IDxWYWx1ZT4oXG4gICAgICBrZXk6IHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCxcbiAgICAgIHNvdXJjZTogT2JzZXJ2YWJsZTxWYWx1ZT4sXG4gICAgICB7IHVuaXF1ZUlkID0gdGhpcy5jcmVhdGVVbmlxdWVJZChrZXkpLCBlcnJvckhhbmRsZXIgPSAoKSA9PiB7fSB9OiBPYnNlcnZlVmFsdWVPcHRpb25zID0ge31cbiAgICApID0+IHtcbiAgICAgIGxldCBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICBjb25zdCBub29wID0gKCkgPT4ge307XG4gICAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICh0aGlzLmhvb2tzLmdldCh1bmlxdWVJZCkgfHwgbm9vcCkoKTtcbiAgICAgICAgdGhpcy5ob29rcy5kZWxldGUodW5pcXVlSWQpO1xuICAgICAgfTtcblxuICAgICAgY29tcGxldGUoKTtcbiAgICAgIHRoaXMuaG9va3Muc2V0KHVuaXF1ZUlkLCB1bnN1YnNjcmliZSk7XG5cbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGVwcmVjYXRpb25cbiAgICAgIHN1YnNjcmlwdGlvbiA9IHNvdXJjZS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiB4ID0+IHtcbiAgICAgICAgICBzaW5rW2tleV0gPSB4O1xuICAgICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogZXJyb3JIYW5kbGVyLFxuICAgICAgICBjb21wbGV0ZSxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmhvb2tzLmZvckVhY2godW5zdWJzY3JpYmUgPT4gdW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IE9CU0VSVkUgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2ZUZuPignT0JTRVJWRScpO1xuXG5leHBvcnQgY29uc3QgT0JTRVJWRV9QUk9WSURFUiA9IFtcbiAgT2JzZXJ2ZVNlcnZpY2UsXG4gIHtcbiAgICBwcm92aWRlOiBPQlNFUlZFLFxuICAgIHVzZUZhY3Rvcnk6IG9ic2VydmVGYWN0b3J5LFxuICAgIGRlcHM6IFtPYnNlcnZlU2VydmljZV0sXG4gIH0sXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZUZhY3Rvcnkoc2VydmljZTogT2JzZXJ2ZVNlcnZpY2UpOiBPYnNlcnZlRm4ge1xuICByZXR1cm4gPFZhbHVlT3JDb2xsZWN0aW9uIGV4dGVuZHMgYW55PihcbiAgICBzb3VyY2U6IE9ic2VydmFibGU8VmFsdWVPckNvbGxlY3Rpb24+IHwgT2JzZXJ2YWJsZUNvbGxlY3Rpb248VmFsdWVPckNvbGxlY3Rpb24+LFxuICAgIG9wdGlvbnM/OiBPYnNlcnZlVmFsdWVPcHRpb25zIHwgT2JzZXJ2ZUNvbGxlY3Rpb25PcHRpb25zPFZhbHVlT3JDb2xsZWN0aW9uPlxuICApID0+XG4gICAgaXNPYnNlcnZhYmxlKHNvdXJjZSlcbiAgICAgID8gc2VydmljZS52YWx1ZShzb3VyY2UsIG9wdGlvbnMgYXMgT2JzZXJ2ZVZhbHVlT3B0aW9ucylcbiAgICAgIDogc2VydmljZS5jb2xsZWN0aW9uKHNvdXJjZSwgb3B0aW9ucyBhcyBPYnNlcnZlQ29sbGVjdGlvbk9wdGlvbnM8VmFsdWVPckNvbGxlY3Rpb24+KTtcbn1cblxudHlwZSBPYnNlcnZlQ29sbGVjdGlvbkZuID0gPENvbGxlY3Rpb24+KFxuICBzb3VyY2U6IE9ic2VydmFibGVDb2xsZWN0aW9uPENvbGxlY3Rpb24+LFxuICBvcHRpb25zPzogT2JzZXJ2ZUNvbGxlY3Rpb25PcHRpb25zPENvbGxlY3Rpb24+XG4pID0+IENvbGxlY3Rpb247XG5cbnR5cGUgT2JzZXJ2ZVZhbHVlRm4gPSA8VmFsdWU+KFxuICBzb3VyY2U6IE9ic2VydmFibGU8VmFsdWU+LFxuICBvcHRpb25zPzogT2JzZXJ2ZVZhbHVlT3B0aW9uc1xuKSA9PiBPYnNlcnZlZDxWYWx1ZT47XG5cbmV4cG9ydCB0eXBlIE9ic2VydmVGbiA9IDxTb3VyY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPGFueT4gfCBPYnNlcnZhYmxlQ29sbGVjdGlvbjxhbnk+PihcbiAgc291cmNlOiBTb3VyY2UsXG4gIG9wdGlvbnM/OiBPYnNlcnZlRm5PcHRpb25zPFNvdXJjZT5cbikgPT4gT2JzZXJ2ZUZuUmV0dXJuVmFsdWU8U291cmNlPjtcblxudHlwZSBPYnNlcnZlID0gPFZhbHVlPihcbiAga2V5OiBzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wsXG4gIHNvdXJjZTogT2JzZXJ2YWJsZTxWYWx1ZT4sXG4gIG9wdGlvbnM/OiBPYnNlcnZlVmFsdWVPcHRpb25zXG4pID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIE9ic2VydmFibGVDb2xsZWN0aW9uPENvbGxlY3Rpb24+ID0gQ29sbGVjdGlvbiBleHRlbmRzIEFycmF5PGluZmVyIFZhbHVlPlxuICA/IEFycmF5PE9ic2VydmFibGU8VmFsdWU+PlxuICA6IHsgW0tleSBpbiBrZXlvZiBDb2xsZWN0aW9uXTogT2JzZXJ2YWJsZTxDb2xsZWN0aW9uW0tleV0+IH07XG5cbmV4cG9ydCB0eXBlIE9ic2VydmVDb2xsZWN0aW9uT3B0aW9uczxDb2xsZWN0aW9uPiA9IENvbGxlY3Rpb24gZXh0ZW5kcyBBcnJheTxhbnk+XG4gID8gQXJyYXk8T2JzZXJ2ZVZhbHVlT3B0aW9ucz5cbiAgOiB7IFtLZXkgaW4ga2V5b2YgQ29sbGVjdGlvbl0/OiBPYnNlcnZlVmFsdWVPcHRpb25zIH07XG5cbmV4cG9ydCB0eXBlIE9ic2VydmVkVmFsdWVzPENvbGxlY3Rpb24+ID0gQ29sbGVjdGlvbiBleHRlbmRzIEFycmF5PGluZmVyIFZhbHVlPlxuICA/IEFycmF5PE9ic2VydmVkPFZhbHVlPj5cbiAgOiB7IFtLZXkgaW4ga2V5b2YgQ29sbGVjdGlvbl06IE9ic2VydmVkPENvbGxlY3Rpb25bS2V5XT4gfTtcblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZlVmFsdWVPcHRpb25zIHtcbiAgZXJyb3JIYW5kbGVyPzogKGVycjogYW55KSA9PiB2b2lkO1xuICB1bmlxdWVJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgT2JzZXJ2ZUZuT3B0aW9uczxTb3VyY2U+ID0gU291cmNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxhbnk+XG4gID8gT2JzZXJ2ZVZhbHVlT3B0aW9uc1xuICA6IFNvdXJjZSBleHRlbmRzIE9ic2VydmFibGVDb2xsZWN0aW9uPGluZmVyIENvbGxlY3Rpb24+XG4gID8gT2JzZXJ2ZUNvbGxlY3Rpb25PcHRpb25zPENvbGxlY3Rpb24+XG4gIDogbmV2ZXI7XG5cbmV4cG9ydCB0eXBlIE9ic2VydmVGblJldHVyblZhbHVlPFNvdXJjZT4gPSBTb3VyY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPGluZmVyIFZhbHVlPlxuICA/IE9ic2VydmVkPFZhbHVlPlxuICA6IFNvdXJjZSBleHRlbmRzIE9ic2VydmFibGVDb2xsZWN0aW9uPGluZmVyIENvbGxlY3Rpb24+XG4gID8gQ29sbGVjdGlvblxuICA6IG5ldmVyO1xuXG5leHBvcnQgY2xhc3MgT2JzZXJ2ZWQ8VmFsdWUsIFNlZWQgPSB1bmtub3duPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZ2V0dGVyOiAoKSA9PiBWYWx1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHNlZWQ6IFNlZWQsIG1hcEZuOiAoc291cmNlOiB0eXBlb2Ygc2VlZCkgPT4gVmFsdWUpIHtcbiAgICB0aGlzLmdldHRlciA9ICgpID0+IG1hcEZuKHRoaXMuc2VlZCk7XG4gIH1cblxuICBnZXQgdmFsdWUoKTogVmFsdWUge1xuICAgIHJldHVybiB0aGlzLmdldHRlcigpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEhhc2hGbiA9IChpbnB1dDogc3RyaW5nKSA9PiBudW1iZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIYXNoRm4oKTogSGFzaEZuIHtcbiAgY29uc3QgayA9IDI2NTQ0MzU3NjE7XG4gIGNvbnN0IHNoaWZ0ID0gTWF0aC5pbXVsID8gKG46IG51bWJlcikgPT4gTWF0aC5pbXVsKG4sIGspIDogKG46IG51bWJlcikgPT4gaW11bChuLCBrKTtcblxuICBjb25zdCBoYXNoRm4gPSAoaW5wdXQ6IHN0cmluZykgPT4ge1xuICAgIGxldCBpbmRleCA9IGlucHV0Lmxlbmd0aDtcbiAgICBsZXQgaGFzaCA9IDB4YWJhZGNhZmU7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaGFzaCA9IHNoaWZ0KGhhc2ggXiBpbnB1dC5jaGFyQ29kZUF0KGluZGV4KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChoYXNoIF4gKGhhc2ggPj4+IDE2KSkgPj4+IDA7XG4gIH07XG5cbiAgcmV0dXJuIGhhc2hGbjtcbn1cblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aC9pbXVsXG5leHBvcnQgZnVuY3Rpb24gaW11bChhOiBudW1iZXIsIGI6IG51bWJlcik6IG51bWJlciB7XG4gIGIgfD0gMDtcblxuICBsZXQgcmVzdWx0ID0gKGEgJiAweDAwM2ZmZmZmKSAqIGI7XG4gIGlmIChhICYgMHhmZmMwMDAwMCkge1xuICAgIHJlc3VsdCArPSAoKGEgJiAweGZmYzAwMDAwKSAqIGIpIHwgMDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgfCAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb2xsZWN0aW9uKHNvdXJjZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiBCb29sZWFuKHNvdXJjZSAmJiBzb3VyY2VbQlJBTkRdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvTWFwcGVkVmFsdWU8VmFsdWUsIFNlZWQgZXh0ZW5kcyBBcnJheTxhbnk+IHwgUmVjb3JkPHN0cmluZywgYW55Pj4oXG4gIGNvbGxlY3Rpb246IFNlZWQsXG4gIG1hcEZuOiAoc291cmNlOiB0eXBlb2YgY29sbGVjdGlvbikgPT4gVmFsdWVcbik6IE9ic2VydmVkPFZhbHVlPiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2ZWQoY29sbGVjdGlvbiBhcyBhbnksIG1hcEZuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvVmFsdWU8VmFsdWU+KGNvbGxlY3Rpb246IEFycmF5PFZhbHVlPiwga2V5OiBudW1iZXIpOiBPYnNlcnZlZDxWYWx1ZT47XG5leHBvcnQgZnVuY3Rpb24gdG9WYWx1ZTxWYWx1ZT4oY29sbGVjdGlvbjogUmVjb3JkPHN0cmluZywgVmFsdWU+LCBrZXk6IHN0cmluZyk6IE9ic2VydmVkPFZhbHVlPjtcbmV4cG9ydCBmdW5jdGlvbiB0b1ZhbHVlPFZhbHVlPihcbiAgY29sbGVjdGlvbjogQXJyYXk8VmFsdWU+IHwgUmVjb3JkPHN0cmluZywgVmFsdWU+LFxuICBrZXk6IG51bWJlciB8IHN0cmluZ1xuKTogT2JzZXJ2ZWQ8VmFsdWU+IHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZlZChjb2xsZWN0aW9uIGFzIGFueSwgc291cmNlID0+IHNvdXJjZVtrZXldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvVmFsdWVzPENvbGxlY3Rpb24gZXh0ZW5kcyBhbnlbXT4oXG4gIGNvbGxlY3Rpb246IENvbGxlY3Rpb25cbik6IE9ic2VydmVkVmFsdWVzPENvbGxlY3Rpb24+O1xuZXhwb3J0IGZ1bmN0aW9uIHRvVmFsdWVzPENvbGxlY3Rpb24gZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihcbiAgY29sbGVjdGlvbjogQ29sbGVjdGlvblxuKTogT2JzZXJ2ZWRWYWx1ZXM8Q29sbGVjdGlvbj47XG5leHBvcnQgZnVuY3Rpb24gdG9WYWx1ZXM8VmFsdWU+KFxuICBjb2xsZWN0aW9uOiBWYWx1ZVtdIHwgUmVjb3JkPHN0cmluZywgVmFsdWU+XG4pOiBPYnNlcnZlZFZhbHVlczxWYWx1ZVtdIHwgUmVjb3JkPHN0cmluZywgVmFsdWU+PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24ubWFwKChfLCBpbmRleCkgPT4gbmV3IE9ic2VydmVkKGNvbGxlY3Rpb24sIHNvdXJjZSA9PiBzb3VyY2VbaW5kZXhdKSk7XG4gIH1cblxuICBjb25zdCB2YWx1ZXM6IFJlY29yZDxzdHJpbmcsIE9ic2VydmVkPFZhbHVlPj4gPSB7fTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBjb2xsZWN0aW9uKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdmFsdWVzW2tleV0gPSBuZXcgT2JzZXJ2ZWQoY29sbGVjdGlvbiwgc291cmNlID0+IHNvdXJjZVtrZXldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuIl19