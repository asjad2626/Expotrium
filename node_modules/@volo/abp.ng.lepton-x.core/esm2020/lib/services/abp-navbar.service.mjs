import { Inject, Injectable } from '@angular/core';
import { LocalizationService, RoutesService, } from '@abp/ng.core';
import { NavbarService } from '@volo/ngx-lepton-x.core';
import { map } from 'rxjs/operators';
import { MOBILE_NAVBAR_ITEMS_FILTER_TOKEN } from '../tokens/mobile-navbar-items-filter.token';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
import * as i2 from "@volo/ngx-lepton-x.core";
export class AbpNavbarService {
    constructor(routes, navbarService, localizationService, mobileMenuItemFilterFn) {
        this.routes = routes;
        this.navbarService = navbarService;
        this.localizationService = localizationService;
        this.mobileMenuItemFilterFn = mobileMenuItemFilterFn;
        this.mapRouteToNavItem = (route, index) => {
            return {
                text: this.localizationService.instant(route.name),
                link: route.children && route.children.length ? undefined : route.path,
                icon: route.iconClass,
                children: this.getRouteChildrenAsNavItems(route.children || []),
                showOnMobileNavbar: this.mobileMenuItemFilterFn(route, index),
            };
        };
    }
    initRoutes() {
        this.routes.visible$
            .pipe(map((routes) => routes.filter((route) => route.path || route.children.length)))
            .subscribe((routes) => {
            this.navbarService.setNavbarItems(...routes.map(this.mapRouteToNavItem));
        });
    }
    getRouteChildrenAsNavItems(children) {
        return children.map(this.mapRouteToNavItem);
    }
}
AbpNavbarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpNavbarService, deps: [{ token: i1.RoutesService }, { token: i2.NavbarService }, { token: i1.LocalizationService }, { token: MOBILE_NAVBAR_ITEMS_FILTER_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
AbpNavbarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpNavbarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpNavbarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutesService }, { type: i2.NavbarService }, { type: i1.LocalizationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MOBILE_NAVBAR_ITEMS_FILTER_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJwLW5hdmJhci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9sZXB0b24teC1hYnAtY29yZS9zcmMvbGliL3NlcnZpY2VzL2FicC1uYXZiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBRUwsbUJBQW1CLEVBQ25CLGFBQWEsR0FFZCxNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQWlCLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQTBCLGdDQUFnQyxFQUFFLE1BQU0sNENBQTRDLENBQUM7Ozs7QUFLdEgsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUNVLE1BQXFCLEVBQ3JCLGFBQTRCLEVBQzVCLG1CQUF3QyxFQUNFLHNCQUE4QztRQUh4RixXQUFNLEdBQU4sTUFBTSxDQUFlO1FBQ3JCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDRSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBRzFGLHNCQUFpQixHQUFHLENBQzFCLEtBQTBCLEVBQzFCLEtBQWEsRUFDRSxFQUFFO1lBQ2pCLE9BQU87Z0JBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDbEQsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUk7Z0JBQ3RFLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUztnQkFDckIsUUFBUSxFQUFFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztnQkFDL0Qsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7YUFDOUQsQ0FBQztRQUNKLENBQUMsQ0FBQztJQWJDLENBQUM7SUFlSixVQUFVO1FBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO2FBQ2pCLElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FDOUQsQ0FDRjthQUNBLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUMvQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQ3RDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTywwQkFBMEIsQ0FDaEMsUUFBK0I7UUFFL0IsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzlDLENBQUM7OzZHQXZDVSxnQkFBZ0IsK0dBS2pCLGdDQUFnQztpSEFML0IsZ0JBQWdCLGNBRmYsTUFBTTsyRkFFUCxnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFNSSxNQUFNOzJCQUFDLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIEFCUCxcclxuICBMb2NhbGl6YXRpb25TZXJ2aWNlLFxyXG4gIFJvdXRlc1NlcnZpY2UsXHJcbiAgVHJlZU5vZGUsXHJcbn0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgTHB4TmF2YmFySXRlbSwgTmF2YmFyU2VydmljZSB9IGZyb20gJ0B2b2xvL25neC1sZXB0b24teC5jb3JlJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBNb2JpbGVNZW51SXRlbUZpbHRlckZuLCBNT0JJTEVfTkFWQkFSX0lURU1TX0ZJTFRFUl9UT0tFTiB9IGZyb20gJy4uL3Rva2Vucy9tb2JpbGUtbmF2YmFyLWl0ZW1zLWZpbHRlci50b2tlbic7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWJwTmF2YmFyU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJvdXRlczogUm91dGVzU2VydmljZSxcclxuICAgIHByaXZhdGUgbmF2YmFyU2VydmljZTogTmF2YmFyU2VydmljZSxcclxuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uU2VydmljZTogTG9jYWxpemF0aW9uU2VydmljZSxcclxuICAgIEBJbmplY3QoTU9CSUxFX05BVkJBUl9JVEVNU19GSUxURVJfVE9LRU4pIHByaXZhdGUgbW9iaWxlTWVudUl0ZW1GaWx0ZXJGbjogTW9iaWxlTWVudUl0ZW1GaWx0ZXJGblxyXG4gICkge31cclxuXHJcbiAgcHJpdmF0ZSBtYXBSb3V0ZVRvTmF2SXRlbSA9IChcclxuICAgIHJvdXRlOiBUcmVlTm9kZTxBQlAuUm91dGU+LFxyXG4gICAgaW5kZXg6IG51bWJlclxyXG4gICk6IExweE5hdmJhckl0ZW0gPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGV4dDogdGhpcy5sb2NhbGl6YXRpb25TZXJ2aWNlLmluc3RhbnQocm91dGUubmFtZSksXHJcbiAgICAgIGxpbms6IHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA/IHVuZGVmaW5lZCA6IHJvdXRlLnBhdGgsXHJcbiAgICAgIGljb246IHJvdXRlLmljb25DbGFzcyxcclxuICAgICAgY2hpbGRyZW46IHRoaXMuZ2V0Um91dGVDaGlsZHJlbkFzTmF2SXRlbXMocm91dGUuY2hpbGRyZW4gfHwgW10pLFxyXG4gICAgICBzaG93T25Nb2JpbGVOYXZiYXI6IHRoaXMubW9iaWxlTWVudUl0ZW1GaWx0ZXJGbihyb3V0ZSwgaW5kZXgpLFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBpbml0Um91dGVzKCkge1xyXG4gICAgdGhpcy5yb3V0ZXMudmlzaWJsZSRcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgbWFwKChyb3V0ZXMpID0+XHJcbiAgICAgICAgICByb3V0ZXMuZmlsdGVyKChyb3V0ZSkgPT4gcm91dGUucGF0aCB8fCByb3V0ZS5jaGlsZHJlbi5sZW5ndGgpXHJcbiAgICAgICAgKVxyXG4gICAgICApXHJcbiAgICAgIC5zdWJzY3JpYmUoKHJvdXRlcykgPT4ge1xyXG4gICAgICAgIHRoaXMubmF2YmFyU2VydmljZS5zZXROYXZiYXJJdGVtcyhcclxuICAgICAgICAgIC4uLnJvdXRlcy5tYXAodGhpcy5tYXBSb3V0ZVRvTmF2SXRlbSlcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Um91dGVDaGlsZHJlbkFzTmF2SXRlbXMoXHJcbiAgICBjaGlsZHJlbjogVHJlZU5vZGU8QUJQLlJvdXRlPltdXHJcbiAgKTogTHB4TmF2YmFySXRlbVtdIHtcclxuICAgIHJldHVybiBjaGlsZHJlbi5tYXAodGhpcy5tYXBSb3V0ZVRvTmF2SXRlbSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==