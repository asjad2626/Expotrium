import { Directive, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
import { ReplaceableComponentsService } from '@abp/ng.core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class IfReplaceableTemplateExistsDirective {
    constructor(view, template, replaceableComponentsService) {
        this.view = view;
        this.template = template;
        this.replaceableComponentsService = replaceableComponentsService;
    }
    ngAfterViewInit() {
        const replaceableComponentInstance = this.replaceableComponentsService.get(this.abpIfReplaceableTemplateExists);
        const isReplaceableComponentInstanceNotExits = !replaceableComponentInstance;
        if (isReplaceableComponentInstanceNotExits) {
            return;
        }
        this.view.createEmbeddedView(this.template);
    }
}
IfReplaceableTemplateExistsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: IfReplaceableTemplateExistsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i1.ReplaceableComponentsService }], target: i0.ɵɵFactoryTarget.Directive });
IfReplaceableTemplateExistsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: IfReplaceableTemplateExistsDirective, selector: "[abpIfReplaceableTemplateExists]", inputs: { abpIfReplaceableTemplateExists: "abpIfReplaceableTemplateExists" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: IfReplaceableTemplateExistsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[abpIfReplaceableTemplateExists]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i1.ReplaceableComponentsService }]; }, propDecorators: { abpIfReplaceableTemplateExists: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtcmVwbGFjZWFibGUtdGVtcGxhdGUtZXhpc3RzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtYWJwLWNvcmUvc3JjL2xpYi9kaXJlY3RpdmVzL2lmLXJlcGxhY2VhYmxlLXRlbXBsYXRlLWV4aXN0cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFFVCxLQUFLLEVBQ0wsV0FBVyxFQUNYLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxjQUFjLENBQUM7OztBQUs1RCxNQUFNLE9BQU8sb0NBQW9DO0lBSS9DLFlBQ1UsSUFBc0IsRUFDdEIsUUFBMEIsRUFDMUIsNEJBQTBEO1FBRjFELFNBQUksR0FBSixJQUFJLENBQWtCO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQzFCLGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7SUFDakUsQ0FBQztJQUVKLGVBQWU7UUFDYixNQUFNLDRCQUE0QixHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQ3hFLElBQUksQ0FBQyw4QkFBOEIsQ0FDcEMsQ0FBQztRQUNGLE1BQU0sc0NBQXNDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQztRQUM3RSxJQUFJLHNDQUFzQyxFQUFFO1lBQzFDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7O2lJQW5CVSxvQ0FBb0M7cUhBQXBDLG9DQUFvQzsyRkFBcEMsb0NBQW9DO2tCQUhoRCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQ0FBa0M7aUJBQzdDOzRLQUdDLDhCQUE4QjtzQkFEN0IsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBJbnB1dCxcclxuICBUZW1wbGF0ZVJlZixcclxuICBWaWV3Q29udGFpbmVyUmVmLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSZXBsYWNlYWJsZUNvbXBvbmVudHNTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FicElmUmVwbGFjZWFibGVUZW1wbGF0ZUV4aXN0c10nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSWZSZXBsYWNlYWJsZVRlbXBsYXRlRXhpc3RzRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQElucHV0KClcclxuICBhYnBJZlJlcGxhY2VhYmxlVGVtcGxhdGVFeGlzdHM6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHZpZXc6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgcHJpdmF0ZSByZXBsYWNlYWJsZUNvbXBvbmVudHNTZXJ2aWNlOiBSZXBsYWNlYWJsZUNvbXBvbmVudHNTZXJ2aWNlXHJcbiAgKSB7fVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICBjb25zdCByZXBsYWNlYWJsZUNvbXBvbmVudEluc3RhbmNlID0gdGhpcy5yZXBsYWNlYWJsZUNvbXBvbmVudHNTZXJ2aWNlLmdldChcclxuICAgICAgdGhpcy5hYnBJZlJlcGxhY2VhYmxlVGVtcGxhdGVFeGlzdHNcclxuICAgICk7XHJcbiAgICBjb25zdCBpc1JlcGxhY2VhYmxlQ29tcG9uZW50SW5zdGFuY2VOb3RFeGl0cyA9ICFyZXBsYWNlYWJsZUNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgaWYgKGlzUmVwbGFjZWFibGVDb21wb25lbnRJbnN0YW5jZU5vdEV4aXRzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMudmlldy5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==