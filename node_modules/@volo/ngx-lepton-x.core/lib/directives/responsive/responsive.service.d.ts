import { BehaviorSubject, Observable } from 'rxjs';
import { ResponsiveBreakpoints } from './responsive-breakpoints.token';
import * as i0 from "@angular/core";
export declare const enum ResponsiveTokens {
    none = "none",
    all = "all",
    separator = "-"
}
export interface ResponsiveBreakpoint {
    name: string;
    width: number;
}
export declare class ResponsiveService {
    protected providedBreakpoints: ResponsiveBreakpoints;
    protected window: any;
    currentResolution$: Observable<{
        height: number;
        width: number;
    }>;
    defaultBreakpoint: {
        name: ResponsiveTokens;
        width: number;
    };
    breakpoints: {
        name: string;
        width: number;
    }[];
    protected getCurrentSize: () => {
        height: any;
        width: any;
    };
    protected mapSizeToBreakpoint: ({ width }?: {
        height: any;
        width: any;
    }) => ResponsiveBreakpoint;
    currentSize$: BehaviorSubject<ResponsiveBreakpoint>;
    shouldRenderWithCurrentSize: (query: string) => boolean;
    constructor(providedBreakpoints: ResponsiveBreakpoints, window: any);
    protected setupListener(): void;
    protected buildBreakpoints(breakpoints: ResponsiveBreakpoints): {
        name: string;
        width: number;
    }[];
    protected matchQuery(query: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResponsiveService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ResponsiveService>;
}
