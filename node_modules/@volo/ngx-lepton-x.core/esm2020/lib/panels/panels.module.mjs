import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BreadcrumbPanelDirective } from './breadcrumb-panel.directive';
import { NavbarPanelDirective } from './navbar-panel.directive';
import { FooterPanelDirective } from './footer-panel.directive';
import { MobileNavbarPanelDirective } from './mobile-navbar-panel.directive';
import { ToolbarPanelDirective } from './toolbar-panel.directive';
import { TopNavbarPanelDirective } from './top-navbar-panel.directive';
import { SettingsPanelDirective } from './settings-panel.directive';
import * as i0 from "@angular/core";
const declarationsAndExports = [
    BreadcrumbPanelDirective,
    NavbarPanelDirective,
    FooterPanelDirective,
    MobileNavbarPanelDirective,
    ToolbarPanelDirective,
    TopNavbarPanelDirective,
    SettingsPanelDirective,
];
export class PanelsModule {
}
PanelsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: PanelsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PanelsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: PanelsModule, declarations: [BreadcrumbPanelDirective,
        NavbarPanelDirective,
        FooterPanelDirective,
        MobileNavbarPanelDirective,
        ToolbarPanelDirective,
        TopNavbarPanelDirective,
        SettingsPanelDirective], imports: [CommonModule], exports: [BreadcrumbPanelDirective,
        NavbarPanelDirective,
        FooterPanelDirective,
        MobileNavbarPanelDirective,
        ToolbarPanelDirective,
        TopNavbarPanelDirective,
        SettingsPanelDirective] });
PanelsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: PanelsModule, imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: PanelsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...declarationsAndExports],
                    imports: [CommonModule],
                    exports: [...declarationsAndExports],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWxzLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtY29yZS9zcmMvbGliL3BhbmVscy9wYW5lbHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQUVwRSxNQUFNLHNCQUFzQixHQUFHO0lBQzdCLHdCQUF3QjtJQUN4QixvQkFBb0I7SUFDcEIsb0JBQW9CO0lBQ3BCLDBCQUEwQjtJQUMxQixxQkFBcUI7SUFDckIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtDQUN2QixDQUFDO0FBT0YsTUFBTSxPQUFPLFlBQVk7O3lHQUFaLFlBQVk7MEdBQVosWUFBWSxpQkFkdkIsd0JBQXdCO1FBQ3hCLG9CQUFvQjtRQUNwQixvQkFBb0I7UUFDcEIsMEJBQTBCO1FBQzFCLHFCQUFxQjtRQUNyQix1QkFBdUI7UUFDdkIsc0JBQXNCLGFBS1osWUFBWSxhQVh0Qix3QkFBd0I7UUFDeEIsb0JBQW9CO1FBQ3BCLG9CQUFvQjtRQUNwQiwwQkFBMEI7UUFDMUIscUJBQXFCO1FBQ3JCLHVCQUF1QjtRQUN2QixzQkFBc0I7MEdBUVgsWUFBWSxZQUhiLFlBQVk7MkZBR1gsWUFBWTtrQkFMeEIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxHQUFHLHNCQUFzQixDQUFDO29CQUN6QyxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLE9BQU8sRUFBRSxDQUFDLEdBQUcsc0JBQXNCLENBQUM7aUJBQ3JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQnJlYWRjcnVtYlBhbmVsRGlyZWN0aXZlIH0gZnJvbSAnLi9icmVhZGNydW1iLXBhbmVsLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IE5hdmJhclBhbmVsRGlyZWN0aXZlIH0gZnJvbSAnLi9uYXZiYXItcGFuZWwuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRm9vdGVyUGFuZWxEaXJlY3RpdmUgfSBmcm9tICcuL2Zvb3Rlci1wYW5lbC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBNb2JpbGVOYXZiYXJQYW5lbERpcmVjdGl2ZSB9IGZyb20gJy4vbW9iaWxlLW5hdmJhci1wYW5lbC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUb29sYmFyUGFuZWxEaXJlY3RpdmUgfSBmcm9tICcuL3Rvb2xiYXItcGFuZWwuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgVG9wTmF2YmFyUGFuZWxEaXJlY3RpdmUgfSBmcm9tICcuL3RvcC1uYXZiYXItcGFuZWwuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgU2V0dGluZ3NQYW5lbERpcmVjdGl2ZSB9IGZyb20gJy4vc2V0dGluZ3MtcGFuZWwuZGlyZWN0aXZlJztcclxuXHJcbmNvbnN0IGRlY2xhcmF0aW9uc0FuZEV4cG9ydHMgPSBbXHJcbiAgQnJlYWRjcnVtYlBhbmVsRGlyZWN0aXZlLFxyXG4gIE5hdmJhclBhbmVsRGlyZWN0aXZlLFxyXG4gIEZvb3RlclBhbmVsRGlyZWN0aXZlLFxyXG4gIE1vYmlsZU5hdmJhclBhbmVsRGlyZWN0aXZlLFxyXG4gIFRvb2xiYXJQYW5lbERpcmVjdGl2ZSxcclxuICBUb3BOYXZiYXJQYW5lbERpcmVjdGl2ZSxcclxuICBTZXR0aW5nc1BhbmVsRGlyZWN0aXZlLFxyXG5dO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFsuLi5kZWNsYXJhdGlvbnNBbmRFeHBvcnRzXSxcclxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcclxuICBleHBvcnRzOiBbLi4uZGVjbGFyYXRpb25zQW5kRXhwb3J0c10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQYW5lbHNNb2R1bGUge31cclxuIl19