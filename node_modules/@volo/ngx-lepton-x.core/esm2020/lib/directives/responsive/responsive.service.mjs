import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { RESPONSIVE_BREAKPOINTS } from './responsive-breakpoints.token';
import { WINDOW } from '../../tokens/window.token';
import * as i0 from "@angular/core";
export class ResponsiveService {
    constructor(providedBreakpoints, window) {
        this.providedBreakpoints = providedBreakpoints;
        this.window = window;
        this.defaultBreakpoint = {
            name: "all" /* ResponsiveTokens.all */,
            width: 0,
        };
        this.breakpoints = this.buildBreakpoints(this.providedBreakpoints);
        this.getCurrentSize = () => ({
            height: this.window.innerHeight,
            width: this.window.innerWidth,
        });
        this.mapSizeToBreakpoint = ({ width } = this.getCurrentSize()) => {
            return this.breakpoints.find(s => width >= s.width);
        };
        this.currentSize$ = new BehaviorSubject(this.mapSizeToBreakpoint());
        this.shouldRenderWithCurrentSize = (query) => {
            return this.matchQuery(query);
        };
        this.setupListener();
    }
    setupListener() {
        this.currentResolution$ = fromEvent(this.window, 'resize')
            .pipe(map(this.getCurrentSize))
            .pipe(startWith(this.getCurrentSize()));
        this.currentResolution$
            .pipe(map(this.mapSizeToBreakpoint), distinctUntilChanged())
            .subscribe(current => {
            this.currentSize$.next(current);
        });
    }
    buildBreakpoints(breakpoints) {
        return [
            ...Object.keys(breakpoints)
                .map(key => ({
                name: key,
                width: breakpoints[key],
            }))
                .sort((a, b) => b.width - a.width),
            this.defaultBreakpoint,
        ];
    }
    matchQuery(query) {
        const { width } = this.getCurrentSize();
        const tokens = query.split(' ');
        const findInTokens = (size) => tokens.find(token => token.split("-" /* ResponsiveTokens.separator */)[0] === size);
        const matchedBreakpoint = this.breakpoints.find(breakpoint => width >= breakpoint.width && findInTokens(breakpoint.name));
        if (matchedBreakpoint) {
            const token = findInTokens(matchedBreakpoint.name);
            const shouldBeBigger = !token?.includes("none" /* ResponsiveTokens.none */);
            return shouldBeBigger === width >= matchedBreakpoint.width;
        }
        return false;
    }
}
ResponsiveService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ResponsiveService, deps: [{ token: RESPONSIVE_BREAKPOINTS }, { token: WINDOW }], target: i0.ɵɵFactoryTarget.Injectable });
ResponsiveService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ResponsiveService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ResponsiveService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [RESPONSIVE_BREAKPOINTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9sZXB0b24teC1jb3JlL3NyYy9saWIvZGlyZWN0aXZlcy9yZXNwb25zaXZlL3Jlc3BvbnNpdmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxzQkFBc0IsRUFBeUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMvRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBZ0JuRCxNQUFNLE9BQU8saUJBQWlCO0lBMkI1QixZQUM0QyxtQkFBMEMsRUFDMUQsTUFBVztRQURLLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBdUI7UUFDMUQsV0FBTSxHQUFOLE1BQU0sQ0FBSztRQTFCdkMsc0JBQWlCLEdBQUc7WUFDbEIsSUFBSSxrQ0FBc0I7WUFDMUIsS0FBSyxFQUFFLENBQUM7U0FDVCxDQUFDO1FBRUYsZ0JBQVcsR0FBc0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXZGLG1CQUFjLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXO1lBQy9CLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVU7U0FDOUIsQ0FBQyxDQUFDO1FBRU8sd0JBQW1CLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxFQUFFO1lB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QUNuQjs7MEJBNkJJLE1BQU07MkJBQUMsc0JBQXNCOzswQkFDN0IsTUFBTTsyQkFBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgZnJvbUV2ZW50LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgUkVTUE9OU0lWRV9CUkVBS1BPSU5UUywgUmVzcG9uc2l2ZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9yZXNwb25zaXZlLWJyZWFrcG9pbnRzLnRva2VuJztcclxuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi4vLi4vdG9rZW5zL3dpbmRvdy50b2tlbic7XHJcblxyXG5leHBvcnQgY29uc3QgZW51bSBSZXNwb25zaXZlVG9rZW5zIHtcclxuICBub25lID0gJ25vbmUnLFxyXG4gIGFsbCA9ICdhbGwnLFxyXG4gIHNlcGFyYXRvciA9ICctJyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zaXZlQnJlYWtwb2ludCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHdpZHRoOiBudW1iZXI7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zaXZlU2VydmljZSB7XHJcbiAgY3VycmVudFJlc29sdXRpb24kITogT2JzZXJ2YWJsZTx7IGhlaWdodDogbnVtYmVyOyB3aWR0aDogbnVtYmVyIH0+O1xyXG5cclxuICBkZWZhdWx0QnJlYWtwb2ludCA9IHtcclxuICAgIG5hbWU6IFJlc3BvbnNpdmVUb2tlbnMuYWxsLFxyXG4gICAgd2lkdGg6IDAsXHJcbiAgfTtcclxuXHJcbiAgYnJlYWtwb2ludHM6IHsgbmFtZTogc3RyaW5nOyB3aWR0aDogbnVtYmVyIH1bXSA9IHRoaXMuYnVpbGRCcmVha3BvaW50cyh0aGlzLnByb3ZpZGVkQnJlYWtwb2ludHMpO1xyXG5cclxuICBwcm90ZWN0ZWQgZ2V0Q3VycmVudFNpemUgPSAoKSA9PiAoe1xyXG4gICAgaGVpZ2h0OiB0aGlzLndpbmRvdy5pbm5lckhlaWdodCxcclxuICAgIHdpZHRoOiB0aGlzLndpbmRvdy5pbm5lcldpZHRoLFxyXG4gIH0pO1xyXG5cclxuICBwcm90ZWN0ZWQgbWFwU2l6ZVRvQnJlYWtwb2ludCA9ICh7IHdpZHRoIH0gPSB0aGlzLmdldEN1cnJlbnRTaXplKCkpID0+IHtcclxuICAgIHJldHVybiB0aGlzLmJyZWFrcG9pbnRzLmZpbmQocyA9PiB3aWR0aCA+PSBzLndpZHRoKSBhcyBSZXNwb25zaXZlQnJlYWtwb2ludDtcclxuICB9O1xyXG5cclxuICBjdXJyZW50U2l6ZSQ6IEJlaGF2aW9yU3ViamVjdDxSZXNwb25zaXZlQnJlYWtwb2ludD4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFJlc3BvbnNpdmVCcmVha3BvaW50PihcclxuICAgIHRoaXMubWFwU2l6ZVRvQnJlYWtwb2ludCgpLFxyXG4gICk7XHJcblxyXG4gIHNob3VsZFJlbmRlcldpdGhDdXJyZW50U2l6ZSA9IChxdWVyeTogc3RyaW5nKSA9PiB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXRjaFF1ZXJ5KHF1ZXJ5KTtcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoUkVTUE9OU0lWRV9CUkVBS1BPSU5UUykgcHJvdGVjdGVkIHByb3ZpZGVkQnJlYWtwb2ludHM6IFJlc3BvbnNpdmVCcmVha3BvaW50cyxcclxuICAgIEBJbmplY3QoV0lORE9XKSBwcm90ZWN0ZWQgd2luZG93OiBhbnksXHJcbiAgKSB7XHJcbiAgICB0aGlzLnNldHVwTGlzdGVuZXIoKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzZXR1cExpc3RlbmVyKCkge1xyXG4gICAgdGhpcy5jdXJyZW50UmVzb2x1dGlvbiQgPSBmcm9tRXZlbnQodGhpcy53aW5kb3csICdyZXNpemUnKVxyXG4gICAgICAucGlwZShtYXAodGhpcy5nZXRDdXJyZW50U2l6ZSkpXHJcbiAgICAgIC5waXBlKHN0YXJ0V2l0aCh0aGlzLmdldEN1cnJlbnRTaXplKCkpKTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRSZXNvbHV0aW9uJFxyXG4gICAgICAucGlwZShtYXAodGhpcy5tYXBTaXplVG9CcmVha3BvaW50KSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSlcclxuICAgICAgLnN1YnNjcmliZShjdXJyZW50ID0+IHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTaXplJC5uZXh0KGN1cnJlbnQpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBidWlsZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzOiBSZXNwb25zaXZlQnJlYWtwb2ludHMpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIC4uLk9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKVxyXG4gICAgICAgIC5tYXAoa2V5ID0+ICh7XHJcbiAgICAgICAgICBuYW1lOiBrZXksXHJcbiAgICAgICAgICB3aWR0aDogYnJlYWtwb2ludHNba2V5XSxcclxuICAgICAgICB9KSlcclxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi53aWR0aCAtIGEud2lkdGgpLFxyXG4gICAgICB0aGlzLmRlZmF1bHRCcmVha3BvaW50LFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBtYXRjaFF1ZXJ5KHF1ZXJ5OiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHsgd2lkdGggfSA9IHRoaXMuZ2V0Q3VycmVudFNpemUoKTtcclxuICAgIGNvbnN0IHRva2VucyA9IHF1ZXJ5LnNwbGl0KCcgJyk7XHJcbiAgICBjb25zdCBmaW5kSW5Ub2tlbnMgPSAoc2l6ZTogc3RyaW5nKSA9PlxyXG4gICAgICB0b2tlbnMuZmluZCh0b2tlbiA9PiB0b2tlbi5zcGxpdChSZXNwb25zaXZlVG9rZW5zLnNlcGFyYXRvcilbMF0gPT09IHNpemUpO1xyXG5cclxuICAgIGNvbnN0IG1hdGNoZWRCcmVha3BvaW50ID0gdGhpcy5icmVha3BvaW50cy5maW5kKFxyXG4gICAgICBicmVha3BvaW50ID0+IHdpZHRoID49IGJyZWFrcG9pbnQud2lkdGggJiYgZmluZEluVG9rZW5zKGJyZWFrcG9pbnQubmFtZSksXHJcbiAgICApO1xyXG4gICAgaWYgKG1hdGNoZWRCcmVha3BvaW50KSB7XHJcbiAgICAgIGNvbnN0IHRva2VuID0gZmluZEluVG9rZW5zKG1hdGNoZWRCcmVha3BvaW50Lm5hbWUpO1xyXG4gICAgICBjb25zdCBzaG91bGRCZUJpZ2dlciA9ICF0b2tlbj8uaW5jbHVkZXMoUmVzcG9uc2l2ZVRva2Vucy5ub25lKTtcclxuICAgICAgcmV0dXJuIHNob3VsZEJlQmlnZ2VyID09PSB3aWR0aCA+PSBtYXRjaGVkQnJlYWtwb2ludC53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcbiJdfQ==