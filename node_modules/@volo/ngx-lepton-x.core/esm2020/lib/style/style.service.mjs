import { Inject, Injectable } from '@angular/core';
import { LPX_STYLE_FINAL } from './tokens';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class StyleService {
    constructor(initialStyles, document) {
        this.initialStyles = initialStyles;
        this.document = document;
        this.lastInjectedStyle = null;
        this.initialized$ = new BehaviorSubject(false);
    }
    async initStyles(direction) {
        for (const style of this.initialStyles) {
            await this.loadStyle(style, direction);
        }
        this.initialized$.next(true);
    }
    async loadStyle(style, direction) {
        return new Promise((resolve, reject) => {
            const linkElem = this.createLinkElem(style, direction, resolve);
            //TODO: find a better way for understand style laaded by angular json
            const appStyles = document.querySelector('link[rel="stylesheet"][href*="styles"]');
            if (appStyles) {
                if (this.lastInjectedStyle && this.lastInjectedStyle.isConnected) {
                    this.lastInjectedStyle.insertAdjacentElement('afterend', linkElem);
                }
                else {
                    appStyles.insertAdjacentElement('beforebegin', linkElem);
                }
            }
            else {
                this.document.head.appendChild(linkElem);
            }
            this.lastInjectedStyle = linkElem;
            return Promise.resolve(linkElem);
        });
    }
    async replaceStyle(style, direction) {
        const loaded = this.document.querySelector(`link#${style.bundleName}`);
        if (loaded) {
            loaded.remove();
        }
        return this.loadStyle(style, direction);
    }
    async reloadInitialStyles(direction) {
        for (const style of this.initialStyles) {
            await this.replaceStyle(style, direction);
        }
    }
    createLinkElem(style, direction, resolve) {
        const linkElem = document.createElement('link');
        linkElem.rel = 'stylesheet';
        linkElem.id = style.bundleName;
        linkElem.href = `${style.bundleName}${direction === 'rtl' ? '.rtl' : ''}.css`;
        linkElem.onload = () => {
            resolve(linkElem);
        };
        return linkElem;
    }
}
StyleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: StyleService, deps: [{ token: LPX_STYLE_FINAL }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
StyleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: StyleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: StyleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LPX_STYLE_FINAL]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtY29yZS9zcmMvbGliL3N0eWxlL3N0eWxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFLdkMsTUFBTSxPQUFPLFlBQVk7SUFLdkIsWUFDbUMsYUFBd0IsRUFDL0IsUUFBa0I7UUFEWCxrQkFBYSxHQUFiLGFBQWEsQ0FBVztRQUMvQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTjlDLHNCQUFpQixHQUEyQixJQUFJLENBQUM7UUFFakQsaUJBQVksR0FBRyxJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztJQUtoRCxDQUFDO0lBRUosS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUF3QjtRQUN2QyxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEMsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN4QztRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUNiLEtBQWUsRUFDZixTQUF3QjtRQUV4QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNoRSxxRUFBcUU7WUFDckUsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FDdEMsd0NBQXdDLENBQ3pDLENBQUM7WUFDRixJQUFJLFNBQVMsRUFBRTtnQkFDYixJQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFO29CQUNoRSxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUNwRTtxQkFBTTtvQkFDTCxTQUFTLENBQUMscUJBQXFCLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUMxRDthQUNGO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMxQztZQUNELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUM7WUFDbEMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQ2hCLEtBQVEsRUFDUixTQUF3QjtRQUV4QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFNBQXdCO1FBQ2hELEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVPLGNBQWMsQ0FDcEIsS0FBZSxFQUNmLFNBQXdCLEVBQ3hCLE9BQTZCO1FBRTdCLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsUUFBUSxDQUFDLEdBQUcsR0FBRyxZQUFZLENBQUM7UUFDNUIsUUFBUSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQy9CLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxHQUNqQyxTQUFTLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ2pDLE1BQU0sQ0FBQztRQUNQLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzt5R0F6RVUsWUFBWSxrQkFNYixlQUFlLGFBQ2YsUUFBUTs2R0FQUCxZQUFZLGNBRlgsTUFBTTsyRkFFUCxZQUFZO2tCQUh4QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBT0ksTUFBTTsyQkFBQyxlQUFlOzhCQUNhLFFBQVE7MEJBQTNDLE1BQU07MkJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMUFhfU1RZTEVfRklOQUwgfSBmcm9tICcuL3Rva2Vucyc7XHJcbmltcG9ydCB7IExweFN0eWxlLCBMcHhTdHlsZXMgfSBmcm9tICcuL21vZGVscyc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU3R5bGVTZXJ2aWNlIHtcclxuICBsYXN0SW5qZWN0ZWRTdHlsZTogSFRNTExpbmtFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIGluaXRpYWxpemVkJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoTFBYX1NUWUxFX0ZJTkFMKSBwcml2YXRlIGluaXRpYWxTdHlsZXM6IExweFN0eWxlcyxcclxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50XHJcbiAgKSB7fVxyXG5cclxuICBhc3luYyBpbml0U3R5bGVzKGRpcmVjdGlvbjogJ3J0bCcgfCAnbHRyJykge1xyXG4gICAgZm9yIChjb25zdCBzdHlsZSBvZiB0aGlzLmluaXRpYWxTdHlsZXMpIHtcclxuICAgICAgYXdhaXQgdGhpcy5sb2FkU3R5bGUoc3R5bGUsIGRpcmVjdGlvbik7XHJcbiAgICB9XHJcbiAgICB0aGlzLmluaXRpYWxpemVkJC5uZXh0KHRydWUpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZFN0eWxlKFxyXG4gICAgc3R5bGU6IExweFN0eWxlLFxyXG4gICAgZGlyZWN0aW9uOiAnbHRyJyB8ICdydGwnXHJcbiAgKTogUHJvbWlzZTxIVE1MU3R5bGVFbGVtZW50IHwgdm9pZD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgbGlua0VsZW0gPSB0aGlzLmNyZWF0ZUxpbmtFbGVtKHN0eWxlLCBkaXJlY3Rpb24sIHJlc29sdmUpO1xyXG4gICAgICAvL1RPRE86IGZpbmQgYSBiZXR0ZXIgd2F5IGZvciB1bmRlcnN0YW5kIHN0eWxlIGxhYWRlZCBieSBhbmd1bGFyIGpzb25cclxuICAgICAgY29uc3QgYXBwU3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdW2hyZWYqPVwic3R5bGVzXCJdJ1xyXG4gICAgICApO1xyXG4gICAgICBpZiAoYXBwU3R5bGVzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGFzdEluamVjdGVkU3R5bGUgJiYgdGhpcy5sYXN0SW5qZWN0ZWRTdHlsZS5pc0Nvbm5lY3RlZCkge1xyXG4gICAgICAgICAgdGhpcy5sYXN0SW5qZWN0ZWRTdHlsZS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgbGlua0VsZW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhcHBTdHlsZXMuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmViZWdpbicsIGxpbmtFbGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtFbGVtKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxhc3RJbmplY3RlZFN0eWxlID0gbGlua0VsZW07XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobGlua0VsZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyByZXBsYWNlU3R5bGU8VCBleHRlbmRzIExweFN0eWxlPihcclxuICAgIHN0eWxlOiBULFxyXG4gICAgZGlyZWN0aW9uOiAncnRsJyB8ICdsdHInXHJcbiAgKTogUHJvbWlzZTxIVE1MU3R5bGVFbGVtZW50IHwgdm9pZD4ge1xyXG4gICAgY29uc3QgbG9hZGVkID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBsaW5rIyR7c3R5bGUuYnVuZGxlTmFtZX1gKTtcclxuICAgIGlmIChsb2FkZWQpIHtcclxuICAgICAgbG9hZGVkLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMubG9hZFN0eWxlKHN0eWxlLCBkaXJlY3Rpb24pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcmVsb2FkSW5pdGlhbFN0eWxlcyhkaXJlY3Rpb246ICdydGwnIHwgJ2x0cicpIHtcclxuICAgIGZvciAoY29uc3Qgc3R5bGUgb2YgdGhpcy5pbml0aWFsU3R5bGVzKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMucmVwbGFjZVN0eWxlKHN0eWxlLCBkaXJlY3Rpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVMaW5rRWxlbShcclxuICAgIHN0eWxlOiBMcHhTdHlsZSxcclxuICAgIGRpcmVjdGlvbjogJ3J0bCcgfCAnbHRyJyxcclxuICAgIHJlc29sdmU6IChwYXJhbTogYW55KSA9PiB2b2lkXHJcbiAgKTogSFRNTExpbmtFbGVtZW50IHtcclxuICAgIGNvbnN0IGxpbmtFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG4gICAgbGlua0VsZW0ucmVsID0gJ3N0eWxlc2hlZXQnO1xyXG4gICAgbGlua0VsZW0uaWQgPSBzdHlsZS5idW5kbGVOYW1lO1xyXG4gICAgbGlua0VsZW0uaHJlZiA9IGAke3N0eWxlLmJ1bmRsZU5hbWV9JHtcclxuICAgICAgZGlyZWN0aW9uID09PSAncnRsJyA/ICcucnRsJyA6ICcnXHJcbiAgICB9LmNzc2A7XHJcbiAgICBsaW5rRWxlbS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIHJlc29sdmUobGlua0VsZW0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBsaW5rRWxlbTtcclxuICB9XHJcbn1cclxuIl19