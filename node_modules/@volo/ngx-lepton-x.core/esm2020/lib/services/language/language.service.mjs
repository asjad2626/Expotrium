import { Inject, Injectable } from '@angular/core';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { DataStore } from '../../utils/data-store';
import { LPX_LANGUAGE } from './tokens';
import { LanguageTranslateKeys } from './language-translate-keys.enum';
import * as i0 from "@angular/core";
export class LanguageService {
    constructor(languages) {
        this.languages = languages;
        this.store = new DataStore({ languages: [] });
        this.id = 'languages';
        this.convertLanguageToNavbarItem = (languages) => {
            return languages.map((lang) => ({
                icon: '',
                text: lang.displayName,
                selected: lang.selected,
                action: () => {
                    this.setSelectedLanguage(lang);
                    return true;
                },
            }));
        };
        this.selectedLanguage$ = this.store.sliceState(({ selectedLanguage }) => selectedLanguage);
        this.languageChange$ = this.selectedLanguage$.pipe(
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        filter((lang) => lang !== undefined), distinctUntilChanged((a, b) => a?.cultureName === b?.cultureName));
        this.languages$ = this.store.sliceState((state) => state.languages);
        this.languagesAsNavbarItems$ = this.languages$.pipe(map(this.convertLanguageToNavbarItem));
        //TODO: PROVIDE API
        this.languagesAsSettingsGroup$ = this.languagesAsNavbarItems$.pipe(map((languages) => ({
            text: LanguageTranslateKeys.SettingsTitle,
            icon: 'bi bi-globe',
            id: this.id,
            children: languages,
        })));
        this.init(this.languages);
    }
    get selectedLanguage() {
        return this.store.state.selectedLanguage;
    }
    setLanguages(languages) {
        this.init(languages);
    }
    init(languages) {
        this.store.patch({
            languages,
            selectedLanguage: languages.find((lang) => lang.selected),
        });
    }
    setSelectedLanguage(lang) {
        this.store.patch({
            selectedLanguage: lang,
        });
    }
}
LanguageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageService, deps: [{ token: LPX_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });
LanguageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LPX_LANGUAGE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtY29yZS9zcmMvbGliL3NlcnZpY2VzL2xhbmd1YWdlL2xhbmd1YWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUd4QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFNdkUsTUFBTSxPQUFPLGVBQWU7SUE2QzFCLFlBQTBDLFNBQXdCO1FBQXhCLGNBQVMsR0FBVCxTQUFTLENBQWU7UUE1Q3pELFVBQUssR0FBRyxJQUFJLFNBQVMsQ0FBbUIsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVwRSxPQUFFLEdBQUcsV0FBVyxDQUFDO1FBRWpCLGdDQUEyQixHQUFHLENBQUMsU0FBd0IsRUFBbUIsRUFBRTtZQUMxRSxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzlCLElBQUksRUFBRSxFQUFFO2dCQUNSLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDdEIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixNQUFNLEVBQUUsR0FBRyxFQUFFO29CQUNYLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDL0IsT0FBTyxJQUFJLENBQUM7Z0JBQ2QsQ0FBQzthQUNGLENBQUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDO1FBRUYsc0JBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQ3ZDLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FDM0MsQ0FBQztRQU1GLG9CQUFlLEdBQTRCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJO1FBQ3BFLDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFjLENBQUMsSUFBaUIsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxFQUM5RCxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxXQUFXLEtBQUssQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUNsRSxDQUFDO1FBQ0YsZUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsNEJBQXVCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FDdEMsQ0FBQztRQUNGLG1CQUFtQjtRQUNuQiw4QkFBeUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUMzRCxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbEIsSUFBSSxFQUFFLHFCQUFxQixDQUFDLGFBQXVCO1lBQ25ELElBQUksRUFBRSxhQUFhO1lBQ25CLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNYLFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUMsQ0FBQyxDQUNKLENBQUM7UUFHQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBMUJELElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsZ0JBQStCLENBQUM7SUFDMUQsQ0FBQztJQTBCRCxZQUFZLENBQUMsU0FBd0I7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxDQUFDLFNBQXdCO1FBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ2YsU0FBUztZQUNULGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDMUQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG1CQUFtQixDQUFDLElBQWlCO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ2YsZ0JBQWdCLEVBQUUsSUFBSTtTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDOzs0R0FoRVUsZUFBZSxrQkE2Q04sWUFBWTtnSEE3Q3JCLGVBQWUsY0FGZCxNQUFNOzJGQUVQLGVBQWU7a0JBSDNCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkE4Q2MsTUFBTTsyQkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRGF0YVN0b3JlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGF0YS1zdG9yZSc7XHJcbmltcG9ydCB7IExQWF9MQU5HVUFHRSB9IGZyb20gJy4vdG9rZW5zJztcclxuaW1wb3J0IHsgTHB4TmF2YmFySXRlbSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbmF2YmFyL21vZGVscyc7XHJcbmltcG9ydCB7IExweExhbmd1YWdlLCBMcHhMYW5ndWFnZVN0YXRlIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVRyYW5zbGF0ZUtleXMgfSBmcm9tICcuL2xhbmd1YWdlLXRyYW5zbGF0ZS1rZXlzLmVudW0nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTGFuZ3VhZ2VTZXJ2aWNlIHtcclxuICByZWFkb25seSBzdG9yZSA9IG5ldyBEYXRhU3RvcmU8THB4TGFuZ3VhZ2VTdGF0ZT4oeyBsYW5ndWFnZXM6IFtdIH0pO1xyXG5cclxuICBpZCA9ICdsYW5ndWFnZXMnO1xyXG5cclxuICBjb252ZXJ0TGFuZ3VhZ2VUb05hdmJhckl0ZW0gPSAobGFuZ3VhZ2VzOiBMcHhMYW5ndWFnZVtdKTogTHB4TmF2YmFySXRlbVtdID0+IHtcclxuICAgIHJldHVybiBsYW5ndWFnZXMubWFwKChsYW5nKSA9PiAoe1xyXG4gICAgICBpY29uOiAnJyxcclxuICAgICAgdGV4dDogbGFuZy5kaXNwbGF5TmFtZSxcclxuICAgICAgc2VsZWN0ZWQ6IGxhbmcuc2VsZWN0ZWQsXHJcbiAgICAgIGFjdGlvbjogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRMYW5ndWFnZShsYW5nKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSxcclxuICAgIH0pKTtcclxuICB9O1xyXG5cclxuICBzZWxlY3RlZExhbmd1YWdlJCA9IHRoaXMuc3RvcmUuc2xpY2VTdGF0ZShcclxuICAgICh7IHNlbGVjdGVkTGFuZ3VhZ2UgfSkgPT4gc2VsZWN0ZWRMYW5ndWFnZVxyXG4gICk7XHJcblxyXG4gIGdldCBzZWxlY3RlZExhbmd1YWdlKCk6IExweExhbmd1YWdlIHtcclxuICAgIHJldHVybiB0aGlzLnN0b3JlLnN0YXRlLnNlbGVjdGVkTGFuZ3VhZ2UgYXMgTHB4TGFuZ3VhZ2U7XHJcbiAgfVxyXG5cclxuICBsYW5ndWFnZUNoYW5nZSQ6IE9ic2VydmFibGU8THB4TGFuZ3VhZ2U+ID0gdGhpcy5zZWxlY3RlZExhbmd1YWdlJC5waXBlKFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgZmlsdGVyPExweExhbmd1YWdlPigobGFuZzogTHB4TGFuZ3VhZ2UpID0+IGxhbmcgIT09IHVuZGVmaW5lZCksXHJcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgoYSwgYikgPT4gYT8uY3VsdHVyZU5hbWUgPT09IGI/LmN1bHR1cmVOYW1lKVxyXG4gICk7XHJcbiAgbGFuZ3VhZ2VzJCA9IHRoaXMuc3RvcmUuc2xpY2VTdGF0ZSgoc3RhdGUpID0+IHN0YXRlLmxhbmd1YWdlcyk7XHJcbiAgbGFuZ3VhZ2VzQXNOYXZiYXJJdGVtcyQgPSB0aGlzLmxhbmd1YWdlcyQucGlwZShcclxuICAgIG1hcCh0aGlzLmNvbnZlcnRMYW5ndWFnZVRvTmF2YmFySXRlbSlcclxuICApO1xyXG4gIC8vVE9ETzogUFJPVklERSBBUElcclxuICBsYW5ndWFnZXNBc1NldHRpbmdzR3JvdXAkID0gdGhpcy5sYW5ndWFnZXNBc05hdmJhckl0ZW1zJC5waXBlKFxyXG4gICAgbWFwKChsYW5ndWFnZXMpID0+ICh7XHJcbiAgICAgIHRleHQ6IExhbmd1YWdlVHJhbnNsYXRlS2V5cy5TZXR0aW5nc1RpdGxlIGFzIHN0cmluZyxcclxuICAgICAgaWNvbjogJ2JpIGJpLWdsb2JlJyxcclxuICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgIGNoaWxkcmVuOiBsYW5ndWFnZXMsXHJcbiAgICB9KSlcclxuICApO1xyXG5cclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KExQWF9MQU5HVUFHRSkgcHJpdmF0ZSBsYW5ndWFnZXM6IExweExhbmd1YWdlW10pIHtcclxuICAgIHRoaXMuaW5pdCh0aGlzLmxhbmd1YWdlcyk7XHJcbiAgfVxyXG5cclxuICBzZXRMYW5ndWFnZXMobGFuZ3VhZ2VzOiBMcHhMYW5ndWFnZVtdKSB7XHJcbiAgICB0aGlzLmluaXQobGFuZ3VhZ2VzKTtcclxuICB9XHJcblxyXG4gIGluaXQobGFuZ3VhZ2VzOiBMcHhMYW5ndWFnZVtdKTogdm9pZCB7XHJcbiAgICB0aGlzLnN0b3JlLnBhdGNoKHtcclxuICAgICAgbGFuZ3VhZ2VzLFxyXG4gICAgICBzZWxlY3RlZExhbmd1YWdlOiBsYW5ndWFnZXMuZmluZCgobGFuZykgPT4gbGFuZy5zZWxlY3RlZCksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldFNlbGVjdGVkTGFuZ3VhZ2UobGFuZzogTHB4TGFuZ3VhZ2UpIHtcclxuICAgIHRoaXMuc3RvcmUucGF0Y2goe1xyXG4gICAgICBzZWxlY3RlZExhbmd1YWdlOiBsYW5nLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==