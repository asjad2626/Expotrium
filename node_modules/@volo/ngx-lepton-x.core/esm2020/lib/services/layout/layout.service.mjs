import { Injectable } from '@angular/core';
import { DataStore } from '../../utils/data-store';
import * as i0 from "@angular/core";
export class LayoutService {
    constructor() {
        this.store = new DataStore({
            containerClass: [''],
        });
        this.containerClass$ = this.store.sliceState(({ containerClass }) => containerClass || []);
    }
    setClass(cssClass) {
        const containerClass = Array.isArray(cssClass) ? cssClass : [cssClass];
        this.patchStore(containerClass);
    }
    addClass(cssClass) {
        const { containerClass } = this.store.state;
        this.patchStore([...containerClass, cssClass]);
    }
    removeClass(cssClass) {
        const { containerClass } = this.store.state;
        const index = containerClass.findIndex(item => item === cssClass);
        if (index === -1)
            return;
        const update = [...containerClass.slice(0, index), ...containerClass.slice(index + 1)];
        this.patchStore(update);
    }
    removeClasses(classlist) {
        const { containerClass } = this.store.state;
        const filteredClasslist = containerClass.filter(clss => !classlist.includes(clss));
        this.patchStore(filteredClasslist);
    }
    toggleClass(cssClass) {
        const { containerClass } = this.store.state;
        const index = containerClass.findIndex(item => item === cssClass);
        if (index === -1) {
            this.addClass(cssClass);
        }
        else {
            this.removeClass(cssClass);
        }
    }
    patchStore(containerClass) {
        this.store.patch({
            containerClass,
        });
    }
}
LayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LayoutService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
LayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LayoutService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LayoutService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2xlcHRvbi14LWNvcmUvc3JjL2xpYi9zZXJ2aWNlcy9sYXlvdXQvbGF5b3V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBU25ELE1BQU0sT0FBTyxhQUFhO0lBSDFCO1FBSVcsVUFBSyxHQUFHLElBQUksU0FBUyxDQUFDO1lBQzdCLGNBQWMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNyQixDQUFDLENBQUM7UUFFSCxvQkFBZSxHQUE4QixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FDaEUsQ0FBQyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUM3QyxDQUFDO0tBeUNIO0lBdkNDLFFBQVEsQ0FBQyxRQUFnQztRQUN2QyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsUUFBUSxDQUFDLFFBQWdCO1FBQ3ZCLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQWdCO1FBQzFCLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUM1QyxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQztZQUFFLE9BQU87UUFDekIsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxhQUFhLENBQUMsU0FBbUI7UUFDL0IsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzVDLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25GLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQWdCO1FBQzFCLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUM1QyxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDekI7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLGNBQXdCO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ2YsY0FBYztTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7OzBHQS9DVSxhQUFhOzhHQUFiLGFBQWEsY0FGWixNQUFNOzJGQUVQLGFBQWE7a0JBSHpCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IERhdGFTdG9yZSB9IGZyb20gJy4uLy4uL3V0aWxzL2RhdGEtc3RvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRTZXR0aW5ncyB7XHJcbiAgY29udGFpbmVyQ2xhc3M6IHN0cmluZztcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIExheW91dFNlcnZpY2Uge1xyXG4gIHJlYWRvbmx5IHN0b3JlID0gbmV3IERhdGFTdG9yZSh7XHJcbiAgICBjb250YWluZXJDbGFzczogWycnXSxcclxuICB9KTtcclxuXHJcbiAgY29udGFpbmVyQ2xhc3MkOiBPYnNlcnZhYmxlPEFycmF5PHN0cmluZz4+ID0gdGhpcy5zdG9yZS5zbGljZVN0YXRlKFxyXG4gICAgKHsgY29udGFpbmVyQ2xhc3MgfSkgPT4gY29udGFpbmVyQ2xhc3MgfHwgW10sXHJcbiAgKTtcclxuXHJcbiAgc2V0Q2xhc3MoY3NzQ2xhc3M6IHN0cmluZyB8IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lckNsYXNzID0gQXJyYXkuaXNBcnJheShjc3NDbGFzcykgPyBjc3NDbGFzcyA6IFtjc3NDbGFzc107XHJcbiAgICB0aGlzLnBhdGNoU3RvcmUoY29udGFpbmVyQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ2xhc3MoY3NzQ2xhc3M6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgeyBjb250YWluZXJDbGFzcyB9ID0gdGhpcy5zdG9yZS5zdGF0ZTtcclxuICAgIHRoaXMucGF0Y2hTdG9yZShbLi4uY29udGFpbmVyQ2xhc3MsIGNzc0NsYXNzXSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDbGFzcyhjc3NDbGFzczogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IGNvbnRhaW5lckNsYXNzIH0gPSB0aGlzLnN0b3JlLnN0YXRlO1xyXG4gICAgY29uc3QgaW5kZXggPSBjb250YWluZXJDbGFzcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSBjc3NDbGFzcyk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm47XHJcbiAgICBjb25zdCB1cGRhdGUgPSBbLi4uY29udGFpbmVyQ2xhc3Muc2xpY2UoMCwgaW5kZXgpLCAuLi5jb250YWluZXJDbGFzcy5zbGljZShpbmRleCArIDEpXTtcclxuICAgIHRoaXMucGF0Y2hTdG9yZSh1cGRhdGUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2xhc3NlcyhjbGFzc2xpc3Q6IHN0cmluZ1tdKSB7XHJcbiAgICBjb25zdCB7IGNvbnRhaW5lckNsYXNzIH0gPSB0aGlzLnN0b3JlLnN0YXRlO1xyXG4gICAgY29uc3QgZmlsdGVyZWRDbGFzc2xpc3QgPSBjb250YWluZXJDbGFzcy5maWx0ZXIoY2xzcyA9PiAhY2xhc3NsaXN0LmluY2x1ZGVzKGNsc3MpKTtcclxuICAgIHRoaXMucGF0Y2hTdG9yZShmaWx0ZXJlZENsYXNzbGlzdCk7XHJcbiAgfVxyXG5cclxuICB0b2dnbGVDbGFzcyhjc3NDbGFzczogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IGNvbnRhaW5lckNsYXNzIH0gPSB0aGlzLnN0b3JlLnN0YXRlO1xyXG4gICAgY29uc3QgaW5kZXggPSBjb250YWluZXJDbGFzcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSBjc3NDbGFzcyk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgIHRoaXMuYWRkQ2xhc3MoY3NzQ2xhc3MpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yZW1vdmVDbGFzcyhjc3NDbGFzcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwYXRjaFN0b3JlKGNvbnRhaW5lckNsYXNzOiBzdHJpbmdbXSkge1xyXG4gICAgdGhpcy5zdG9yZS5wYXRjaCh7XHJcbiAgICAgIGNvbnRhaW5lckNsYXNzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==