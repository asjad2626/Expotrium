import { APP_INITIALIZER } from '@angular/core';
import { LanguageService } from '../services/language';
import { StyleService } from '../style';
import { distinctUntilKeyChanged, filter, switchMap, take, } from 'rxjs/operators';
export function createDirectionProvider(listenDirection) {
    return {
        provide: APP_INITIALIZER,
        multi: true,
        deps: [LanguageService, StyleService],
        useFactory: listenDirection ? listenDirectionChange : () => () => null,
    };
}
// subscribe to direction from documentElement and load direction stylesheet
export function listenDirectionChange(languageService, styleService) {
    return () => {
        return new Promise((resolve) => {
            styleService.initialized$
                .pipe(filter(Boolean), take(1), switchMap(() => languageService.languageChange$), distinctUntilKeyChanged('isRTL'))
                .subscribe(async (lang) => {
                const direction = lang?.isRTL ? 'rtl' : 'ltr';
                const documentElement = document.documentElement;
                if (documentElement.dir !== direction) {
                    documentElement.dir = direction;
                }
                await styleService.reloadInitialStyles(direction);
                resolve(null);
            });
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9sZXB0b24teC1jb3JlL3NyYy9saWIvcHJvdmlkZXJzL2RpcmVjdGlvbi5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3hDLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsTUFBTSxFQUNOLFNBQVMsRUFDVCxJQUFJLEdBQ0wsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixNQUFNLFVBQVUsdUJBQXVCLENBQUMsZUFBd0I7SUFDOUQsT0FBTztRQUNMLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLEtBQUssRUFBRSxJQUFJO1FBQ1gsSUFBSSxFQUFFLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQztRQUNyQyxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSTtLQUN2RSxDQUFDO0FBQ0osQ0FBQztBQUNELDRFQUE0RTtBQUM1RSxNQUFNLFVBQVUscUJBQXFCLENBQ25DLGVBQWdDLEVBQ2hDLFlBQTBCO0lBRTFCLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzdCLFlBQVksQ0FBQyxZQUFZO2lCQUN0QixJQUFJLENBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUNoRCx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FDakM7aUJBQ0EsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDeEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQzlDLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7Z0JBQ2pELElBQUksZUFBZSxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUU7b0JBQ3JDLGVBQWUsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO2lCQUNqQztnQkFDRCxNQUFNLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDbEQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9sYW5ndWFnZSc7XHJcbmltcG9ydCB7IFN0eWxlU2VydmljZSB9IGZyb20gJy4uL3N0eWxlJztcclxuaW1wb3J0IHtcclxuICBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCxcclxuICBmaWx0ZXIsXHJcbiAgc3dpdGNoTWFwLFxyXG4gIHRha2UsXHJcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpcmVjdGlvblByb3ZpZGVyKGxpc3RlbkRpcmVjdGlvbjogYm9vbGVhbik6IFByb3ZpZGVyIHtcclxuICByZXR1cm4ge1xyXG4gICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgICBkZXBzOiBbTGFuZ3VhZ2VTZXJ2aWNlLCBTdHlsZVNlcnZpY2VdLFxyXG4gICAgdXNlRmFjdG9yeTogbGlzdGVuRGlyZWN0aW9uID8gbGlzdGVuRGlyZWN0aW9uQ2hhbmdlIDogKCkgPT4gKCkgPT4gbnVsbCxcclxuICB9O1xyXG59XHJcbi8vIHN1YnNjcmliZSB0byBkaXJlY3Rpb24gZnJvbSBkb2N1bWVudEVsZW1lbnQgYW5kIGxvYWQgZGlyZWN0aW9uIHN0eWxlc2hlZXRcclxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbkRpcmVjdGlvbkNoYW5nZShcclxuICBsYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZSxcclxuICBzdHlsZVNlcnZpY2U6IFN0eWxlU2VydmljZVxyXG4pIHtcclxuICByZXR1cm4gKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIHN0eWxlU2VydmljZS5pbml0aWFsaXplZCRcclxuICAgICAgICAucGlwZShcclxuICAgICAgICAgIGZpbHRlcihCb29sZWFuKSxcclxuICAgICAgICAgIHRha2UoMSksXHJcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gbGFuZ3VhZ2VTZXJ2aWNlLmxhbmd1YWdlQ2hhbmdlJCksXHJcbiAgICAgICAgICBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCgnaXNSVEwnKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKGFzeW5jIChsYW5nKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBsYW5nPy5pc1JUTCA/ICdydGwnIDogJ2x0cic7XHJcbiAgICAgICAgICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICAgICAgICBpZiAoZG9jdW1lbnRFbGVtZW50LmRpciAhPT0gZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudC5kaXIgPSBkaXJlY3Rpb247XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBhd2FpdCBzdHlsZVNlcnZpY2UucmVsb2FkSW5pdGlhbFN0eWxlcyhkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuIl19