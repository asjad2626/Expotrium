import { Injectable } from '@angular/core';
import { DataStore } from '../../utils/data-store';
import * as i0 from "@angular/core";
export class BreadcrumbService {
    constructor() {
        this.store = new DataStore([]);
        this.items$ = this.store.sliceState((state) => state);
    }
    // TODO: generate id per item
    add(item) {
        const items = Array.isArray(item) ? item : [item];
        this.store.set([...this.store.state, ...items]);
    }
    // TODO: generate id per item
    insert(item, index) {
        const state = this.store.state;
        const items = Array.isArray(item) ? item : [item];
        this.store.set([...state.slice(0, index), ...items, ...state.slice(index)]);
    }
    // TODO: generate id per item
    setItems(items) {
        this.store.set(items);
    }
}
BreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: BreadcrumbService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
BreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: BreadcrumbService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9sZXB0b24teC1jb3JlL3NyYy9saWIvY29tcG9uZW50cy9icmVhZGNydW1iL2JyZWFkY3J1bWIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFnQm5ELE1BQU0sT0FBTyxpQkFBaUI7SUFIOUI7UUFJVSxVQUFLLEdBQUcsSUFBSSxTQUFTLENBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELFdBQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7S0FvQmxEO0lBbkJDLDZCQUE2QjtJQUM3QixHQUFHLENBQUMsSUFBdUM7UUFDekMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELDZCQUE2QjtJQUM3QixNQUFNLENBQUMsSUFBdUMsRUFBRSxLQUFhO1FBQzNELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQy9CLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsNkJBQTZCO0lBQzdCLFFBQVEsQ0FBQyxLQUF1QjtRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDOzs4R0FuQlUsaUJBQWlCO2tIQUFqQixpQkFBaUIsY0FGaEIsTUFBTTsyRkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhU3RvcmUgfSBmcm9tICcuLi8uLi91dGlscy9kYXRhLXN0b3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuLy8gVE9ETyA6IGFkZCBvbkNsaWNrXHJcbmV4cG9ydCBpbnRlcmZhY2UgQnJlYWRjcnVtYkl0ZW0ge1xyXG4gIGljb24/OiBzdHJpbmc7XHJcbiAgdGV4dDogc3RyaW5nIHwgT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gIGxpbms/OiBzdHJpbmc7XHJcbiAgY2hpbGRyZW4/OiBCcmVhZGNydW1iSXRlbVtdO1xyXG4gIGV4cGFuZGVkPzogYm9vbGVhbjtcclxuICBhY3RpdmU/OiBib29sZWFuO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYlNlcnZpY2Uge1xyXG4gIHByaXZhdGUgc3RvcmUgPSBuZXcgRGF0YVN0b3JlPEJyZWFkY3J1bWJJdGVtW10+KFtdKTtcclxuICBpdGVtcyQgPSB0aGlzLnN0b3JlLnNsaWNlU3RhdGUoKHN0YXRlKSA9PiBzdGF0ZSk7XHJcbiAgLy8gVE9ETzogZ2VuZXJhdGUgaWQgcGVyIGl0ZW1cclxuICBhZGQoaXRlbTogQnJlYWRjcnVtYkl0ZW0gfCBCcmVhZGNydW1iSXRlbVtdKTogdm9pZCB7XHJcbiAgICBjb25zdCBpdGVtcyA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtIDogW2l0ZW1dO1xyXG4gICAgdGhpcy5zdG9yZS5zZXQoWy4uLnRoaXMuc3RvcmUuc3RhdGUsIC4uLml0ZW1zXSk7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBnZW5lcmF0ZSBpZCBwZXIgaXRlbVxyXG4gIGluc2VydChpdGVtOiBCcmVhZGNydW1iSXRlbSB8IEJyZWFkY3J1bWJJdGVtW10sIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdG9yZS5zdGF0ZTtcclxuICAgIGNvbnN0IGl0ZW1zID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV07XHJcbiAgICB0aGlzLnN0b3JlLnNldChbLi4uc3RhdGUuc2xpY2UoMCwgaW5kZXgpLCAuLi5pdGVtcywgLi4uc3RhdGUuc2xpY2UoaW5kZXgpXSk7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBnZW5lcmF0ZSBpZCBwZXIgaXRlbVxyXG4gIHNldEl0ZW1zKGl0ZW1zOiBCcmVhZGNydW1iSXRlbVtdKTogdm9pZCB7XHJcbiAgICB0aGlzLnN0b3JlLnNldChpdGVtcyk7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPOiBBZGQgcmVtb3ZlIGZ1bmN0aW9uXHJcbn1cclxuIl19