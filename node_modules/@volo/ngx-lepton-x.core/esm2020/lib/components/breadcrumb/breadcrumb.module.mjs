import { APP_INITIALIZER, Injector, NgModule, } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BreadcrumbComponent } from './breadcrumb.component';
import { LpxIconModule } from '../icon/icon.module';
import { RouterModule } from '@angular/router';
import { LpxClickOutsideModule } from '../../directives/click-outside/click-outside.module';
import { BreadcrumbRouteListenerService } from './breadcrumb-route-listener.service';
import { ToObservableModule } from '../../pipes/to-observable/to-observable.module';
import * as i0 from "@angular/core";
export const exportedDeclarations = [BreadcrumbComponent];
export class LpxBreadcrumbModule {
    static forRoot() {
        return {
            ngModule: LpxBreadcrumbModule,
            providers: [
                {
                    provide: APP_INITIALIZER,
                    useFactory: breadCrumbInit,
                    multi: true,
                    deps: [Injector],
                },
            ],
        };
    }
}
LpxBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxBreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LpxBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: LpxBreadcrumbModule, declarations: [BreadcrumbComponent], imports: [CommonModule,
        LpxIconModule,
        ToObservableModule,
        RouterModule,
        LpxClickOutsideModule], exports: [BreadcrumbComponent] });
LpxBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxBreadcrumbModule, imports: [CommonModule,
        LpxIconModule,
        ToObservableModule,
        RouterModule,
        LpxClickOutsideModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxBreadcrumbModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...exportedDeclarations],
                    imports: [
                        CommonModule,
                        LpxIconModule,
                        ToObservableModule,
                        RouterModule,
                        LpxClickOutsideModule,
                    ],
                    exports: [...exportedDeclarations],
                }]
        }] });
export function breadCrumbInit(injector) {
    const subs = () => {
        const service = injector.get(BreadcrumbRouteListenerService);
        service.subscribeRoute();
    };
    return subs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2xlcHRvbi14LWNvcmUvc3JjL2xpYi9jb21wb25lbnRzL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGVBQWUsRUFDZixRQUFRLEVBRVIsUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdEQUFnRCxDQUFDOztBQUVwRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFZMUQsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsbUJBQW1CO1lBQzdCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxFQUFFLGNBQWM7b0JBQzFCLEtBQUssRUFBRSxJQUFJO29CQUNYLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQztpQkFDakI7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOztnSEFiVSxtQkFBbUI7aUhBQW5CLG1CQUFtQixpQkFaSyxtQkFBbUIsYUFJcEQsWUFBWTtRQUNaLGFBQWE7UUFDYixrQkFBa0I7UUFDbEIsWUFBWTtRQUNaLHFCQUFxQixhQVJZLG1CQUFtQjtpSEFZM0MsbUJBQW1CLFlBUjVCLFlBQVk7UUFDWixhQUFhO1FBQ2Isa0JBQWtCO1FBQ2xCLFlBQVk7UUFDWixxQkFBcUI7MkZBSVosbUJBQW1CO2tCQVgvQixRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLEdBQUcsb0JBQW9CLENBQUM7b0JBQ3ZDLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLGFBQWE7d0JBQ2Isa0JBQWtCO3dCQUNsQixZQUFZO3dCQUNaLHFCQUFxQjtxQkFDdEI7b0JBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxvQkFBb0IsQ0FBQztpQkFDbkM7O0FBaUJELE1BQU0sVUFBVSxjQUFjLENBQUMsUUFBa0I7SUFDL0MsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO1FBQ2hCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM3RCxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDM0IsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBUFBfSU5JVElBTElaRVIsXHJcbiAgSW5qZWN0b3IsXHJcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcclxuICBOZ01vZHVsZSxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgQnJlYWRjcnVtYkNvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMcHhJY29uTW9kdWxlIH0gZnJvbSAnLi4vaWNvbi9pY29uLm1vZHVsZSc7XHJcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IExweENsaWNrT3V0c2lkZU1vZHVsZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvY2xpY2stb3V0c2lkZS9jbGljay1vdXRzaWRlLm1vZHVsZSc7XHJcbmltcG9ydCB7IEJyZWFkY3J1bWJSb3V0ZUxpc3RlbmVyU2VydmljZSB9IGZyb20gJy4vYnJlYWRjcnVtYi1yb3V0ZS1saXN0ZW5lci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVG9PYnNlcnZhYmxlTW9kdWxlIH0gZnJvbSAnLi4vLi4vcGlwZXMvdG8tb2JzZXJ2YWJsZS90by1vYnNlcnZhYmxlLm1vZHVsZSc7XHJcblxyXG5leHBvcnQgY29uc3QgZXhwb3J0ZWREZWNsYXJhdGlvbnMgPSBbQnJlYWRjcnVtYkNvbXBvbmVudF07XHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbLi4uZXhwb3J0ZWREZWNsYXJhdGlvbnNdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIExweEljb25Nb2R1bGUsXHJcbiAgICBUb09ic2VydmFibGVNb2R1bGUsXHJcbiAgICBSb3V0ZXJNb2R1bGUsXHJcbiAgICBMcHhDbGlja091dHNpZGVNb2R1bGUsXHJcbiAgXSxcclxuICBleHBvcnRzOiBbLi4uZXhwb3J0ZWREZWNsYXJhdGlvbnNdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTHB4QnJlYWRjcnVtYk1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxMcHhCcmVhZGNydW1iTW9kdWxlPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogTHB4QnJlYWRjcnVtYk1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgICAgICAgdXNlRmFjdG9yeTogYnJlYWRDcnVtYkluaXQsXHJcbiAgICAgICAgICBtdWx0aTogdHJ1ZSxcclxuICAgICAgICAgIGRlcHM6IFtJbmplY3Rvcl0sXHJcbiAgICAgICAgfSxcclxuICAgICAgXSxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnJlYWRDcnVtYkluaXQoaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgY29uc3Qgc3VicyA9ICgpID0+IHtcclxuICAgIGNvbnN0IHNlcnZpY2UgPSBpbmplY3Rvci5nZXQoQnJlYWRjcnVtYlJvdXRlTGlzdGVuZXJTZXJ2aWNlKTtcclxuICAgIHNlcnZpY2Uuc3Vic2NyaWJlUm91dGUoKTtcclxuICB9O1xyXG4gIHJldHVybiBzdWJzO1xyXG59XHJcbiJdfQ==