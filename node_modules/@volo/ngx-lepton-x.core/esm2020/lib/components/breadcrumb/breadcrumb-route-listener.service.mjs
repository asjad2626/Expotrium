import { Injectable } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { NavbarService } from '../navbar/navbar.service';
import { BreadcrumbService } from './breadcrumb.service';
import { combineLatest } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../navbar/navbar.service";
import * as i2 from "@angular/router";
import * as i3 from "./breadcrumb.service";
export class BreadcrumbRouteListenerService {
    constructor(navbarService, router, breadcrumbService) {
        this.navbarService = navbarService;
        this.router = router;
        this.breadcrumbService = breadcrumbService;
    }
    subscribeRoute() {
        combineLatest([
            this.router.events.pipe(filter((event) => event instanceof NavigationEnd)),
            this.navbarService.navbarItems$.pipe(filter((items) => !!items.length)),
        ]).subscribe(([event, items]) => {
            let activeItem = this.navbarService.findByLink(event.url);
            if (!activeItem.item) {
                activeItem = this.navbarService.findByLink('/');
            }
            const breadCrumbItems = activeItem.location.reduce((acc, itemIndex) => {
                const parent = acc[acc.length - 1]?.children || items;
                const item = parent[itemIndex];
                return [
                    ...acc,
                    { ...item, siblings: parent },
                ];
            }, []);
            this.breadcrumbService.setItems(this.mapNavbarItemToBreadcrumbItem(breadCrumbItems));
        });
    }
    mapNavbarItemToBreadcrumbItem(items) {
        return items.map(({ text, link, icon, siblings }) => ({
            text: text || '',
            link,
            icon,
            children: this.mapNavbarItemToBreadcrumbItem(siblings || []),
        }));
    }
}
BreadcrumbRouteListenerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: BreadcrumbRouteListenerService, deps: [{ token: i1.NavbarService }, { token: i2.Router }, { token: i3.BreadcrumbService }], target: i0.ɵɵFactoryTarget.Injectable });
BreadcrumbRouteListenerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: BreadcrumbRouteListenerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: BreadcrumbRouteListenerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.NavbarService }, { type: i2.Router }, { type: i3.BreadcrumbService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi1yb3V0ZS1saXN0ZW5lci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9sZXB0b24teC1jb3JlL3NyYy9saWIvY29tcG9uZW50cy9icmVhZGNydW1iL2JyZWFkY3J1bWItcm91dGUtbGlzdGVuZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBa0IsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFVeEMsTUFBTSxPQUFPLDhCQUE4QjtJQUN6QyxZQUNVLGFBQTRCLEVBQzVCLE1BQWMsRUFDZCxpQkFBb0M7UUFGcEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7SUFDM0MsQ0FBQztJQUVKLGNBQWM7UUFDWixhQUFhLENBQUM7WUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxZQUFZLGFBQWEsQ0FBQyxDQUNsRDtZQUNELElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQzNDLEtBQXVCLENBQUMsR0FBRyxDQUM3QixDQUFDO1lBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3BCLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNqRDtZQUNELE1BQU0sZUFBZSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFO2dCQUNwRSxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLElBQUksS0FBSyxDQUFDO2dCQUN0RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQy9CLE9BQU87b0JBQ0wsR0FBRyxHQUFHO29CQUNOLEVBQUUsR0FBRyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQWdDLEVBQUU7aUJBQ3hELENBQUM7WUFDSixDQUFDLEVBQUUsRUFBNEIsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQzdCLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxlQUFlLENBQUMsQ0FDcEQsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDZCQUE2QixDQUNuQyxLQUE2QjtRQUU3QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELElBQUksRUFBRSxJQUFJLElBQUksRUFBRTtZQUNoQixJQUFJO1lBQ0osSUFBSTtZQUNKLFFBQVEsRUFBRSxJQUFJLENBQUMsNkJBQTZCLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztTQUM3RCxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7OzJIQTNDVSw4QkFBOEI7K0hBQTlCLDhCQUE4QixjQUY3QixNQUFNOzJGQUVQLDhCQUE4QjtrQkFIMUMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IE5hdmJhclNlcnZpY2UgfSBmcm9tICcuLi9uYXZiYXIvbmF2YmFyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCcmVhZGNydW1iSXRlbSwgQnJlYWRjcnVtYlNlcnZpY2UgfSBmcm9tICcuL2JyZWFkY3J1bWIuc2VydmljZSc7XHJcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBMcHhOYXZiYXJJdGVtIH0gZnJvbSAnLi4vbmF2YmFyJztcclxuXHJcbmludGVyZmFjZSBCcmVhZENydW1iTmF2aWdhdGlvbiBleHRlbmRzIExweE5hdmJhckl0ZW0ge1xyXG4gIHNpYmxpbmdzOiBCcmVhZENydW1iTmF2aWdhdGlvbltdO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYlJvdXRlTGlzdGVuZXJTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgbmF2YmFyU2VydmljZTogTmF2YmFyU2VydmljZSxcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICBwcml2YXRlIGJyZWFkY3J1bWJTZXJ2aWNlOiBCcmVhZGNydW1iU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgc3Vic2NyaWJlUm91dGUoKTogdm9pZCB7XHJcbiAgICBjb21iaW5lTGF0ZXN0KFtcclxuICAgICAgdGhpcy5yb3V0ZXIuZXZlbnRzLnBpcGUoXHJcbiAgICAgICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKVxyXG4gICAgICApLFxyXG4gICAgICB0aGlzLm5hdmJhclNlcnZpY2UubmF2YmFySXRlbXMkLnBpcGUoZmlsdGVyKChpdGVtcykgPT4gISFpdGVtcy5sZW5ndGgpKSxcclxuICAgIF0pLnN1YnNjcmliZSgoW2V2ZW50LCBpdGVtc10pID0+IHtcclxuICAgICAgbGV0IGFjdGl2ZUl0ZW0gPSB0aGlzLm5hdmJhclNlcnZpY2UuZmluZEJ5TGluayhcclxuICAgICAgICAoZXZlbnQgYXMgTmF2aWdhdGlvbkVuZCkudXJsXHJcbiAgICAgICk7XHJcbiAgICAgIGlmICghYWN0aXZlSXRlbS5pdGVtKSB7XHJcbiAgICAgICAgYWN0aXZlSXRlbSA9IHRoaXMubmF2YmFyU2VydmljZS5maW5kQnlMaW5rKCcvJyk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgYnJlYWRDcnVtYkl0ZW1zID0gYWN0aXZlSXRlbS5sb2NhdGlvbi5yZWR1Y2UoKGFjYywgaXRlbUluZGV4KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50ID0gYWNjW2FjYy5sZW5ndGggLSAxXT8uY2hpbGRyZW4gfHwgaXRlbXM7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHBhcmVudFtpdGVtSW5kZXhdO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAuLi5hY2MsXHJcbiAgICAgICAgICB7IC4uLml0ZW0sIHNpYmxpbmdzOiBwYXJlbnQgYXMgQnJlYWRDcnVtYk5hdmlnYXRpb25bXSB9LFxyXG4gICAgICAgIF07XHJcbiAgICAgIH0sIFtdIGFzIEJyZWFkQ3J1bWJOYXZpZ2F0aW9uW10pO1xyXG4gICAgICB0aGlzLmJyZWFkY3J1bWJTZXJ2aWNlLnNldEl0ZW1zKFxyXG4gICAgICAgIHRoaXMubWFwTmF2YmFySXRlbVRvQnJlYWRjcnVtYkl0ZW0oYnJlYWRDcnVtYkl0ZW1zKVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1hcE5hdmJhckl0ZW1Ub0JyZWFkY3J1bWJJdGVtKFxyXG4gICAgaXRlbXM6IEJyZWFkQ3J1bWJOYXZpZ2F0aW9uW11cclxuICApOiBCcmVhZGNydW1iSXRlbVtdIHtcclxuICAgIHJldHVybiBpdGVtcy5tYXAoKHsgdGV4dCwgbGluaywgaWNvbiwgc2libGluZ3MgfSkgPT4gKHtcclxuICAgICAgdGV4dDogdGV4dCB8fCAnJyxcclxuICAgICAgbGluayxcclxuICAgICAgaWNvbixcclxuICAgICAgY2hpbGRyZW46IHRoaXMubWFwTmF2YmFySXRlbVRvQnJlYWRjcnVtYkl0ZW0oc2libGluZ3MgfHwgW10pLFxyXG4gICAgfSkpO1xyXG4gIH1cclxufVxyXG4iXX0=