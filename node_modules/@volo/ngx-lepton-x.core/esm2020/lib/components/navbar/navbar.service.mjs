import { Inject, Injectable } from '@angular/core';
import { DataStore } from '../../utils/data-store';
import { LPX_MENU_ITEMS } from './navbar.token';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { filter, take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class NavbarService {
    constructor(menuItems, route, router) {
        this.menuItems = menuItems;
        this.route = route;
        this.router = router;
        this.store = new DataStore(this.addContainerLinks(this.menuItems));
        this.navbarItems$ = this.store.sliceState((state) => state);
        this.expandItemByLink$().pipe(take(1)).subscribe();
    }
    addNavbarItems(...menuItems) {
        this.store.set([...this.store.state, ...this.addContainerLinks(menuItems)]);
    }
    setNavbarItems(...menuItems) {
        this.store.set([...this.addContainerLinks(menuItems)]);
    }
    // TODO: muhammed: refactor this method to be readable
    addChildren(id, ...menuItems) {
        const parent = this.findById(id, this.store.state);
        const update = (items, location, link = '') => {
            const i = location.shift();
            return items.reduce((acc, item, index) => {
                return [
                    ...acc,
                    ...(index === i
                        ? [
                            {
                                ...item,
                                children: !location.length
                                    ? [
                                        ...(item.children || []),
                                        ...this.addContainerLinks(menuItems, `${link}/${item.containerLink}`),
                                    ]
                                    : update(item.children || [], location, `${link}/${item.containerLink}`),
                            },
                        ]
                        : [item]),
                ];
            }, []);
        };
        const updated = update(this.store.state, parent.location);
        this.store.patch(updated);
    }
    findByLink(link, items) {
        return this.findByProp('link', link, items);
    }
    expandItemByLink$() {
        return this.router.events
            .pipe(filter((e) => e instanceof NavigationEnd), tap(() => this.calculateExpandState()));
    }
    calculateExpandState() {
        const route = this.findByLink(this.router.url);
        const expand = (items, indexes) => {
            const matchIndex = indexes.shift();
            return items.reduce((acc, item, index) => {
                if (index === matchIndex) {
                    return [
                        ...acc,
                        {
                            ...item,
                            expanded: true,
                            selected: true,
                            children: expand(item.children || [], indexes),
                        },
                    ];
                }
                return [...acc, { ...item, expanded: false, selected: false }];
            }, []);
        };
        if (route?.item) {
            const expanded = expand(this.store.state, route.location);
            this.store.patch(expanded);
        }
    }
    findById(id, items) {
        return this.findByProp('id', id, items);
    }
    findByProp(prop, value, items, location = []) {
        const navbarItems = items || this.store.state;
        const itemIndex = navbarItems.findIndex((i) => i[prop] === value);
        let item;
        if (itemIndex === -1) {
            navbarItems.forEach((i, index) => {
                if (i.children) {
                    const child = this.findByProp(prop, value, i.children, [
                        ...location,
                        index,
                    ]);
                    if (child?.item) {
                        item = child.item;
                        location = child.location;
                    }
                }
            });
        }
        else {
            item = navbarItems[itemIndex];
            location.push(itemIndex);
        }
        return { item, location };
    }
    addContainerLinks(items, link = '') {
        return items.map((item) => ({
            ...item,
            ...(item.link && link ? { link: `${link}/${item.link}` } : {}),
            children: this.addContainerLinks(item.children || [], `${link ? link + '/' : ''}${item.containerLink || ''}`),
        }));
    }
}
NavbarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: NavbarService, deps: [{ token: LPX_MENU_ITEMS }, { token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });
NavbarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: NavbarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: NavbarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LPX_MENU_ITEMS]
                }] }, { type: i1.ActivatedRoute }, { type: i1.Router }]; } });
//# sourceMappingURL=data:application/json;base64,