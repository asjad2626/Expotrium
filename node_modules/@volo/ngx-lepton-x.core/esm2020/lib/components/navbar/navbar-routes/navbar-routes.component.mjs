import { Component, EventEmitter, Input, Output, ViewEncapsulation, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../sub-navbar/sub-navbar.component";
export class NavbarRoutesComponent {
    constructor() {
        this.routeClick = new EventEmitter();
    }
    onSubnavbarExpand(menuItem, menuItems) {
        if (menuItem.expanded) {
            menuItems
                ?.filter((item) => item !== menuItem)
                .forEach((item) => (item.expanded = false));
        }
    }
    onRouteClick(menuItem, menuItems) {
        const expandedItems = menuItems?.filter((item) => (item.expanded || item.selected) &&
            (!item.children || item.children?.includes(menuItem)));
        if (expandedItems) {
            expandedItems
                .filter((item) => item !== menuItem)
                .reduce((acc, item) => {
                item.selected = false;
                return [...acc, ...(item.children || [])];
            }, [])
                ?.filter((item) => item !== menuItem)
                .forEach((item) => {
                item.selected = false;
                item.expanded = false;
            });
        }
        this.routeClick.emit(menuItem);
    }
}
NavbarRoutesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: NavbarRoutesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NavbarRoutesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: NavbarRoutesComponent, selector: "lpx-navbar-routes", inputs: { navbarItems: "navbarItems", routerItem: "routerItem" }, outputs: { routeClick: "routeClick" }, ngImport: i0, template: "<ul class=\"lpx-nav-menu\">\r\n  <li class=\"outer-menu-item\" *ngFor=\"let item of navbarItems\">\r\n    <lpx-sub-navbar\r\n      [item]=\"item\"\r\n      (expand)=\"onSubnavbarExpand($event, navbarItems)\"\r\n      (routeClick)=\"onRouteClick($event, navbarItems)\"\r\n      [routerItem]=\"routerItem\"\r\n    ></lpx-sub-navbar>\r\n  </li>\r\n</ul>\r\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2.SubNavbarComponent, selector: "lpx-sub-navbar", inputs: ["item", "routerItem"], outputs: ["routeClick", "expand"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: NavbarRoutesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-navbar-routes', encapsulation: ViewEncapsulation.None, template: "<ul class=\"lpx-nav-menu\">\r\n  <li class=\"outer-menu-item\" *ngFor=\"let item of navbarItems\">\r\n    <lpx-sub-navbar\r\n      [item]=\"item\"\r\n      (expand)=\"onSubnavbarExpand($event, navbarItems)\"\r\n      (routeClick)=\"onRouteClick($event, navbarItems)\"\r\n      [routerItem]=\"routerItem\"\r\n    ></lpx-sub-navbar>\r\n  </li>\r\n</ul>\r\n" }]
        }], propDecorators: { navbarItems: [{
                type: Input
            }], routerItem: [{
                type: Input
            }], routeClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLXJvdXRlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2xlcHRvbi14LWNvcmUvc3JjL2xpYi9jb21wb25lbnRzL25hdmJhci9uYXZiYXItcm91dGVzL25hdmJhci1yb3V0ZXMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9sZXB0b24teC1jb3JlL3NyYy9saWIvY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLXJvdXRlcy9uYXZiYXItcm91dGVzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04saUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDOzs7O0FBVXZCLE1BQU0sT0FBTyxxQkFBcUI7SUFMbEM7UUFhRSxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQWlCLENBQUM7S0ErQmhEO0lBN0JDLGlCQUFpQixDQUFDLFFBQXVCLEVBQUUsU0FBMEI7UUFDbkUsSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQ3JCLFNBQVM7Z0JBQ1AsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7aUJBQ3BDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLFFBQXVCLEVBQUUsU0FBMEI7UUFDOUQsTUFBTSxhQUFhLEdBQUcsU0FBUyxFQUFFLE1BQU0sQ0FDckMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNQLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQ3hELENBQUM7UUFDRixJQUFJLGFBQWEsRUFBRTtZQUNqQixhQUFhO2lCQUNWLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztpQkFDbkMsTUFBTSxDQUFrQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtnQkFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVDLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ04sRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7aUJBQ3BDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O2tIQXRDVSxxQkFBcUI7c0dBQXJCLHFCQUFxQixrS0NoQmxDLG9XQVVBOzJGRE1hLHFCQUFxQjtrQkFMakMsU0FBUzsrQkFDRSxtQkFBbUIsaUJBRWQsaUJBQWlCLENBQUMsSUFBSTs4QkFJckMsV0FBVztzQkFEVixLQUFLO2dCQUlOLFVBQVU7c0JBRFQsS0FBSztnQkFJTixVQUFVO3NCQURULE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMcHhOYXZiYXJJdGVtIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCB0eXBlIE5hdmJhckl0ZW1zVHlwZSA9IExweE5hdmJhckl0ZW1bXSB8IG51bGwgfCB1bmRlZmluZWQ7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xweC1uYXZiYXItcm91dGVzJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbmF2YmFyLXJvdXRlcy5jb21wb25lbnQuaHRtbCcsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5hdmJhclJvdXRlc0NvbXBvbmVudCB7XHJcbiAgQElucHV0KClcclxuICBuYXZiYXJJdGVtczogTmF2YmFySXRlbXNUeXBlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHJvdXRlckl0ZW0hOiBib29sZWFuO1xyXG5cclxuICBAT3V0cHV0KClcclxuICByb3V0ZUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxMcHhOYXZiYXJJdGVtPigpO1xyXG5cclxuICBvblN1Ym5hdmJhckV4cGFuZChtZW51SXRlbTogTHB4TmF2YmFySXRlbSwgbWVudUl0ZW1zOiBOYXZiYXJJdGVtc1R5cGUpOiB2b2lkIHtcclxuICAgIGlmIChtZW51SXRlbS5leHBhbmRlZCkge1xyXG4gICAgICBtZW51SXRlbXNcclxuICAgICAgICA/LmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gbWVudUl0ZW0pXHJcbiAgICAgICAgLmZvckVhY2goKGl0ZW0pID0+IChpdGVtLmV4cGFuZGVkID0gZmFsc2UpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uUm91dGVDbGljayhtZW51SXRlbTogTHB4TmF2YmFySXRlbSwgbWVudUl0ZW1zOiBOYXZiYXJJdGVtc1R5cGUpOiB2b2lkIHtcclxuICAgIGNvbnN0IGV4cGFuZGVkSXRlbXMgPSBtZW51SXRlbXM/LmZpbHRlcihcclxuICAgICAgKGl0ZW0pID0+XHJcbiAgICAgICAgKGl0ZW0uZXhwYW5kZWQgfHwgaXRlbS5zZWxlY3RlZCkgJiZcclxuICAgICAgICAoIWl0ZW0uY2hpbGRyZW4gfHwgaXRlbS5jaGlsZHJlbj8uaW5jbHVkZXMobWVudUl0ZW0pKVxyXG4gICAgKTtcclxuICAgIGlmIChleHBhbmRlZEl0ZW1zKSB7XHJcbiAgICAgIGV4cGFuZGVkSXRlbXNcclxuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSBtZW51SXRlbSlcclxuICAgICAgICAucmVkdWNlPExweE5hdmJhckl0ZW1bXT4oKGFjYywgaXRlbSkgPT4ge1xyXG4gICAgICAgICAgaXRlbS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIC4uLihpdGVtLmNoaWxkcmVuIHx8IFtdKV07XHJcbiAgICAgICAgfSwgW10pXHJcbiAgICAgICAgPy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gIT09IG1lbnVJdGVtKVxyXG4gICAgICAgIC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICBpdGVtLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBpdGVtLmV4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJvdXRlQ2xpY2suZW1pdChtZW51SXRlbSk7XHJcbiAgfVxyXG59XHJcbiIsIjx1bCBjbGFzcz1cImxweC1uYXYtbWVudVwiPlxyXG4gIDxsaSBjbGFzcz1cIm91dGVyLW1lbnUtaXRlbVwiICpuZ0Zvcj1cImxldCBpdGVtIG9mIG5hdmJhckl0ZW1zXCI+XHJcbiAgICA8bHB4LXN1Yi1uYXZiYXJcclxuICAgICAgW2l0ZW1dPVwiaXRlbVwiXHJcbiAgICAgIChleHBhbmQpPVwib25TdWJuYXZiYXJFeHBhbmQoJGV2ZW50LCBuYXZiYXJJdGVtcylcIlxyXG4gICAgICAocm91dGVDbGljayk9XCJvblJvdXRlQ2xpY2soJGV2ZW50LCBuYXZiYXJJdGVtcylcIlxyXG4gICAgICBbcm91dGVySXRlbV09XCJyb3V0ZXJJdGVtXCJcclxuICAgID48L2xweC1zdWItbmF2YmFyPlxyXG4gIDwvbGk+XHJcbjwvdWw+XHJcbiJdfQ==