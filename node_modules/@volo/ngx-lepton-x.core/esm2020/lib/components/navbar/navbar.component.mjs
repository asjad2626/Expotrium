import { Component, ContentChild, Injector, TemplateRef, ViewEncapsulation, } from '@angular/core';
import { LayoutService } from '../../services/layout';
import { NavbarService } from './navbar.service';
import { NavbarRoutesDirective } from './navbar-routes/navbar-routes.directive';
import { CONTENT_AFTER_ROUTES, CONTENT_BEFORE_ROUTES } from './navbar.token';
import * as i0 from "@angular/core";
import * as i1 from "./navbar.service";
import * as i2 from "../../services/layout";
import * as i3 from "@angular/common";
import * as i4 from "../brand-logo/brand-logo.component";
import * as i5 from "../icon/icon.component";
import * as i6 from "./navbar-routes/navbar-routes.component";
export class NavbarComponent {
    constructor(service, injector, layoutService) {
        this.service = service;
        this.injector = injector;
        this.layoutService = layoutService;
        this.contentBefore = this.flatContents(CONTENT_BEFORE_ROUTES);
        this.contentAfter = this.flatContents(CONTENT_AFTER_ROUTES);
    }
    toggleSidebarHover() {
        this.layoutService.toggleClass('hover-trigger');
    }
    flatContents(token) {
        const contents = this.injector.get(token, []);
        return contents.reduce((acc, val) => acc.concat(val), []);
    }
}
NavbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: NavbarComponent, deps: [{ token: i1.NavbarService }, { token: i0.Injector }, { token: i2.LayoutService }], target: i0.ɵɵFactoryTarget.Component });
NavbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: NavbarComponent, selector: "lpx-navbar", queries: [{ propertyName: "routesTemplate", first: true, predicate: NavbarRoutesDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: "<nav class=\"lpx-nav\">\r\n  <div class=\"lpx-logo-container\">\r\n    <lpx-brand-logo></lpx-brand-logo\r\n    ><lpx-icon\r\n      class=\"menu-collapse-icon hidden-in-hover-trigger\"\r\n      iconClass=\"bi bi-filter-left\"\r\n      (click)=\"toggleSidebarHover()\"\r\n    ></lpx-icon>\r\n  </div>\r\n\r\n  <ng-container\r\n    *ngTemplateOutlet=\"customContentTemplate; context: { $implicit: contentBefore }\"\r\n  ></ng-container>\r\n\r\n  <ng-container\r\n    *ngTemplateOutlet=\"\r\n      routesTemplate || defaultRouteTemplate;\r\n      context: { $implicit: service.navbarItems$ | async }\r\n    \"\r\n  ></ng-container>\r\n\r\n  <ng-container\r\n    *ngTemplateOutlet=\"customContentTemplate; context: { $implicit: contentAfter }\"\r\n  ></ng-container>\r\n</nav>\r\n\r\n<ng-template #defaultRouteTemplate let-items>\r\n  <lpx-navbar-routes [navbarItems]=\"items\" [routerItem]=\"true\"></lpx-navbar-routes>\r\n</ng-template>\r\n\r\n<ng-template #customContentTemplate let-contents>\r\n  <ng-container *ngFor=\"let component of contents\">\r\n    <ng-container *ngComponentOutlet=\"component; injector: injector\"></ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: i3.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.BrandLogoComponent, selector: "lpx-brand-logo" }, { kind: "component", type: i5.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }, { kind: "component", type: i6.NavbarRoutesComponent, selector: "lpx-navbar-routes", inputs: ["navbarItems", "routerItem"], outputs: ["routeClick"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: NavbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-navbar', encapsulation: ViewEncapsulation.None, template: "<nav class=\"lpx-nav\">\r\n  <div class=\"lpx-logo-container\">\r\n    <lpx-brand-logo></lpx-brand-logo\r\n    ><lpx-icon\r\n      class=\"menu-collapse-icon hidden-in-hover-trigger\"\r\n      iconClass=\"bi bi-filter-left\"\r\n      (click)=\"toggleSidebarHover()\"\r\n    ></lpx-icon>\r\n  </div>\r\n\r\n  <ng-container\r\n    *ngTemplateOutlet=\"customContentTemplate; context: { $implicit: contentBefore }\"\r\n  ></ng-container>\r\n\r\n  <ng-container\r\n    *ngTemplateOutlet=\"\r\n      routesTemplate || defaultRouteTemplate;\r\n      context: { $implicit: service.navbarItems$ | async }\r\n    \"\r\n  ></ng-container>\r\n\r\n  <ng-container\r\n    *ngTemplateOutlet=\"customContentTemplate; context: { $implicit: contentAfter }\"\r\n  ></ng-container>\r\n</nav>\r\n\r\n<ng-template #defaultRouteTemplate let-items>\r\n  <lpx-navbar-routes [navbarItems]=\"items\" [routerItem]=\"true\"></lpx-navbar-routes>\r\n</ng-template>\r\n\r\n<ng-template #customContentTemplate let-contents>\r\n  <ng-container *ngFor=\"let component of contents\">\r\n    <ng-container *ngComponentOutlet=\"component; injector: injector\"></ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.NavbarService }, { type: i0.Injector }, { type: i2.LayoutService }]; }, propDecorators: { routesTemplate: [{
                type: ContentChild,
                args: [NavbarRoutesDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtY29yZS9zcmMvbGliL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2xlcHRvbi14LWNvcmUvc3JjL2xpYi9jb21wb25lbnRzL25hdmJhci9uYXZiYXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBRVosUUFBUSxFQUNSLFdBQVcsRUFFWCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXRELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7QUFPN0UsTUFBTSxPQUFPLGVBQWU7SUFPMUIsWUFDUyxPQUFzQixFQUNiLFFBQWtCLEVBQzFCLGFBQTRCO1FBRjdCLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQzFCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBRXBDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVPLFlBQVksQ0FBQyxLQUFvQztRQUN2RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDOzs0R0F2QlUsZUFBZTtnR0FBZixlQUFlLDhGQUNaLHFCQUFxQiwyQkFBVSxXQUFXLDZCQ3JCMUQsOHBDQW1DQTsyRkRmYSxlQUFlO2tCQUwzQixTQUFTOytCQUNFLFlBQVksaUJBRVAsaUJBQWlCLENBQUMsSUFBSTt1SkFJckMsY0FBYztzQkFEYixZQUFZO3VCQUFDLHFCQUFxQixFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbnRlbnRDaGlsZCxcclxuICBJbmplY3Rpb25Ub2tlbixcclxuICBJbmplY3RvcixcclxuICBUZW1wbGF0ZVJlZixcclxuICBUeXBlLFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbGF5b3V0JztcclxuXHJcbmltcG9ydCB7IE5hdmJhclNlcnZpY2UgfSBmcm9tICcuL25hdmJhci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTmF2YmFyUm91dGVzRGlyZWN0aXZlIH0gZnJvbSAnLi9uYXZiYXItcm91dGVzL25hdmJhci1yb3V0ZXMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQ09OVEVOVF9BRlRFUl9ST1VURVMsIENPTlRFTlRfQkVGT1JFX1JPVVRFUyB9IGZyb20gJy4vbmF2YmFyLnRva2VuJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbHB4LW5hdmJhcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL25hdmJhci5jb21wb25lbnQuaHRtbCcsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5hdmJhckNvbXBvbmVudCB7XHJcbiAgQENvbnRlbnRDaGlsZChOYXZiYXJSb3V0ZXNEaXJlY3RpdmUsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcclxuICByb3V0ZXNUZW1wbGF0ZT86IFRlbXBsYXRlUmVmPE5hdmJhclJvdXRlc0RpcmVjdGl2ZT47XHJcblxyXG4gIGNvbnRlbnRCZWZvcmU6IFR5cGU8YW55PltdO1xyXG4gIGNvbnRlbnRBZnRlcjogVHlwZTxhbnk+W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHNlcnZpY2U6IE5hdmJhclNlcnZpY2UsXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBsYXlvdXRTZXJ2aWNlOiBMYXlvdXRTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICB0aGlzLmNvbnRlbnRCZWZvcmUgPSB0aGlzLmZsYXRDb250ZW50cyhDT05URU5UX0JFRk9SRV9ST1VURVMpO1xyXG4gICAgdGhpcy5jb250ZW50QWZ0ZXIgPSB0aGlzLmZsYXRDb250ZW50cyhDT05URU5UX0FGVEVSX1JPVVRFUyk7XHJcbiAgfVxyXG5cclxuICB0b2dnbGVTaWRlYmFySG92ZXIoKSB7XHJcbiAgICB0aGlzLmxheW91dFNlcnZpY2UudG9nZ2xlQ2xhc3MoJ2hvdmVyLXRyaWdnZXInKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZmxhdENvbnRlbnRzKHRva2VuOiBJbmplY3Rpb25Ub2tlbjxUeXBlPGFueT5bXVtdPikge1xyXG4gICAgY29uc3QgY29udGVudHMgPSB0aGlzLmluamVjdG9yLmdldCh0b2tlbiwgW10pO1xyXG4gICAgcmV0dXJuIGNvbnRlbnRzLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pO1xyXG4gIH1cclxufVxyXG4iLCI8bmF2IGNsYXNzPVwibHB4LW5hdlwiPlxyXG4gIDxkaXYgY2xhc3M9XCJscHgtbG9nby1jb250YWluZXJcIj5cclxuICAgIDxscHgtYnJhbmQtbG9nbz48L2xweC1icmFuZC1sb2dvXHJcbiAgICA+PGxweC1pY29uXHJcbiAgICAgIGNsYXNzPVwibWVudS1jb2xsYXBzZS1pY29uIGhpZGRlbi1pbi1ob3Zlci10cmlnZ2VyXCJcclxuICAgICAgaWNvbkNsYXNzPVwiYmkgYmktZmlsdGVyLWxlZnRcIlxyXG4gICAgICAoY2xpY2spPVwidG9nZ2xlU2lkZWJhckhvdmVyKClcIlxyXG4gICAgPjwvbHB4LWljb24+XHJcbiAgPC9kaXY+XHJcblxyXG4gIDxuZy1jb250YWluZXJcclxuICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiY3VzdG9tQ29udGVudFRlbXBsYXRlOyBjb250ZXh0OiB7ICRpbXBsaWNpdDogY29udGVudEJlZm9yZSB9XCJcclxuICA+PC9uZy1jb250YWluZXI+XHJcblxyXG4gIDxuZy1jb250YWluZXJcclxuICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXHJcbiAgICAgIHJvdXRlc1RlbXBsYXRlIHx8IGRlZmF1bHRSb3V0ZVRlbXBsYXRlO1xyXG4gICAgICBjb250ZXh0OiB7ICRpbXBsaWNpdDogc2VydmljZS5uYXZiYXJJdGVtcyQgfCBhc3luYyB9XHJcbiAgICBcIlxyXG4gID48L25nLWNvbnRhaW5lcj5cclxuXHJcbiAgPG5nLWNvbnRhaW5lclxyXG4gICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjdXN0b21Db250ZW50VGVtcGxhdGU7IGNvbnRleHQ6IHsgJGltcGxpY2l0OiBjb250ZW50QWZ0ZXIgfVwiXHJcbiAgPjwvbmctY29udGFpbmVyPlxyXG48L25hdj5cclxuXHJcbjxuZy10ZW1wbGF0ZSAjZGVmYXVsdFJvdXRlVGVtcGxhdGUgbGV0LWl0ZW1zPlxyXG4gIDxscHgtbmF2YmFyLXJvdXRlcyBbbmF2YmFySXRlbXNdPVwiaXRlbXNcIiBbcm91dGVySXRlbV09XCJ0cnVlXCI+PC9scHgtbmF2YmFyLXJvdXRlcz5cclxuPC9uZy10ZW1wbGF0ZT5cclxuXHJcbjxuZy10ZW1wbGF0ZSAjY3VzdG9tQ29udGVudFRlbXBsYXRlIGxldC1jb250ZW50cz5cclxuICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBjb21wb25lbnQgb2YgY29udGVudHNcIj5cclxuICAgIDxuZy1jb250YWluZXIgKm5nQ29tcG9uZW50T3V0bGV0PVwiY29tcG9uZW50OyBpbmplY3RvcjogaW5qZWN0b3JcIj48L25nLWNvbnRhaW5lcj5cclxuICA8L25nLWNvbnRhaW5lcj5cclxuPC9uZy10ZW1wbGF0ZT5cclxuIl19