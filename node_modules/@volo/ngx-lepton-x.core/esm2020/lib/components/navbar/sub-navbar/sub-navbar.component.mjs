import { Component, EventEmitter, Injector, Input, Output, ViewEncapsulation, } from '@angular/core';
import { of } from 'rxjs';
import { take } from 'rxjs/operators';
import { getStream$ } from '../../../utils/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/router";
import * as i3 from "../../icon/icon.component";
import * as i4 from "../../../pipes/translate/translate.pipe";
export class SubNavbarComponent {
    constructor(injector) {
        this.injector = injector;
        this.routeClick = new EventEmitter();
        this.expand = new EventEmitter();
    }
    onItemClick(menuItem) {
        let action$ = of(true);
        if (menuItem.action) {
            const result = menuItem.action();
            action$ = getStream$(result);
        }
        action$.pipe(take(1)).subscribe((result) => {
            if (result) {
                this.processItemClick(menuItem);
            }
        });
    }
    onChildExpand(child) {
        if (child.expanded) {
            this.item?.children
                ?.filter((otherChild) => otherChild !== child)
                .forEach((otherChild) => {
                otherChild.expanded = false;
                otherChild.selected = false;
            });
        }
    }
    processItemClick(menuItem) {
        if (menuItem.children?.length) {
            menuItem.expanded = !menuItem.expanded;
            this.expand.emit(menuItem);
            return;
        }
        this.routeClick.emit(menuItem);
        if (!this.routerItem) {
            menuItem.selected = true;
        }
    }
}
SubNavbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SubNavbarComponent, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
SubNavbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: SubNavbarComponent, selector: "lpx-sub-navbar", inputs: { item: "item", routerItem: "routerItem" }, outputs: { routeClick: "routeClick", expand: "expand" }, ngImport: i0, template: "<ng-container *ngIf=\"item.component\">\r\n  <ng-container\r\n    *ngComponentOutlet=\"item.component; injector: injector\"\r\n  ></ng-container>\r\n</ng-container>\r\n\r\n<a\r\n  *ngIf=\"!item.component\"\r\n  class=\"lpx-menu-item-link\"\r\n  [routerLink]=\"item.link\"\r\n  [routerLinkActive]=\"item.link ? 'selected' : ''\"\r\n  [class.selected]=\"\r\n    (item.children?.length && item.expanded) || (!routerItem && item.selected)\r\n  \"\r\n  [routerLinkActiveOptions]=\"{ exact: true }\"\r\n  (click)=\"onItemClick(item)\"\r\n>\r\n  <lpx-icon\r\n    class=\"lpx-menu-item-icon\"\r\n    *ngIf=\"item.icon\"\r\n    [iconClass]=\"item.icon\"\r\n  ></lpx-icon>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"item.template || textTmpl; context: { $implicit: item }\"\r\n  ></ng-container>\r\n  <ng-template #textTmpl>\r\n    <span\r\n      class=\"lpx-menu-item-text hidden-in-hover-trigger\"\r\n      *ngIf=\"item.text\"\r\n      >{{ item.text | lpxTranslate | async }}</span\r\n    >\r\n  </ng-template>\r\n\r\n  <lpx-icon\r\n    *ngIf=\"item.children && item.children.length\"\r\n    [iconClass]=\"item.expanded ? 'chevronUp' : 'chevronDown'\"\r\n    class=\"dd-icon hidden-in-hover-trigger\"\r\n  >\r\n  </lpx-icon>\r\n</a>\r\n<ul\r\n  class=\"lpx-inner-menu hidden-in-hover-trigger\"\r\n  [class.collapsed]=\"!item.expanded\"\r\n  *ngIf=\"item.children && item.children.length\"\r\n>\r\n  <li class=\"lpx-inner-menu-item\" *ngFor=\"let child of item.children\">\r\n    <lpx-sub-navbar\r\n      [item]=\"child\"\r\n      (routeClick)=\"this.routeClick.emit($event)\"\r\n      (expand)=\"onChildExpand($event)\"\r\n    ></lpx-sub-navbar>\r\n  </li>\r\n</ul>\r\n", dependencies: [{ kind: "directive", type: i1.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i2.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "ariaCurrentWhenActive", "routerLinkActive"], outputs: ["isActiveChange"], exportAs: ["routerLinkActive"] }, { kind: "component", type: i3.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }, { kind: "component", type: SubNavbarComponent, selector: "lpx-sub-navbar", inputs: ["item", "routerItem"], outputs: ["routeClick", "expand"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "lpxTranslate" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SubNavbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-sub-navbar', encapsulation: ViewEncapsulation.None, template: "<ng-container *ngIf=\"item.component\">\r\n  <ng-container\r\n    *ngComponentOutlet=\"item.component; injector: injector\"\r\n  ></ng-container>\r\n</ng-container>\r\n\r\n<a\r\n  *ngIf=\"!item.component\"\r\n  class=\"lpx-menu-item-link\"\r\n  [routerLink]=\"item.link\"\r\n  [routerLinkActive]=\"item.link ? 'selected' : ''\"\r\n  [class.selected]=\"\r\n    (item.children?.length && item.expanded) || (!routerItem && item.selected)\r\n  \"\r\n  [routerLinkActiveOptions]=\"{ exact: true }\"\r\n  (click)=\"onItemClick(item)\"\r\n>\r\n  <lpx-icon\r\n    class=\"lpx-menu-item-icon\"\r\n    *ngIf=\"item.icon\"\r\n    [iconClass]=\"item.icon\"\r\n  ></lpx-icon>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"item.template || textTmpl; context: { $implicit: item }\"\r\n  ></ng-container>\r\n  <ng-template #textTmpl>\r\n    <span\r\n      class=\"lpx-menu-item-text hidden-in-hover-trigger\"\r\n      *ngIf=\"item.text\"\r\n      >{{ item.text | lpxTranslate | async }}</span\r\n    >\r\n  </ng-template>\r\n\r\n  <lpx-icon\r\n    *ngIf=\"item.children && item.children.length\"\r\n    [iconClass]=\"item.expanded ? 'chevronUp' : 'chevronDown'\"\r\n    class=\"dd-icon hidden-in-hover-trigger\"\r\n  >\r\n  </lpx-icon>\r\n</a>\r\n<ul\r\n  class=\"lpx-inner-menu hidden-in-hover-trigger\"\r\n  [class.collapsed]=\"!item.expanded\"\r\n  *ngIf=\"item.children && item.children.length\"\r\n>\r\n  <li class=\"lpx-inner-menu-item\" *ngFor=\"let child of item.children\">\r\n    <lpx-sub-navbar\r\n      [item]=\"child\"\r\n      (routeClick)=\"this.routeClick.emit($event)\"\r\n      (expand)=\"onChildExpand($event)\"\r\n    ></lpx-sub-navbar>\r\n  </li>\r\n</ul>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; }, propDecorators: { item: [{
                type: Input
            }], routerItem: [{
                type: Input
            }], routeClick: [{
                type: Output
            }], expand: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLW5hdmJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2xlcHRvbi14LWNvcmUvc3JjL2xpYi9jb21wb25lbnRzL25hdmJhci9zdWItbmF2YmFyL3N1Yi1uYXZiYXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9sZXB0b24teC1jb3JlL3NyYy9saWIvY29tcG9uZW50cy9uYXZiYXIvc3ViLW5hdmJhci9zdWItbmF2YmFyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFFBQVEsRUFDUixLQUFLLEVBQ0wsTUFBTSxFQUNOLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQVFuRCxNQUFNLE9BQU8sa0JBQWtCO0lBVTdCLFlBQTRCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFIcEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFpQixDQUFDO1FBQy9DLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBaUIsQ0FBQztJQUVKLENBQUM7SUFFbEQsV0FBVyxDQUFDLFFBQXVCO1FBQ2pDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2pDLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUI7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3pDLElBQUksTUFBTSxFQUFFO2dCQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFvQjtRQUNoQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRO2dCQUNqQixFQUFFLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQztpQkFDN0MsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7Z0JBQ3RCLFVBQVUsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2dCQUM1QixVQUFVLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUM5QixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0gsQ0FBQztJQUVPLGdCQUFnQixDQUFDLFFBQXVCO1FBQzlDLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUU7WUFDN0IsUUFBUSxDQUFDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0IsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDMUI7SUFDSCxDQUFDOzsrR0E5Q1Usa0JBQWtCO21HQUFsQixrQkFBa0IsbUtDbEIvQixrb0RBcURBLGl1Q0RuQ2Esa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBTDlCLFNBQVM7K0JBQ0UsZ0JBQWdCLGlCQUVYLGlCQUFpQixDQUFDLElBQUk7K0ZBSXJDLElBQUk7c0JBREgsS0FBSztnQkFJTixVQUFVO3NCQURULEtBQUs7Z0JBR0ksVUFBVTtzQkFBbkIsTUFBTTtnQkFDRyxNQUFNO3NCQUFmLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgSW5qZWN0b3IsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBnZXRTdHJlYW0kIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29tbW9uJztcclxuaW1wb3J0IHsgTHB4TmF2YmFySXRlbSB9IGZyb20gJy4uL21vZGVscyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xweC1zdWItbmF2YmFyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vc3ViLW5hdmJhci5jb21wb25lbnQuaHRtbCcsXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFN1Yk5hdmJhckNvbXBvbmVudCB7XHJcbiAgQElucHV0KClcclxuICBpdGVtITogTHB4TmF2YmFySXRlbTtcclxuXHJcbiAgQElucHV0KClcclxuICByb3V0ZXJJdGVtITogYm9vbGVhbjtcclxuXHJcbiAgQE91dHB1dCgpIHJvdXRlQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPExweE5hdmJhckl0ZW0+KCk7XHJcbiAgQE91dHB1dCgpIGV4cGFuZCA9IG5ldyBFdmVudEVtaXR0ZXI8THB4TmF2YmFySXRlbT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGluamVjdG9yOiBJbmplY3Rvcikge31cclxuXHJcbiAgb25JdGVtQ2xpY2sobWVudUl0ZW06IExweE5hdmJhckl0ZW0pOiB2b2lkIHtcclxuICAgIGxldCBhY3Rpb24kID0gb2YodHJ1ZSk7XHJcbiAgICBpZiAobWVudUl0ZW0uYWN0aW9uKSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IG1lbnVJdGVtLmFjdGlvbigpO1xyXG4gICAgICBhY3Rpb24kID0gZ2V0U3RyZWFtJChyZXN1bHQpO1xyXG4gICAgfVxyXG4gICAgYWN0aW9uJC5waXBlKHRha2UoMSkpLnN1YnNjcmliZSgocmVzdWx0KSA9PiB7XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NJdGVtQ2xpY2sobWVudUl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uQ2hpbGRFeHBhbmQoY2hpbGQ6IExweE5hdmJhckl0ZW0pOiB2b2lkIHtcclxuICAgIGlmIChjaGlsZC5leHBhbmRlZCkge1xyXG4gICAgICB0aGlzLml0ZW0/LmNoaWxkcmVuXHJcbiAgICAgICAgPy5maWx0ZXIoKG90aGVyQ2hpbGQpID0+IG90aGVyQ2hpbGQgIT09IGNoaWxkKVxyXG4gICAgICAgIC5mb3JFYWNoKChvdGhlckNoaWxkKSA9PiB7XHJcbiAgICAgICAgICBvdGhlckNoaWxkLmV4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBvdGhlckNoaWxkLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2Nlc3NJdGVtQ2xpY2sobWVudUl0ZW06IExweE5hdmJhckl0ZW0pOiB2b2lkIHtcclxuICAgIGlmIChtZW51SXRlbS5jaGlsZHJlbj8ubGVuZ3RoKSB7XHJcbiAgICAgIG1lbnVJdGVtLmV4cGFuZGVkID0gIW1lbnVJdGVtLmV4cGFuZGVkO1xyXG4gICAgICB0aGlzLmV4cGFuZC5lbWl0KG1lbnVJdGVtKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yb3V0ZUNsaWNrLmVtaXQobWVudUl0ZW0pO1xyXG4gICAgaWYgKCF0aGlzLnJvdXRlckl0ZW0pIHtcclxuICAgICAgbWVudUl0ZW0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiaXRlbS5jb21wb25lbnRcIj5cclxuICA8bmctY29udGFpbmVyXHJcbiAgICAqbmdDb21wb25lbnRPdXRsZXQ9XCJpdGVtLmNvbXBvbmVudDsgaW5qZWN0b3I6IGluamVjdG9yXCJcclxuICA+PC9uZy1jb250YWluZXI+XHJcbjwvbmctY29udGFpbmVyPlxyXG5cclxuPGFcclxuICAqbmdJZj1cIiFpdGVtLmNvbXBvbmVudFwiXHJcbiAgY2xhc3M9XCJscHgtbWVudS1pdGVtLWxpbmtcIlxyXG4gIFtyb3V0ZXJMaW5rXT1cIml0ZW0ubGlua1wiXHJcbiAgW3JvdXRlckxpbmtBY3RpdmVdPVwiaXRlbS5saW5rID8gJ3NlbGVjdGVkJyA6ICcnXCJcclxuICBbY2xhc3Muc2VsZWN0ZWRdPVwiXHJcbiAgICAoaXRlbS5jaGlsZHJlbj8ubGVuZ3RoICYmIGl0ZW0uZXhwYW5kZWQpIHx8ICghcm91dGVySXRlbSAmJiBpdGVtLnNlbGVjdGVkKVxyXG4gIFwiXHJcbiAgW3JvdXRlckxpbmtBY3RpdmVPcHRpb25zXT1cInsgZXhhY3Q6IHRydWUgfVwiXHJcbiAgKGNsaWNrKT1cIm9uSXRlbUNsaWNrKGl0ZW0pXCJcclxuPlxyXG4gIDxscHgtaWNvblxyXG4gICAgY2xhc3M9XCJscHgtbWVudS1pdGVtLWljb25cIlxyXG4gICAgKm5nSWY9XCJpdGVtLmljb25cIlxyXG4gICAgW2ljb25DbGFzc109XCJpdGVtLmljb25cIlxyXG4gID48L2xweC1pY29uPlxyXG4gIDxuZy1jb250YWluZXJcclxuICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiaXRlbS50ZW1wbGF0ZSB8fCB0ZXh0VG1wbDsgY29udGV4dDogeyAkaW1wbGljaXQ6IGl0ZW0gfVwiXHJcbiAgPjwvbmctY29udGFpbmVyPlxyXG4gIDxuZy10ZW1wbGF0ZSAjdGV4dFRtcGw+XHJcbiAgICA8c3BhblxyXG4gICAgICBjbGFzcz1cImxweC1tZW51LWl0ZW0tdGV4dCBoaWRkZW4taW4taG92ZXItdHJpZ2dlclwiXHJcbiAgICAgICpuZ0lmPVwiaXRlbS50ZXh0XCJcclxuICAgICAgPnt7IGl0ZW0udGV4dCB8IGxweFRyYW5zbGF0ZSB8IGFzeW5jIH19PC9zcGFuXHJcbiAgICA+XHJcbiAgPC9uZy10ZW1wbGF0ZT5cclxuXHJcbiAgPGxweC1pY29uXHJcbiAgICAqbmdJZj1cIml0ZW0uY2hpbGRyZW4gJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGhcIlxyXG4gICAgW2ljb25DbGFzc109XCJpdGVtLmV4cGFuZGVkID8gJ2NoZXZyb25VcCcgOiAnY2hldnJvbkRvd24nXCJcclxuICAgIGNsYXNzPVwiZGQtaWNvbiBoaWRkZW4taW4taG92ZXItdHJpZ2dlclwiXHJcbiAgPlxyXG4gIDwvbHB4LWljb24+XHJcbjwvYT5cclxuPHVsXHJcbiAgY2xhc3M9XCJscHgtaW5uZXItbWVudSBoaWRkZW4taW4taG92ZXItdHJpZ2dlclwiXHJcbiAgW2NsYXNzLmNvbGxhcHNlZF09XCIhaXRlbS5leHBhbmRlZFwiXHJcbiAgKm5nSWY9XCJpdGVtLmNoaWxkcmVuICYmIGl0ZW0uY2hpbGRyZW4ubGVuZ3RoXCJcclxuPlxyXG4gIDxsaSBjbGFzcz1cImxweC1pbm5lci1tZW51LWl0ZW1cIiAqbmdGb3I9XCJsZXQgY2hpbGQgb2YgaXRlbS5jaGlsZHJlblwiPlxyXG4gICAgPGxweC1zdWItbmF2YmFyXHJcbiAgICAgIFtpdGVtXT1cImNoaWxkXCJcclxuICAgICAgKHJvdXRlQ2xpY2spPVwidGhpcy5yb3V0ZUNsaWNrLmVtaXQoJGV2ZW50KVwiXHJcbiAgICAgIChleHBhbmQpPVwib25DaGlsZEV4cGFuZCgkZXZlbnQpXCJcclxuICAgID48L2xweC1zdWItbmF2YmFyPlxyXG4gIDwvbGk+XHJcbjwvdWw+XHJcbiJdfQ==