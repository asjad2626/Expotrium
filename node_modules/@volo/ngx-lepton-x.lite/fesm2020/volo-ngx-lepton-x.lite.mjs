import * as i0 from '@angular/core';
import { InjectionToken, APP_INITIALIZER, NgModule, Component, ViewEncapsulation, Inject } from '@angular/core';
import * as i1 from '@volo/ngx-lepton-x.core';
import { LPX_INITIAL_STYLES, LPX_LAYOUT_STYLE_FINAL, LPX_STYLE_FINAL, createStyleFactory, LpxCoreModule, LpxAvatarModule, LpxTranslateModule, LpxIconModule } from '@volo/ngx-lepton-x.core';
import { OBSERVE, OBSERVE_PROVIDER } from 'ng-observe';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@ng-bootstrap/ng-bootstrap';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i4 from '@angular/router';
import { RouterModule } from '@angular/router';

const LPX_LITE_STYLE_TOKEN = new InjectionToken('LPX_LITE_STYLE_TOKEN');

const getLpxLiteStyleProviders = (styleFactory) => [
    {
        provide: APP_INITIALIZER,
        deps: [LPX_LITE_STYLE_TOKEN],
        multi: true,
        useValue: () => null,
    },
    {
        provide: LPX_LITE_STYLE_TOKEN,
        deps: [LPX_INITIAL_STYLES, LPX_LAYOUT_STYLE_FINAL],
        useFactory: mergeStyles,
    },
    {
        provide: LPX_STYLE_FINAL,
        deps: [LPX_LITE_STYLE_TOKEN],
        useFactory: createStyleFactory(styleFactory),
    },
];
function mergeStyles(styleList, layoutStyles) {
    styleList.push({
        bundleName: 'bootstrap-dim',
    });
    styleList.push({
        bundleName: 'ng-bundle',
    });
    styleList.push({
        bundleName: 'font-bundle',
    });
    return [...styleList, ...layoutStyles];
}

class LpxModule {
    static forRoot(options) {
        return {
            ngModule: LpxModule,
            providers: [
                getLpxLiteStyleProviders(options?.styleFactory),
                LpxCoreModule.forRoot(options).providers,
            ],
        };
    }
}
LpxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LpxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: LpxModule, imports: [LpxCoreModule] });
LpxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxModule, imports: [LpxCoreModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LpxCoreModule],
                }]
        }] });

class UserProfileComponent {
    constructor(service, observe, injector) {
        this.service = service;
        this.observe = observe;
        this.injector = injector;
        this.user = this.observe(this.service.user$);
    }
    get userProfile() {
        return this.user.value;
    }
    onActionClick(item) {
        item.action?.();
    }
}
UserProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfileComponent, deps: [{ token: i1.UserProfileService }, { token: OBSERVE }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
UserProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: UserProfileComponent, selector: "lpx-user-profile", providers: [OBSERVE_PROVIDER], ngImport: i0, template: "<div ngbDropdown *ngIf=\"userProfile.userName\">\r\n  <div class=\"lpx-user-profile\" ngbDropdownToggle role=\"button\">\r\n    <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n    <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n  </div>\r\n  <ng-container *ngIf=\"userProfile.userActionGroups\">\r\n    <div ngbDropdownMenu>\r\n      <ng-container\r\n        *ngFor=\"\r\n          let actionGroup of userProfile.userActionGroups;\r\n          let last = last\r\n        \"\r\n      >\r\n        <ng-container *ngFor=\"let action of actionGroup\">\r\n          <ng-container *ngIf=\"action.component\">\r\n            <ng-container\r\n              *ngComponentOutlet=\"action.component; injector: injector\"\r\n            ></ng-container>\r\n          </ng-container>\r\n          <a\r\n            ngbDropdownItem\r\n            *ngIf=\"!action.component\"\r\n            (click)=\"onActionClick(action)\"\r\n            [routerLink]=\"action.link\"\r\n            >{{ action.text || '' | lpxTranslate | async }}</a\r\n          >\r\n        </ng-container>\r\n        <div class=\"dropdown-divider\" *ngIf=\"!last\"></div>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: i2.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.AvatarComponent, selector: "lpx-avatar", inputs: ["avatar"] }, { kind: "directive", type: i3.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { kind: "directive", type: i3.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { kind: "directive", type: i3.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { kind: "directive", type: i3.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { kind: "directive", type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "lpxTranslate" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-user-profile', encapsulation: ViewEncapsulation.None, providers: [OBSERVE_PROVIDER], template: "<div ngbDropdown *ngIf=\"userProfile.userName\">\r\n  <div class=\"lpx-user-profile\" ngbDropdownToggle role=\"button\">\r\n    <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n    <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n  </div>\r\n  <ng-container *ngIf=\"userProfile.userActionGroups\">\r\n    <div ngbDropdownMenu>\r\n      <ng-container\r\n        *ngFor=\"\r\n          let actionGroup of userProfile.userActionGroups;\r\n          let last = last\r\n        \"\r\n      >\r\n        <ng-container *ngFor=\"let action of actionGroup\">\r\n          <ng-container *ngIf=\"action.component\">\r\n            <ng-container\r\n              *ngComponentOutlet=\"action.component; injector: injector\"\r\n            ></ng-container>\r\n          </ng-container>\r\n          <a\r\n            ngbDropdownItem\r\n            *ngIf=\"!action.component\"\r\n            (click)=\"onActionClick(action)\"\r\n            [routerLink]=\"action.link\"\r\n            >{{ action.text || '' | lpxTranslate | async }}</a\r\n          >\r\n        </ng-container>\r\n        <div class=\"dropdown-divider\" *ngIf=\"!last\"></div>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserProfileService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OBSERVE]
                }] }, { type: i0.Injector }]; } });

class UserProfileModule {
}
UserProfileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
UserProfileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: UserProfileModule, declarations: [UserProfileComponent], imports: [CommonModule,
        LpxAvatarModule,
        NgbDropdownModule,
        RouterModule,
        LpxTranslateModule], exports: [UserProfileComponent] });
UserProfileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfileModule, imports: [CommonModule,
        LpxAvatarModule,
        NgbDropdownModule,
        RouterModule,
        LpxTranslateModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfileModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [UserProfileComponent],
                    imports: [
                        CommonModule,
                        LpxAvatarModule,
                        NgbDropdownModule,
                        RouterModule,
                        LpxTranslateModule,
                    ],
                    exports: [UserProfileComponent],
                }]
        }] });

class LanguageSelectionComponent {
    constructor(service, observe) {
        this.service = service;
        this.observe = observe;
        this.availableLanguages = this.observe(this.service.languages$);
        this.selectedLanguage = this.observe(this.service.selectedLanguage$);
    }
    get langs() {
        return this.availableLanguages.value;
    }
    onLanguageSelection(lang) {
        this.service.setSelectedLanguage(lang);
    }
}
LanguageSelectionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionComponent, deps: [{ token: i1.LanguageService }, { token: OBSERVE }], target: i0.ɵɵFactoryTarget.Component });
LanguageSelectionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: LanguageSelectionComponent, selector: "lpx-language-selection", providers: [OBSERVE_PROVIDER], ngImport: i0, template: "<div ngbDropdown class=\"lpx-language-selection\">\r\n  <div ngbDropdownToggle role=\"button\">\r\n    <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n    {{ selectedLanguage.value?.displayName }}\r\n  </div>\r\n  <div ngbDropdownMenu>\r\n    <button ngbDropdownItem (click)=\"onLanguageSelection(lang)\" *ngFor=\"let lang of langs\">\r\n      {{ lang.displayName }}\r\n    </button>\r\n  </div>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { kind: "directive", type: i3.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { kind: "directive", type: i3.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { kind: "directive", type: i3.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { kind: "component", type: i1.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-language-selection', encapsulation: ViewEncapsulation.None, providers: [OBSERVE_PROVIDER], template: "<div ngbDropdown class=\"lpx-language-selection\">\r\n  <div ngbDropdownToggle role=\"button\">\r\n    <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n    {{ selectedLanguage.value?.displayName }}\r\n  </div>\r\n  <div ngbDropdownMenu>\r\n    <button ngbDropdownItem (click)=\"onLanguageSelection(lang)\" *ngFor=\"let lang of langs\">\r\n      {{ lang.displayName }}\r\n    </button>\r\n  </div>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.LanguageService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OBSERVE]
                }] }]; } });

class LanguageSelectionModule {
}
LanguageSelectionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LanguageSelectionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionModule, declarations: [LanguageSelectionComponent], imports: [CommonModule, NgbDropdownModule, LpxIconModule], exports: [LanguageSelectionComponent] });
LanguageSelectionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionModule, imports: [CommonModule, NgbDropdownModule, LpxIconModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [LanguageSelectionComponent],
                    imports: [CommonModule, NgbDropdownModule, LpxIconModule],
                    exports: [LanguageSelectionComponent],
                }]
        }] });

/*
 * Public API Surface of lepton-x-lite
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LanguageSelectionComponent, LanguageSelectionModule, LpxModule, UserProfileComponent, UserProfileModule };
//# sourceMappingURL=volo-ngx-lepton-x.lite.mjs.map
