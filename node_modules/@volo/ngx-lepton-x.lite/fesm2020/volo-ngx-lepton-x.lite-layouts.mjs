import * as i0 from '@angular/core';
import { Component, NgModule, Directive, ViewEncapsulation, Inject, ChangeDetectionStrategy, ContentChild, InjectionToken, APP_INITIALIZER } from '@angular/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@volo/ngx-lepton-x.core';
import { LpxBrandLogoModule, LpxIconModule, LpxNavbarModule, NavbarPanelDirective, MobileNavbarPanelDirective, BreadcrumbPanelDirective, FooterPanelDirective, LPX_LAYOUT_STYLE_FINAL, createStyleFactory, LpxAvatarModule, LpxTranslateModule, LpxBreadcrumbModule, LpxResponsiveModule, LpxFooterModule, PanelsModule } from '@volo/ngx-lepton-x.core';
import * as i3$1 from '@volo/ngx-lepton-x.lite';
import { LanguageSelectionModule, UserProfileModule } from '@volo/ngx-lepton-x.lite';
import { OBSERVE, OBSERVE_PROVIDER } from 'ng-observe';
import * as i3 from '@angular/router';
import { RouterModule } from '@angular/router';

class MobileNavbarComponent {
    constructor(navService, layoutService) {
        this.navService = navService;
        this.layoutService = layoutService;
        this.userMenuHidden = true;
        this.navItemsHidden = true;
        this.mobileMenuOpened = 'mobile-menu-opened';
    }
    ngOnDestroy() {
        this.layoutService.removeClass(this.mobileMenuOpened);
    }
    toggleUserMenu() {
        this.userMenuHidden = !this.userMenuHidden;
    }
    toggleNavbar() {
        this.navItemsHidden = !this.navItemsHidden;
        this.setLayoutClass();
    }
    setLayoutClass() {
        if (this.navItemsHidden) {
            this.layoutService.removeClass(this.mobileMenuOpened);
        }
        else {
            this.layoutService.addClass(this.mobileMenuOpened);
        }
    }
}
MobileNavbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MobileNavbarComponent, deps: [{ token: i1.NavbarService }, { token: i1.LayoutService }], target: i0.ɵɵFactoryTarget.Component });
MobileNavbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: MobileNavbarComponent, selector: "lpx-mobile-navbar", ngImport: i0, template: "<div class=\"lpx-mobile-navbar-container\">\r\n  <header class=\"lpx-mobile-navbar\">\r\n    <lpx-brand-logo class=\"lpx-logo-container\"></lpx-brand-logo>\r\n    <div class=\"user-menu\">\r\n      <lpx-icon\r\n        iconClass=\"bi bi-person\"\r\n        role=\"button\"\r\n        (click)=\"toggleUserMenu()\"\r\n      ></lpx-icon>\r\n      <lpx-icon\r\n        iconClass=\"bi bi-list\"\r\n        role=\"button\"\r\n        (click)=\"toggleNavbar()\"\r\n      ></lpx-icon>\r\n    </div>\r\n  </header>\r\n\r\n  <div class=\"user-menu-groups\" [class.d-none]=\"userMenuHidden\">\r\n    <ng-content>\r\n    </ng-content>\r\n  </div>\r\n\r\n  <nav class=\"lpx-mobile-nav-items\" [class.d-none]=\"navItemsHidden\">\r\n    <lpx-navbar-routes\r\n      [navbarItems]=\"navService.navbarItems$ | async\"\r\n      [routerItem]=\"true\"\r\n      (routeClick)=\"toggleNavbar()\"\r\n    ></lpx-navbar-routes>\r\n  </nav>\r\n</div>\r\n", styles: [".mobile-menu-opened :host{height:100vh;display:block}\n"], dependencies: [{ kind: "component", type: i1.BrandLogoComponent, selector: "lpx-brand-logo" }, { kind: "component", type: i1.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }, { kind: "component", type: i1.NavbarRoutesComponent, selector: "lpx-navbar-routes", inputs: ["navbarItems", "routerItem"], outputs: ["routeClick"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MobileNavbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-mobile-navbar', template: "<div class=\"lpx-mobile-navbar-container\">\r\n  <header class=\"lpx-mobile-navbar\">\r\n    <lpx-brand-logo class=\"lpx-logo-container\"></lpx-brand-logo>\r\n    <div class=\"user-menu\">\r\n      <lpx-icon\r\n        iconClass=\"bi bi-person\"\r\n        role=\"button\"\r\n        (click)=\"toggleUserMenu()\"\r\n      ></lpx-icon>\r\n      <lpx-icon\r\n        iconClass=\"bi bi-list\"\r\n        role=\"button\"\r\n        (click)=\"toggleNavbar()\"\r\n      ></lpx-icon>\r\n    </div>\r\n  </header>\r\n\r\n  <div class=\"user-menu-groups\" [class.d-none]=\"userMenuHidden\">\r\n    <ng-content>\r\n    </ng-content>\r\n  </div>\r\n\r\n  <nav class=\"lpx-mobile-nav-items\" [class.d-none]=\"navItemsHidden\">\r\n    <lpx-navbar-routes\r\n      [navbarItems]=\"navService.navbarItems$ | async\"\r\n      [routerItem]=\"true\"\r\n      (routeClick)=\"toggleNavbar()\"\r\n    ></lpx-navbar-routes>\r\n  </nav>\r\n</div>\r\n", styles: [".mobile-menu-opened :host{height:100vh;display:block}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NavbarService }, { type: i1.LayoutService }]; } });

class LpxMobileNavbarModule {
}
LpxMobileNavbarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxMobileNavbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LpxMobileNavbarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: LpxMobileNavbarModule, declarations: [MobileNavbarComponent], imports: [CommonModule,
        LpxBrandLogoModule,
        LpxIconModule,
        LanguageSelectionModule,
        LpxNavbarModule], exports: [MobileNavbarComponent] });
LpxMobileNavbarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxMobileNavbarModule, imports: [CommonModule,
        LpxBrandLogoModule,
        LpxIconModule,
        LanguageSelectionModule,
        LpxNavbarModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxMobileNavbarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MobileNavbarComponent],
                    imports: [
                        CommonModule,
                        LpxBrandLogoModule,
                        LpxIconModule,
                        LanguageSelectionModule,
                        LpxNavbarModule,
                    ],
                    exports: [MobileNavbarComponent],
                }]
        }] });

class SettingsPanelDirective {
    constructor(template) {
        this.template = template;
    }
}
SettingsPanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SettingsPanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
SettingsPanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: SettingsPanelDirective, selector: "ng-template[lpx-settings-panel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SettingsPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[lpx-settings-panel]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class LanguageSelectionPanelDirective {
    constructor(template) {
        this.template = template;
    }
}
LanguageSelectionPanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionPanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
LanguageSelectionPanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: LanguageSelectionPanelDirective, selector: "ng-template[lpx-language-selection]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[lpx-language-selection]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class UserProfilePanelDirective {
    constructor(template) {
        this.template = template;
    }
}
UserProfilePanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfilePanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
UserProfilePanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: UserProfilePanelDirective, selector: "ng-template[lpx-user-profile]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfilePanelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[lpx-user-profile]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class TopbarContentPanelDirective {
    constructor(template) {
        this.template = template;
    }
}
TopbarContentPanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: TopbarContentPanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TopbarContentPanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: TopbarContentPanelDirective, selector: "ng-template[lpx-topbar-content]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: TopbarContentPanelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[lpx-topbar-content]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class MobileUserProfilePanelDirective {
    constructor(template) {
        this.template = template;
    }
}
MobileUserProfilePanelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MobileUserProfilePanelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
MobileUserProfilePanelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: MobileUserProfilePanelDirective, selector: "ng-template[lpx-mn-user-profile-panel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MobileUserProfilePanelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[lpx-mn-user-profile-panel]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class MobileLanguageSelectionDirective {
    constructor(template) {
        this.template = template;
    }
}
MobileLanguageSelectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MobileLanguageSelectionDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
MobileLanguageSelectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: MobileLanguageSelectionDirective, selector: "ng-template[lpx-mn-language-selection]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MobileLanguageSelectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[lpx-mn-language-selection]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class MnUserProfileComponent {
    constructor(service, observe) {
        this.service = service;
        this.observe = observe;
        this.user = this.observe(this.service.user$);
        this.menuHidden = true;
    }
    get userProfile() {
        return this.user.value;
    }
    toggleMenu() {
        this.menuHidden = !this.menuHidden;
    }
    onActionClick(item) {
        item.action?.();
    }
}
MnUserProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileComponent, deps: [{ token: i1.UserProfileService }, { token: OBSERVE }], target: i0.ɵɵFactoryTarget.Component });
MnUserProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: MnUserProfileComponent, selector: "lpx-mn-user-profile", providers: [OBSERVE_PROVIDER], ngImport: i0, template: "<div class=\"lpx-user-profile btn-toggle\" role=\"button\" (click)=\"toggleMenu()\">\r\n  <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n  <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n</div>\r\n<ng-container *ngIf=\"userProfile.userActionGroups\">\r\n  <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n    <ng-container\r\n      *ngFor=\"let actionGroup of userProfile.userActionGroups; let last = last\"\r\n    >\r\n      <ng-container *ngFor=\"let action of actionGroup\">\r\n        <a\r\n          class=\"action\"\r\n          role=\"link\"\r\n          (click)=\"onActionClick(action)\"\r\n          [routerLink]=\"action.link\"\r\n        >\r\n          {{ action?.text || '' | lpxTranslate | async }}\r\n        </a>\r\n      </ng-container>\r\n\r\n      <div class=\"divider\" *ngIf=\"!last\"></div>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.AvatarComponent, selector: "lpx-avatar", inputs: ["avatar"] }, { kind: "directive", type: i3.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "lpxTranslate" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-mn-user-profile', encapsulation: ViewEncapsulation.None, providers: [OBSERVE_PROVIDER], template: "<div class=\"lpx-user-profile btn-toggle\" role=\"button\" (click)=\"toggleMenu()\">\r\n  <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n  <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n</div>\r\n<ng-container *ngIf=\"userProfile.userActionGroups\">\r\n  <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n    <ng-container\r\n      *ngFor=\"let actionGroup of userProfile.userActionGroups; let last = last\"\r\n    >\r\n      <ng-container *ngFor=\"let action of actionGroup\">\r\n        <a\r\n          class=\"action\"\r\n          role=\"link\"\r\n          (click)=\"onActionClick(action)\"\r\n          [routerLink]=\"action.link\"\r\n        >\r\n          {{ action?.text || '' | lpxTranslate | async }}\r\n        </a>\r\n      </ng-container>\r\n\r\n      <div class=\"divider\" *ngIf=\"!last\"></div>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserProfileService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OBSERVE]
                }] }]; } });

class MnLanguageSelectionComponent {
    constructor(service, observe) {
        this.service = service;
        this.observe = observe;
        this.availableLanguages = this.observe(this.service.languages$);
        this.selectedLanguage = this.observe(this.service.selectedLanguage$);
        this.menuHidden = true;
    }
    get langs() {
        return this.availableLanguages.value;
    }
    toggleMenu() {
        this.menuHidden = !this.menuHidden;
    }
    onLanguageSelection(lang) {
        this.service.setSelectedLanguage(lang);
    }
}
MnLanguageSelectionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnLanguageSelectionComponent, deps: [{ token: i1.LanguageService }, { token: OBSERVE }], target: i0.ɵɵFactoryTarget.Component });
MnLanguageSelectionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: MnLanguageSelectionComponent, selector: "lpx-mn-language-selection", providers: [OBSERVE_PROVIDER], ngImport: i0, template: "<div class=\"lpx-language-selection btn-toggle\" role=\"button\" (click)=\"toggleMenu()\">\r\n  <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n  {{ selectedLanguage.value?.displayName }}\r\n</div>\r\n\r\n<div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n  <a class=\"action\" role=\"button\" (click)=\"onLanguageSelection(lang)\" *ngFor=\"let lang of langs\">\r\n    {{ lang.displayName }}\r\n  </a>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i1.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnLanguageSelectionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-mn-language-selection', encapsulation: ViewEncapsulation.None, providers: [OBSERVE_PROVIDER], template: "<div class=\"lpx-language-selection btn-toggle\" role=\"button\" (click)=\"toggleMenu()\">\r\n  <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n  {{ selectedLanguage.value?.displayName }}\r\n</div>\r\n\r\n<div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n  <a class=\"action\" role=\"button\" (click)=\"onLanguageSelection(lang)\" *ngFor=\"let lang of langs\">\r\n    {{ lang.displayName }}\r\n  </a>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.LanguageService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OBSERVE]
                }] }]; } });

class SideMenuLayoutComponent {
    constructor(layoutService) {
        this.layoutService = layoutService;
    }
}
SideMenuLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SideMenuLayoutComponent, deps: [{ token: i1.LayoutService }], target: i0.ɵɵFactoryTarget.Component });
SideMenuLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: SideMenuLayoutComponent, selector: "lpx-layout", queries: [{ propertyName: "navbarPanel", first: true, predicate: NavbarPanelDirective, descendants: true }, { propertyName: "mobileNavbarPanel", first: true, predicate: MobileNavbarPanelDirective, descendants: true }, { propertyName: "breadcrumbPanel", first: true, predicate: BreadcrumbPanelDirective, descendants: true }, { propertyName: "settingsPanel", first: true, predicate: SettingsPanelDirective, descendants: true }, { propertyName: "languageSelectionPanelDirective", first: true, predicate: LanguageSelectionPanelDirective, descendants: true }, { propertyName: "topbarContentPanelDirective", first: true, predicate: TopbarContentPanelDirective, descendants: true }, { propertyName: "userProfilePanelDirective", first: true, predicate: UserProfilePanelDirective, descendants: true }, { propertyName: "footerPanelDirective", first: true, predicate: FooterPanelDirective, descendants: true }, { propertyName: "mobileUserProfilePanelDirective", first: true, predicate: MobileUserProfilePanelDirective, descendants: true }, { propertyName: "mobileLanguageSelectionDirective", first: true, predicate: MobileLanguageSelectionDirective, descendants: true }], ngImport: i0, template: "<div\r\n  id=\"lpx-wrapper\"\r\n  *ngIf=\"layoutService.containerClass$ | async as containerClass\"\r\n  [ngClass]=\"containerClass\"\r\n>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"mobileNavbarPanel?.template || defaultMobileNavbar\"\r\n  >\r\n  </ng-container>\r\n  <ng-template #defaultMobileNavbar>\r\n    <lpx-mobile-navbar *lpxResponsive=\"'all md-none'\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          mobileUserProfilePanelDirective?.template || defaultMobileUserProfile\r\n        \"\r\n      >\r\n      </ng-container>\r\n      <ng-template #defaultMobileUserProfile>\r\n        <lpx-mn-user-profile class=\"d-block\"></lpx-mn-user-profile>\r\n      </ng-template>\r\n\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          mobileLanguageSelectionDirective?.template ||\r\n          defaultMobilLanguageSelection\r\n        \"\r\n      >\r\n      </ng-container>\r\n      <ng-template #defaultMobilLanguageSelection>\r\n        <lpx-mn-language-selection class=\"d-block\"></lpx-mn-language-selection>\r\n      </ng-template>\r\n    </lpx-mobile-navbar>\r\n  </ng-template>\r\n\r\n  <div class=\"lpx-sidebar-container\" *lpxResponsive=\"'md'\">\r\n    <div class=\"lpx-sidebar\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"navbarPanel?.template || defaultNavbar\"\r\n      ></ng-container>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"lpx-content-container\">\r\n    <div class=\"lpx-topbar-container\">\r\n      <div class=\"lpx-topbar\">\r\n        <div class=\"lpx-breadcrumb-container\">\r\n          <ng-container *lpxResponsive=\"'md'\">\r\n            <ng-container\r\n              *ngTemplateOutlet=\"breadcrumbPanel?.template || defaultBreadcrumb\"\r\n            ></ng-container>\r\n          </ng-container>\r\n        </div>\r\n        <div class=\"lpx-topbar-content\" *lpxResponsive=\"'md'\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"\r\n              topbarContentPanelDirective?.template || defaultTopbarContent\r\n            \"\r\n          ></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"lpx-content\">\r\n      <ng-content></ng-content>\r\n      <ng-container\r\n        *ngTemplateOutlet=\"footerPanelDirective?.template || defaultFooter\"\r\n      ></ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #defaultNavbar>\r\n  <lpx-navbar></lpx-navbar>\r\n</ng-template>\r\n<ng-template #defaultBreadcrumb>\r\n  <lpx-breadcrumb></lpx-breadcrumb>\r\n</ng-template>\r\n\r\n<ng-template #defaultTopbarContent>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"\r\n      userProfilePanelDirective?.template || defaultUserProfile\r\n    \"\r\n  >\r\n  </ng-container>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"\r\n      languageSelectionPanelDirective?.template || defaultLanguageSelection\r\n    \"\r\n  ></ng-container>\r\n</ng-template>\r\n\r\n<ng-template #defaultUserProfile>\r\n  <lpx-user-profile></lpx-user-profile>\r\n</ng-template>\r\n\r\n<ng-template #defaultLanguageSelection>\r\n  <lpx-language-selection></lpx-language-selection>\r\n</ng-template>\r\n\r\n<ng-template #defaultFooter>\r\n  <lpx-footer></lpx-footer>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i1.NavbarComponent, selector: "lpx-navbar" }, { kind: "component", type: i1.BreadcrumbComponent, selector: "lpx-breadcrumb" }, { kind: "directive", type: i1.ResponsiveDirective, selector: "[lpxResponsive]", inputs: ["lpxResponsive"] }, { kind: "component", type: i3$1.UserProfileComponent, selector: "lpx-user-profile" }, { kind: "component", type: i3$1.LanguageSelectionComponent, selector: "lpx-language-selection" }, { kind: "component", type: MobileNavbarComponent, selector: "lpx-mobile-navbar" }, { kind: "component", type: MnUserProfileComponent, selector: "lpx-mn-user-profile" }, { kind: "component", type: MnLanguageSelectionComponent, selector: "lpx-mn-language-selection" }, { kind: "component", type: i1.FooterComponent, selector: "lpx-footer" }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: SideMenuLayoutComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-layout', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\r\n  id=\"lpx-wrapper\"\r\n  *ngIf=\"layoutService.containerClass$ | async as containerClass\"\r\n  [ngClass]=\"containerClass\"\r\n>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"mobileNavbarPanel?.template || defaultMobileNavbar\"\r\n  >\r\n  </ng-container>\r\n  <ng-template #defaultMobileNavbar>\r\n    <lpx-mobile-navbar *lpxResponsive=\"'all md-none'\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          mobileUserProfilePanelDirective?.template || defaultMobileUserProfile\r\n        \"\r\n      >\r\n      </ng-container>\r\n      <ng-template #defaultMobileUserProfile>\r\n        <lpx-mn-user-profile class=\"d-block\"></lpx-mn-user-profile>\r\n      </ng-template>\r\n\r\n      <ng-container\r\n        *ngTemplateOutlet=\"\r\n          mobileLanguageSelectionDirective?.template ||\r\n          defaultMobilLanguageSelection\r\n        \"\r\n      >\r\n      </ng-container>\r\n      <ng-template #defaultMobilLanguageSelection>\r\n        <lpx-mn-language-selection class=\"d-block\"></lpx-mn-language-selection>\r\n      </ng-template>\r\n    </lpx-mobile-navbar>\r\n  </ng-template>\r\n\r\n  <div class=\"lpx-sidebar-container\" *lpxResponsive=\"'md'\">\r\n    <div class=\"lpx-sidebar\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"navbarPanel?.template || defaultNavbar\"\r\n      ></ng-container>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"lpx-content-container\">\r\n    <div class=\"lpx-topbar-container\">\r\n      <div class=\"lpx-topbar\">\r\n        <div class=\"lpx-breadcrumb-container\">\r\n          <ng-container *lpxResponsive=\"'md'\">\r\n            <ng-container\r\n              *ngTemplateOutlet=\"breadcrumbPanel?.template || defaultBreadcrumb\"\r\n            ></ng-container>\r\n          </ng-container>\r\n        </div>\r\n        <div class=\"lpx-topbar-content\" *lpxResponsive=\"'md'\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"\r\n              topbarContentPanelDirective?.template || defaultTopbarContent\r\n            \"\r\n          ></ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"lpx-content\">\r\n      <ng-content></ng-content>\r\n      <ng-container\r\n        *ngTemplateOutlet=\"footerPanelDirective?.template || defaultFooter\"\r\n      ></ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #defaultNavbar>\r\n  <lpx-navbar></lpx-navbar>\r\n</ng-template>\r\n<ng-template #defaultBreadcrumb>\r\n  <lpx-breadcrumb></lpx-breadcrumb>\r\n</ng-template>\r\n\r\n<ng-template #defaultTopbarContent>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"\r\n      userProfilePanelDirective?.template || defaultUserProfile\r\n    \"\r\n  >\r\n  </ng-container>\r\n  <ng-container\r\n    *ngTemplateOutlet=\"\r\n      languageSelectionPanelDirective?.template || defaultLanguageSelection\r\n    \"\r\n  ></ng-container>\r\n</ng-template>\r\n\r\n<ng-template #defaultUserProfile>\r\n  <lpx-user-profile></lpx-user-profile>\r\n</ng-template>\r\n\r\n<ng-template #defaultLanguageSelection>\r\n  <lpx-language-selection></lpx-language-selection>\r\n</ng-template>\r\n\r\n<ng-template #defaultFooter>\r\n  <lpx-footer></lpx-footer>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.LayoutService }]; }, propDecorators: { navbarPanel: [{
                type: ContentChild,
                args: [NavbarPanelDirective]
            }], mobileNavbarPanel: [{
                type: ContentChild,
                args: [MobileNavbarPanelDirective]
            }], breadcrumbPanel: [{
                type: ContentChild,
                args: [BreadcrumbPanelDirective]
            }], settingsPanel: [{
                type: ContentChild,
                args: [SettingsPanelDirective]
            }], languageSelectionPanelDirective: [{
                type: ContentChild,
                args: [LanguageSelectionPanelDirective]
            }], topbarContentPanelDirective: [{
                type: ContentChild,
                args: [TopbarContentPanelDirective]
            }], userProfilePanelDirective: [{
                type: ContentChild,
                args: [UserProfilePanelDirective]
            }], footerPanelDirective: [{
                type: ContentChild,
                args: [FooterPanelDirective]
            }], mobileUserProfilePanelDirective: [{
                type: ContentChild,
                args: [MobileUserProfilePanelDirective]
            }], mobileLanguageSelectionDirective: [{
                type: ContentChild,
                args: [MobileLanguageSelectionDirective]
            }] } });

const LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN = new InjectionToken('LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN');

const layoutBundleName = 'layout-bundle';
const getSideMenuLayoutStylesProvider = (styleFactory) => [
    {
        provide: LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN,
        useFactory: () => {
            return [
                {
                    bundleName: layoutBundleName,
                },
            ];
        },
    },
    {
        provide: APP_INITIALIZER,
        deps: [LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN],
        useValue: () => null,
        multi: true,
    },
    {
        provide: LPX_LAYOUT_STYLE_FINAL,
        deps: [LPX_SIDE_MENU_LAYOUT_STYLE_TOKEN],
        useFactory: createStyleFactory(styleFactory),
    },
];

class MnUserProfileModule {
}
MnUserProfileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MnUserProfileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileModule, declarations: [MnUserProfileComponent], imports: [CommonModule, LpxAvatarModule, RouterModule, LpxTranslateModule], exports: [MnUserProfileComponent] });
MnUserProfileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileModule, imports: [CommonModule, LpxAvatarModule, RouterModule, LpxTranslateModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MnUserProfileComponent],
                    imports: [CommonModule, LpxAvatarModule, RouterModule, LpxTranslateModule],
                    exports: [MnUserProfileComponent],
                }]
        }] });

class MnLanguageSelectionModule {
}
MnLanguageSelectionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnLanguageSelectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MnLanguageSelectionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: MnLanguageSelectionModule, declarations: [MnLanguageSelectionComponent], imports: [CommonModule, LpxIconModule], exports: [MnLanguageSelectionComponent] });
MnLanguageSelectionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnLanguageSelectionModule, imports: [CommonModule, LpxIconModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnLanguageSelectionModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MnLanguageSelectionComponent],
                    imports: [CommonModule, LpxIconModule],
                    exports: [MnLanguageSelectionComponent],
                }]
        }] });

const declarationsWithExports = [
    SideMenuLayoutComponent,
    SettingsPanelDirective,
    LanguageSelectionPanelDirective,
    TopbarContentPanelDirective,
    UserProfilePanelDirective,
    MobileUserProfilePanelDirective,
    MobileLanguageSelectionDirective,
];
class LpxSideMenuLayoutModule {
    static forRoot(options) {
        return {
            ngModule: LpxSideMenuLayoutModule,
            providers: [getSideMenuLayoutStylesProvider(options?.styleFactory)],
        };
    }
}
LpxSideMenuLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxSideMenuLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LpxSideMenuLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: LpxSideMenuLayoutModule, declarations: [SideMenuLayoutComponent,
        SettingsPanelDirective,
        LanguageSelectionPanelDirective,
        TopbarContentPanelDirective,
        UserProfilePanelDirective,
        MobileUserProfilePanelDirective,
        MobileLanguageSelectionDirective], imports: [CommonModule,
        LpxNavbarModule,
        LpxBreadcrumbModule,
        LpxResponsiveModule,
        UserProfileModule,
        LanguageSelectionModule,
        LpxMobileNavbarModule,
        MnUserProfileModule,
        MnLanguageSelectionModule,
        LpxFooterModule,
        PanelsModule], exports: [SideMenuLayoutComponent,
        SettingsPanelDirective,
        LanguageSelectionPanelDirective,
        TopbarContentPanelDirective,
        UserProfilePanelDirective,
        MobileUserProfilePanelDirective,
        MobileLanguageSelectionDirective] });
LpxSideMenuLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxSideMenuLayoutModule, imports: [CommonModule,
        LpxNavbarModule,
        LpxBreadcrumbModule,
        LpxResponsiveModule,
        UserProfileModule,
        LanguageSelectionModule,
        LpxMobileNavbarModule,
        MnUserProfileModule,
        MnLanguageSelectionModule,
        LpxFooterModule,
        PanelsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LpxSideMenuLayoutModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...declarationsWithExports],
                    imports: [
                        CommonModule,
                        LpxNavbarModule,
                        LpxBreadcrumbModule,
                        LpxResponsiveModule,
                        UserProfileModule,
                        LanguageSelectionModule,
                        LpxMobileNavbarModule,
                        MnUserProfileModule,
                        MnLanguageSelectionModule,
                        LpxFooterModule,
                        PanelsModule,
                    ],
                    exports: [...declarationsWithExports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LanguageSelectionPanelDirective, LpxMobileNavbarModule, LpxSideMenuLayoutModule, MnLanguageSelectionComponent, MnLanguageSelectionModule, MnUserProfileComponent, MnUserProfileModule, MobileLanguageSelectionDirective, MobileNavbarComponent, MobileUserProfilePanelDirective, SettingsPanelDirective, SideMenuLayoutComponent, TopbarContentPanelDirective, UserProfilePanelDirective };
//# sourceMappingURL=volo-ngx-lepton-x.lite-layouts.mjs.map
