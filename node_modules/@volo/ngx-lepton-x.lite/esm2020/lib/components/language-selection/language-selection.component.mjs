import { Component, ViewEncapsulation, Inject } from '@angular/core';
import { LanguageService } from '@volo/ngx-lepton-x.core';
import { OBSERVE, OBSERVE_PROVIDER } from 'ng-observe';
import * as i0 from "@angular/core";
import * as i1 from "@volo/ngx-lepton-x.core";
import * as i2 from "@angular/common";
import * as i3 from "@ng-bootstrap/ng-bootstrap";
export class LanguageSelectionComponent {
    constructor(service, observe) {
        this.service = service;
        this.observe = observe;
        this.availableLanguages = this.observe(this.service.languages$);
        this.selectedLanguage = this.observe(this.service.selectedLanguage$);
    }
    get langs() {
        return this.availableLanguages.value;
    }
    onLanguageSelection(lang) {
        this.service.setSelectedLanguage(lang);
    }
}
LanguageSelectionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionComponent, deps: [{ token: i1.LanguageService }, { token: OBSERVE }], target: i0.ɵɵFactoryTarget.Component });
LanguageSelectionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: LanguageSelectionComponent, selector: "lpx-language-selection", providers: [OBSERVE_PROVIDER], ngImport: i0, template: "<div ngbDropdown class=\"lpx-language-selection\">\r\n  <div ngbDropdownToggle role=\"button\">\r\n    <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n    {{ selectedLanguage.value?.displayName }}\r\n  </div>\r\n  <div ngbDropdownMenu>\r\n    <button ngbDropdownItem (click)=\"onLanguageSelection(lang)\" *ngFor=\"let lang of langs\">\r\n      {{ lang.displayName }}\r\n    </button>\r\n  </div>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { kind: "directive", type: i3.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { kind: "directive", type: i3.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { kind: "directive", type: i3.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { kind: "component", type: i1.IconComponent, selector: "lpx-icon", inputs: ["iconClass"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: LanguageSelectionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-language-selection', encapsulation: ViewEncapsulation.None, providers: [OBSERVE_PROVIDER], template: "<div ngbDropdown class=\"lpx-language-selection\">\r\n  <div ngbDropdownToggle role=\"button\">\r\n    <lpx-icon iconClass=\"bi bi-globe\"></lpx-icon>\r\n    {{ selectedLanguage.value?.displayName }}\r\n  </div>\r\n  <div ngbDropdownMenu>\r\n    <button ngbDropdownItem (click)=\"onLanguageSelection(lang)\" *ngFor=\"let lang of langs\">\r\n      {{ lang.displayName }}\r\n    </button>\r\n  </div>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.LanguageService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OBSERVE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Utc2VsZWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtbGl0ZS9zcmMvbGliL2NvbXBvbmVudHMvbGFuZ3VhZ2Utc2VsZWN0aW9uL2xhbmd1YWdlLXNlbGVjdGlvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2xlcHRvbi14LWxpdGUvc3JjL2xpYi9jb21wb25lbnRzL2xhbmd1YWdlLXNlbGVjdGlvbi9sYW5ndWFnZS1zZWxlY3Rpb24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBZSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQWEsTUFBTSxZQUFZLENBQUM7Ozs7O0FBU2xFLE1BQU0sT0FBTywwQkFBMEI7SUFRckMsWUFDVSxPQUF3QixFQUNQLE9BQWtCO1FBRG5DLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ1AsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQVQ3Qyx1QkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0QscUJBQWdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFTN0QsQ0FBQztJQVBKLElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBT0QsbUJBQW1CLENBQUMsSUFBaUI7UUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDOzt1SEFmVSwwQkFBMEIsaURBVTNCLE9BQU87MkdBVk4sMEJBQTBCLGlEQUYxQixDQUFDLGdCQUFnQixDQUFDLDBCQ1QvQiw4WkFXQTsyRkRBYSwwQkFBMEI7a0JBUHRDLFNBQVM7K0JBQ0Usd0JBQXdCLGlCQUduQixpQkFBaUIsQ0FBQyxJQUFJLGFBQzFCLENBQUMsZ0JBQWdCLENBQUM7OzBCQVkxQixNQUFNOzJCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlLCBMcHhMYW5ndWFnZSB9IGZyb20gJ0B2b2xvL25neC1sZXB0b24teC5jb3JlJztcclxuaW1wb3J0IHsgT0JTRVJWRSwgT0JTRVJWRV9QUk9WSURFUiwgT2JzZXJ2ZUZuIH0gZnJvbSAnbmctb2JzZXJ2ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xweC1sYW5ndWFnZS1zZWxlY3Rpb24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9sYW5ndWFnZS1zZWxlY3Rpb24uY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlczogW10sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICBwcm92aWRlcnM6IFtPQlNFUlZFX1BST1ZJREVSXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIExhbmd1YWdlU2VsZWN0aW9uQ29tcG9uZW50IHtcclxuICBhdmFpbGFibGVMYW5ndWFnZXMgPSB0aGlzLm9ic2VydmUodGhpcy5zZXJ2aWNlLmxhbmd1YWdlcyQpO1xyXG4gIHNlbGVjdGVkTGFuZ3VhZ2UgPSB0aGlzLm9ic2VydmUodGhpcy5zZXJ2aWNlLnNlbGVjdGVkTGFuZ3VhZ2UkKTtcclxuXHJcbiAgZ2V0IGxhbmdzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlTGFuZ3VhZ2VzLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHNlcnZpY2U6IExhbmd1YWdlU2VydmljZSxcclxuICAgIEBJbmplY3QoT0JTRVJWRSkgcHJpdmF0ZSBvYnNlcnZlOiBPYnNlcnZlRm5cclxuICApIHt9XHJcblxyXG4gIG9uTGFuZ3VhZ2VTZWxlY3Rpb24obGFuZzogTHB4TGFuZ3VhZ2UpIHtcclxuICAgIHRoaXMuc2VydmljZS5zZXRTZWxlY3RlZExhbmd1YWdlKGxhbmcpO1xyXG4gIH1cclxufVxyXG4iLCI8ZGl2IG5nYkRyb3Bkb3duIGNsYXNzPVwibHB4LWxhbmd1YWdlLXNlbGVjdGlvblwiPlxyXG4gIDxkaXYgbmdiRHJvcGRvd25Ub2dnbGUgcm9sZT1cImJ1dHRvblwiPlxyXG4gICAgPGxweC1pY29uIGljb25DbGFzcz1cImJpIGJpLWdsb2JlXCI+PC9scHgtaWNvbj5cclxuICAgIHt7IHNlbGVjdGVkTGFuZ3VhZ2UudmFsdWU/LmRpc3BsYXlOYW1lIH19XHJcbiAgPC9kaXY+XHJcbiAgPGRpdiBuZ2JEcm9wZG93bk1lbnU+XHJcbiAgICA8YnV0dG9uIG5nYkRyb3Bkb3duSXRlbSAoY2xpY2spPVwib25MYW5ndWFnZVNlbGVjdGlvbihsYW5nKVwiICpuZ0Zvcj1cImxldCBsYW5nIG9mIGxhbmdzXCI+XHJcbiAgICAgIHt7IGxhbmcuZGlzcGxheU5hbWUgfX1cclxuICAgIDwvYnV0dG9uPlxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuIl19