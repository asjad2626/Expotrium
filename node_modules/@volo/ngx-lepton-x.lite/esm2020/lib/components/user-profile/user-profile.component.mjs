import { Component, Inject, Injector, ViewEncapsulation } from '@angular/core';
import { UserProfileService } from '@volo/ngx-lepton-x.core';
import { OBSERVE, OBSERVE_PROVIDER } from 'ng-observe';
import * as i0 from "@angular/core";
import * as i1 from "@volo/ngx-lepton-x.core";
import * as i2 from "@angular/common";
import * as i3 from "@ng-bootstrap/ng-bootstrap";
import * as i4 from "@angular/router";
export class UserProfileComponent {
    constructor(service, observe, injector) {
        this.service = service;
        this.observe = observe;
        this.injector = injector;
        this.user = this.observe(this.service.user$);
    }
    get userProfile() {
        return this.user.value;
    }
    onActionClick(item) {
        item.action?.();
    }
}
UserProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfileComponent, deps: [{ token: i1.UserProfileService }, { token: OBSERVE }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
UserProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: UserProfileComponent, selector: "lpx-user-profile", providers: [OBSERVE_PROVIDER], ngImport: i0, template: "<div ngbDropdown *ngIf=\"userProfile.userName\">\r\n  <div class=\"lpx-user-profile\" ngbDropdownToggle role=\"button\">\r\n    <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n    <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n  </div>\r\n  <ng-container *ngIf=\"userProfile.userActionGroups\">\r\n    <div ngbDropdownMenu>\r\n      <ng-container\r\n        *ngFor=\"\r\n          let actionGroup of userProfile.userActionGroups;\r\n          let last = last\r\n        \"\r\n      >\r\n        <ng-container *ngFor=\"let action of actionGroup\">\r\n          <ng-container *ngIf=\"action.component\">\r\n            <ng-container\r\n              *ngComponentOutlet=\"action.component; injector: injector\"\r\n            ></ng-container>\r\n          </ng-container>\r\n          <a\r\n            ngbDropdownItem\r\n            *ngIf=\"!action.component\"\r\n            (click)=\"onActionClick(action)\"\r\n            [routerLink]=\"action.link\"\r\n            >{{ action.text || '' | lpxTranslate | async }}</a\r\n          >\r\n        </ng-container>\r\n        <div class=\"dropdown-divider\" *ngIf=\"!last\"></div>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: i2.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.AvatarComponent, selector: "lpx-avatar", inputs: ["avatar"] }, { kind: "directive", type: i3.NgbDropdown, selector: "[ngbDropdown]", inputs: ["autoClose", "dropdownClass", "open", "placement", "container", "display"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { kind: "directive", type: i3.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { kind: "directive", type: i3.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { kind: "directive", type: i3.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { kind: "directive", type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "lpxTranslate" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: UserProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-user-profile', encapsulation: ViewEncapsulation.None, providers: [OBSERVE_PROVIDER], template: "<div ngbDropdown *ngIf=\"userProfile.userName\">\r\n  <div class=\"lpx-user-profile\" ngbDropdownToggle role=\"button\">\r\n    <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n    <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n  </div>\r\n  <ng-container *ngIf=\"userProfile.userActionGroups\">\r\n    <div ngbDropdownMenu>\r\n      <ng-container\r\n        *ngFor=\"\r\n          let actionGroup of userProfile.userActionGroups;\r\n          let last = last\r\n        \"\r\n      >\r\n        <ng-container *ngFor=\"let action of actionGroup\">\r\n          <ng-container *ngIf=\"action.component\">\r\n            <ng-container\r\n              *ngComponentOutlet=\"action.component; injector: injector\"\r\n            ></ng-container>\r\n          </ng-container>\r\n          <a\r\n            ngbDropdownItem\r\n            *ngIf=\"!action.component\"\r\n            (click)=\"onActionClick(action)\"\r\n            [routerLink]=\"action.link\"\r\n            >{{ action.text || '' | lpxTranslate | async }}</a\r\n          >\r\n        </ng-container>\r\n        <div class=\"dropdown-divider\" *ngIf=\"!last\"></div>\r\n      </ng-container>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserProfileService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OBSERVE]
                }] }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcm9maWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtbGl0ZS9zcmMvbGliL2NvbXBvbmVudHMvdXNlci1wcm9maWxlL3VzZXItcHJvZmlsZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2xlcHRvbi14LWxpdGUvc3JjL2xpYi9jb21wb25lbnRzL3VzZXItcHJvZmlsZS91c2VyLXByb2ZpbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBaUIsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFhLE1BQU0sWUFBWSxDQUFDOzs7Ozs7QUFRbEUsTUFBTSxPQUFPLG9CQUFvQjtJQU8vQixZQUNTLE9BQTJCLEVBQ1QsT0FBa0IsRUFDM0IsUUFBa0I7UUFGM0IsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFDVCxZQUFPLEdBQVAsT0FBTyxDQUFXO1FBQzNCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFUcEMsU0FBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQVVyQyxDQUFDO0lBUkosSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBUUQsYUFBYSxDQUFDLElBQW1CO1FBQy9CLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0lBQ2xCLENBQUM7O2lIQWZVLG9CQUFvQixvREFTckIsT0FBTztxR0FUTixvQkFBb0IsMkNBRnBCLENBQUMsZ0JBQWdCLENBQUMsMEJDUi9CLG10Q0FnQ0E7MkZEdEJhLG9CQUFvQjtrQkFOaEMsU0FBUzsrQkFDRSxrQkFBa0IsaUJBRWIsaUJBQWlCLENBQUMsSUFBSSxhQUMxQixDQUFDLGdCQUFnQixDQUFDOzswQkFXMUIsTUFBTTsyQkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3QsIEluamVjdG9yLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMcHhOYXZiYXJJdGVtLCBVc2VyUHJvZmlsZVNlcnZpY2UgfSBmcm9tICdAdm9sby9uZ3gtbGVwdG9uLXguY29yZSc7XHJcbmltcG9ydCB7IE9CU0VSVkUsIE9CU0VSVkVfUFJPVklERVIsIE9ic2VydmVGbiB9IGZyb20gJ25nLW9ic2VydmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdscHgtdXNlci1wcm9maWxlJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdXNlci1wcm9maWxlLmNvbXBvbmVudC5odG1sJyxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIHByb3ZpZGVyczogW09CU0VSVkVfUFJPVklERVJdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVXNlclByb2ZpbGVDb21wb25lbnQge1xyXG4gIHVzZXIgPSB0aGlzLm9ic2VydmUodGhpcy5zZXJ2aWNlLnVzZXIkKTtcclxuXHJcbiAgZ2V0IHVzZXJQcm9maWxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlci52YWx1ZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHNlcnZpY2U6IFVzZXJQcm9maWxlU2VydmljZSxcclxuICAgIEBJbmplY3QoT0JTRVJWRSkgcHJpdmF0ZSBvYnNlcnZlOiBPYnNlcnZlRm4sXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgKSB7fVxyXG5cclxuICBvbkFjdGlvbkNsaWNrKGl0ZW06IExweE5hdmJhckl0ZW0pIHtcclxuICAgIGl0ZW0uYWN0aW9uPy4oKTtcclxuICB9XHJcbn1cclxuIiwiPGRpdiBuZ2JEcm9wZG93biAqbmdJZj1cInVzZXJQcm9maWxlLnVzZXJOYW1lXCI+XHJcbiAgPGRpdiBjbGFzcz1cImxweC11c2VyLXByb2ZpbGVcIiBuZ2JEcm9wZG93blRvZ2dsZSByb2xlPVwiYnV0dG9uXCI+XHJcbiAgICA8bHB4LWF2YXRhciBbYXZhdGFyXT1cInVzZXJQcm9maWxlLmF2YXRhclwiPjwvbHB4LWF2YXRhcj5cclxuICAgIDxzcGFuIGNsYXNzPVwidXNlci1mdWxsLW5hbWVcIj57eyB1c2VyUHJvZmlsZS5mdWxsTmFtZSB9fTwvc3Bhbj5cclxuICA8L2Rpdj5cclxuICA8bmctY29udGFpbmVyICpuZ0lmPVwidXNlclByb2ZpbGUudXNlckFjdGlvbkdyb3Vwc1wiPlxyXG4gICAgPGRpdiBuZ2JEcm9wZG93bk1lbnU+XHJcbiAgICAgIDxuZy1jb250YWluZXJcclxuICAgICAgICAqbmdGb3I9XCJcclxuICAgICAgICAgIGxldCBhY3Rpb25Hcm91cCBvZiB1c2VyUHJvZmlsZS51c2VyQWN0aW9uR3JvdXBzO1xyXG4gICAgICAgICAgbGV0IGxhc3QgPSBsYXN0XHJcbiAgICAgICAgXCJcclxuICAgICAgPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGFjdGlvbiBvZiBhY3Rpb25Hcm91cFwiPlxyXG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImFjdGlvbi5jb21wb25lbnRcIj5cclxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICpuZ0NvbXBvbmVudE91dGxldD1cImFjdGlvbi5jb21wb25lbnQ7IGluamVjdG9yOiBpbmplY3RvclwiXHJcbiAgICAgICAgICAgID48L25nLWNvbnRhaW5lcj5cclxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgPGFcclxuICAgICAgICAgICAgbmdiRHJvcGRvd25JdGVtXHJcbiAgICAgICAgICAgICpuZ0lmPVwiIWFjdGlvbi5jb21wb25lbnRcIlxyXG4gICAgICAgICAgICAoY2xpY2spPVwib25BY3Rpb25DbGljayhhY3Rpb24pXCJcclxuICAgICAgICAgICAgW3JvdXRlckxpbmtdPVwiYWN0aW9uLmxpbmtcIlxyXG4gICAgICAgICAgICA+e3sgYWN0aW9uLnRleHQgfHwgJycgfCBscHhUcmFuc2xhdGUgfCBhc3luYyB9fTwvYVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1kaXZpZGVyXCIgKm5nSWY9XCIhbGFzdFwiPjwvZGl2PlxyXG4gICAgICA8L25nLWNvbnRhaW5lcj5cclxuICAgIDwvZGl2PlxyXG4gIDwvbmctY29udGFpbmVyPlxyXG48L2Rpdj5cclxuIl19