import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { UserProfileService } from '@volo/ngx-lepton-x.core';
import { OBSERVE, OBSERVE_PROVIDER } from 'ng-observe';
import * as i0 from "@angular/core";
import * as i1 from "@volo/ngx-lepton-x.core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/router";
export class MnUserProfileComponent {
    constructor(service, observe) {
        this.service = service;
        this.observe = observe;
        this.user = this.observe(this.service.user$);
        this.menuHidden = true;
    }
    get userProfile() {
        return this.user.value;
    }
    toggleMenu() {
        this.menuHidden = !this.menuHidden;
    }
    onActionClick(item) {
        item.action?.();
    }
}
MnUserProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileComponent, deps: [{ token: i1.UserProfileService }, { token: OBSERVE }], target: i0.ɵɵFactoryTarget.Component });
MnUserProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.0", type: MnUserProfileComponent, selector: "lpx-mn-user-profile", providers: [OBSERVE_PROVIDER], ngImport: i0, template: "<div class=\"lpx-user-profile btn-toggle\" role=\"button\" (click)=\"toggleMenu()\">\r\n  <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n  <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n</div>\r\n<ng-container *ngIf=\"userProfile.userActionGroups\">\r\n  <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n    <ng-container\r\n      *ngFor=\"let actionGroup of userProfile.userActionGroups; let last = last\"\r\n    >\r\n      <ng-container *ngFor=\"let action of actionGroup\">\r\n        <a\r\n          class=\"action\"\r\n          role=\"link\"\r\n          (click)=\"onActionClick(action)\"\r\n          [routerLink]=\"action.link\"\r\n        >\r\n          {{ action?.text || '' | lpxTranslate | async }}\r\n        </a>\r\n      </ng-container>\r\n\r\n      <div class=\"divider\" *ngIf=\"!last\"></div>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.AvatarComponent, selector: "lpx-avatar", inputs: ["avatar"] }, { kind: "directive", type: i3.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "lpxTranslate" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: MnUserProfileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lpx-mn-user-profile', encapsulation: ViewEncapsulation.None, providers: [OBSERVE_PROVIDER], template: "<div class=\"lpx-user-profile btn-toggle\" role=\"button\" (click)=\"toggleMenu()\">\r\n  <lpx-avatar [avatar]=\"userProfile.avatar\"></lpx-avatar>\r\n  <span class=\"user-full-name\">{{ userProfile.fullName }}</span>\r\n</div>\r\n<ng-container *ngIf=\"userProfile.userActionGroups\">\r\n  <div class=\"action-group-menu\" [class.d-none]=\"menuHidden\">\r\n    <ng-container\r\n      *ngFor=\"let actionGroup of userProfile.userActionGroups; let last = last\"\r\n    >\r\n      <ng-container *ngFor=\"let action of actionGroup\">\r\n        <a\r\n          class=\"action\"\r\n          role=\"link\"\r\n          (click)=\"onActionClick(action)\"\r\n          [routerLink]=\"action.link\"\r\n        >\r\n          {{ action?.text || '' | lpxTranslate | async }}\r\n        </a>\r\n      </ng-container>\r\n\r\n      <div class=\"divider\" *ngIf=\"!last\"></div>\r\n    </ng-container>\r\n  </div>\r\n</ng-container>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserProfileService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OBSERVE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW4tdXNlci1wcm9maWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtbGl0ZS9sYXlvdXRzL3NyYy9saWIvY29tcG9uZW50cy9tbi11c2VyLXByb2ZpbGUvbW4tdXNlci1wcm9maWxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbGVwdG9uLXgtbGl0ZS9sYXlvdXRzL3NyYy9saWIvY29tcG9uZW50cy9tbi11c2VyLXByb2ZpbGUvbW4tdXNlci1wcm9maWxlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBaUIsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFhLE1BQU0sWUFBWSxDQUFDOzs7OztBQVFsRSxNQUFNLE9BQU8sc0JBQXNCO0lBU2pDLFlBQ1MsT0FBMkIsRUFDVCxPQUFrQjtRQURwQyxZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUNULFlBQU8sR0FBUCxPQUFPLENBQVc7UUFWN0MsU0FBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQU14QyxlQUFVLEdBQUcsSUFBSSxDQUFDO0lBS2YsQ0FBQztJQVRKLElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQVNELFVBQVU7UUFDUixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQW1CO1FBQy9CLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO0lBQ2xCLENBQUM7O21IQXBCVSxzQkFBc0Isb0RBV3ZCLE9BQU87dUdBWE4sc0JBQXNCLDhDQUZ0QixDQUFDLGdCQUFnQixDQUFDLDBCQ1IvQiwyNUJBd0JBOzJGRGRhLHNCQUFzQjtrQkFObEMsU0FBUzsrQkFDRSxxQkFBcUIsaUJBRWhCLGlCQUFpQixDQUFDLElBQUksYUFDMUIsQ0FBQyxnQkFBZ0IsQ0FBQzs7MEJBYTFCLE1BQU07MkJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMcHhOYXZiYXJJdGVtLCBVc2VyUHJvZmlsZVNlcnZpY2UgfSBmcm9tICdAdm9sby9uZ3gtbGVwdG9uLXguY29yZSc7XHJcbmltcG9ydCB7IE9CU0VSVkUsIE9CU0VSVkVfUFJPVklERVIsIE9ic2VydmVGbiB9IGZyb20gJ25nLW9ic2VydmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdscHgtbW4tdXNlci1wcm9maWxlJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbW4tdXNlci1wcm9maWxlLmNvbXBvbmVudC5odG1sJyxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIHByb3ZpZGVyczogW09CU0VSVkVfUFJPVklERVJdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW5Vc2VyUHJvZmlsZUNvbXBvbmVudCB7XHJcbiAgdXNlciA9IHRoaXMub2JzZXJ2ZSh0aGlzLnNlcnZpY2UudXNlciQpO1xyXG5cclxuICBnZXQgdXNlclByb2ZpbGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgbWVudUhpZGRlbiA9IHRydWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHNlcnZpY2U6IFVzZXJQcm9maWxlU2VydmljZSxcclxuICAgIEBJbmplY3QoT0JTRVJWRSkgcHJpdmF0ZSBvYnNlcnZlOiBPYnNlcnZlRm5cclxuICApIHt9XHJcblxyXG4gIHRvZ2dsZU1lbnUoKSB7XHJcbiAgICB0aGlzLm1lbnVIaWRkZW4gPSAhdGhpcy5tZW51SGlkZGVuO1xyXG4gIH1cclxuXHJcbiAgb25BY3Rpb25DbGljayhpdGVtOiBMcHhOYXZiYXJJdGVtKSB7XHJcbiAgICBpdGVtLmFjdGlvbj8uKCk7XHJcbiAgfVxyXG59XHJcbiIsIjxkaXYgY2xhc3M9XCJscHgtdXNlci1wcm9maWxlIGJ0bi10b2dnbGVcIiByb2xlPVwiYnV0dG9uXCIgKGNsaWNrKT1cInRvZ2dsZU1lbnUoKVwiPlxyXG4gIDxscHgtYXZhdGFyIFthdmF0YXJdPVwidXNlclByb2ZpbGUuYXZhdGFyXCI+PC9scHgtYXZhdGFyPlxyXG4gIDxzcGFuIGNsYXNzPVwidXNlci1mdWxsLW5hbWVcIj57eyB1c2VyUHJvZmlsZS5mdWxsTmFtZSB9fTwvc3Bhbj5cclxuPC9kaXY+XHJcbjxuZy1jb250YWluZXIgKm5nSWY9XCJ1c2VyUHJvZmlsZS51c2VyQWN0aW9uR3JvdXBzXCI+XHJcbiAgPGRpdiBjbGFzcz1cImFjdGlvbi1ncm91cC1tZW51XCIgW2NsYXNzLmQtbm9uZV09XCJtZW51SGlkZGVuXCI+XHJcbiAgICA8bmctY29udGFpbmVyXHJcbiAgICAgICpuZ0Zvcj1cImxldCBhY3Rpb25Hcm91cCBvZiB1c2VyUHJvZmlsZS51c2VyQWN0aW9uR3JvdXBzOyBsZXQgbGFzdCA9IGxhc3RcIlxyXG4gICAgPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBhY3Rpb24gb2YgYWN0aW9uR3JvdXBcIj5cclxuICAgICAgICA8YVxyXG4gICAgICAgICAgY2xhc3M9XCJhY3Rpb25cIlxyXG4gICAgICAgICAgcm9sZT1cImxpbmtcIlxyXG4gICAgICAgICAgKGNsaWNrKT1cIm9uQWN0aW9uQ2xpY2soYWN0aW9uKVwiXHJcbiAgICAgICAgICBbcm91dGVyTGlua109XCJhY3Rpb24ubGlua1wiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge3sgYWN0aW9uPy50ZXh0IHx8ICcnIHwgbHB4VHJhbnNsYXRlIHwgYXN5bmMgfX1cclxuICAgICAgICA8L2E+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG5cclxuICAgICAgPGRpdiBjbGFzcz1cImRpdmlkZXJcIiAqbmdJZj1cIiFsYXN0XCI+PC9kaXY+XHJcbiAgICA8L25nLWNvbnRhaW5lcj5cclxuICA8L2Rpdj5cclxuPC9uZy1jb250YWluZXI+XHJcbiJdfQ==