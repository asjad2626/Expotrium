import { ElementRef, Injector, OnDestroy, TemplateRef, Type } from '@angular/core';
import { UntypedFormGroup, FormGroupDirective, FormGroupName } from '@angular/forms';
import { Observable } from 'rxjs';
import { ValidationGroupDirective } from '../directives/validation-group.directive';
import { Validation } from '../models';
import * as i0 from "@angular/core";
export declare class AbstractValidationDirective implements OnDestroy {
    injector: Injector;
    _blueprints: Validation.Blueprints;
    _errorTemplate: TemplateRef<any> | Type<any>;
    _invalidClasses: string;
    _mapErrorsFn: Validation.MapErrorsFn;
    _skipValidation: boolean;
    _targetSelector: string;
    _validateOnSubmit: boolean;
    get group(): UntypedFormGroup;
    get parent(): Partial<ValidationGroupDirective>;
    get blueprints(): Validation.Blueprints;
    get errorTemplate(): TemplateRef<any> | Type<any>;
    get invalidClasses(): string;
    get mapErrorsFn(): Validation.MapErrorsFn;
    get skipValidation(): boolean;
    get targetSelector(): string;
    get validateOnSubmit(): boolean;
    config: Validation.Config;
    elRef: ElementRef;
    groupName: FormGroupName;
    groupRef: FormGroupDirective;
    parentRef: ValidationGroupDirective;
    constructor(injector: Injector);
    getStream(streamName: Validation.StreamName): Observable<UntypedFormGroup>;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractValidationDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AbstractValidationDirective, "abstractValidationDirective", never, { "_blueprints": "blueprints"; "_errorTemplate": "errorTemplate"; "_invalidClasses": "invalidClasses"; "_mapErrorsFn": "mapErrorsFn"; "_skipValidation": "skipValidation"; "_targetSelector": "targetSelector"; "_validateOnSubmit": "validateOnSubmit"; }, {}, never, never, false>;
}
