import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AbstractValidationDirective } from './abstracts/abstract-validation.directive';
import { ValidationErrorComponent } from './components/validation-error.component';
import { BLUEPRINTS } from './constants/blueprints';
import { ValidationContainerDirective } from './directives/validation-container.directive';
import { ValidationGroupDirective } from './directives/validation-group.directive';
import { ValidationStyleDirective } from './directives/validation-style.directive';
import { ValidationTargetDirective } from './directives/validation-target.directive';
import { ValidationDirective } from './directives/validation.directive';
import { VALIDATION_BLUEPRINTS } from './tokens/blueprints.token';
import { VALIDATION_ERROR_TEMPLATE } from './tokens/error-template.token';
import { VALIDATION_INVALID_CLASSES } from './tokens/invalid-classes.token';
import { VALIDATION_MAP_ERRORS_FN } from './tokens/map-errors-fn.token';
import { VALIDATION_TARGET_SELECTOR } from './tokens/target-selector.token';
import { VALIDATION_VALIDATE_ON_SUBMIT } from './tokens/validate-on-submit.token';
import { defaultMapErrorsFn } from './utils/mappers';
import * as i0 from "@angular/core";
export class NgxValidateCoreModule {
    static forRoot(config = {}) {
        return {
            ngModule: NgxValidateCoreModule,
            providers: [
                {
                    provide: VALIDATION_BLUEPRINTS,
                    useValue: config.blueprints || BLUEPRINTS,
                },
                {
                    provide: VALIDATION_ERROR_TEMPLATE,
                    useValue: config.errorTemplate || ValidationErrorComponent,
                },
                {
                    provide: VALIDATION_INVALID_CLASSES,
                    useValue: config.invalidClasses || 'is-invalid',
                },
                {
                    provide: VALIDATION_MAP_ERRORS_FN,
                    useValue: config.mapErrorsFn || defaultMapErrorsFn,
                },
                {
                    provide: VALIDATION_TARGET_SELECTOR,
                    useValue: config.targetSelector,
                },
                {
                    provide: VALIDATION_VALIDATE_ON_SUBMIT,
                    useValue: config.validateOnSubmit,
                },
            ],
        };
    }
}
NgxValidateCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: NgxValidateCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxValidateCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.7", ngImport: i0, type: NgxValidateCoreModule, declarations: [ValidationErrorComponent,
        AbstractValidationDirective,
        ValidationContainerDirective,
        ValidationGroupDirective,
        ValidationStyleDirective,
        ValidationTargetDirective,
        ValidationDirective], imports: [CommonModule, FormsModule, ReactiveFormsModule], exports: [ValidationContainerDirective,
        ValidationGroupDirective,
        ValidationStyleDirective,
        ValidationTargetDirective,
        ValidationDirective] });
NgxValidateCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: NgxValidateCoreModule, imports: [CommonModule, FormsModule, ReactiveFormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: NgxValidateCoreModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, ReactiveFormsModule],
                    exports: [
                        ValidationContainerDirective,
                        ValidationGroupDirective,
                        ValidationStyleDirective,
                        ValidationTargetDirective,
                        ValidationDirective,
                    ],
                    declarations: [
                        ValidationErrorComponent,
                        AbstractValidationDirective,
                        ValidationContainerDirective,
                        ValidationGroupDirective,
                        ValidationStyleDirective,
                        ValidationTargetDirective,
                        ValidationDirective,
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvY29yZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN4RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDM0YsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbkYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbkYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDckYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDMUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBcUJyRCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUF1QjtRQUM3QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHFCQUFxQjtvQkFDOUIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxVQUFVLElBQUksVUFBVTtpQkFDMUM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHlCQUF5QjtvQkFDbEMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxhQUFhLElBQUksd0JBQXdCO2lCQUMzRDtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsMEJBQTBCO29CQUNuQyxRQUFRLEVBQUUsTUFBTSxDQUFDLGNBQWMsSUFBSSxZQUFZO2lCQUNoRDtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsd0JBQXdCO29CQUNqQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFdBQVcsSUFBSSxrQkFBa0I7aUJBQ25EO2dCQUNEO29CQUNFLE9BQU8sRUFBRSwwQkFBMEI7b0JBQ25DLFFBQVEsRUFBRSxNQUFNLENBQUMsY0FBYztpQkFDaEM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLDZCQUE2QjtvQkFDdEMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0I7aUJBQ2xDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7a0hBL0JVLHFCQUFxQjttSEFBckIscUJBQXFCLGlCQVQ5Qix3QkFBd0I7UUFDeEIsMkJBQTJCO1FBQzNCLDRCQUE0QjtRQUM1Qix3QkFBd0I7UUFDeEIsd0JBQXdCO1FBQ3hCLHlCQUF5QjtRQUN6QixtQkFBbUIsYUFmWCxZQUFZLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixhQUV0RCw0QkFBNEI7UUFDNUIsd0JBQXdCO1FBQ3hCLHdCQUF3QjtRQUN4Qix5QkFBeUI7UUFDekIsbUJBQW1CO21IQVlWLHFCQUFxQixZQWxCdEIsWUFBWSxFQUFFLFdBQVcsRUFBRSxtQkFBbUI7MkZBa0I3QyxxQkFBcUI7a0JBbkJqQyxRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsbUJBQW1CLENBQUM7b0JBQ3pELE9BQU8sRUFBRTt3QkFDUCw0QkFBNEI7d0JBQzVCLHdCQUF3Qjt3QkFDeEIsd0JBQXdCO3dCQUN4Qix5QkFBeUI7d0JBQ3pCLG1CQUFtQjtxQkFDcEI7b0JBQ0QsWUFBWSxFQUFFO3dCQUNaLHdCQUF3Qjt3QkFDeEIsMkJBQTJCO3dCQUMzQiw0QkFBNEI7d0JBQzVCLHdCQUF3Qjt3QkFDeEIsd0JBQXdCO3dCQUN4Qix5QkFBeUI7d0JBQ3pCLG1CQUFtQjtxQkFDcEI7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQWJzdHJhY3RWYWxpZGF0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9hYnN0cmFjdHMvYWJzdHJhY3QtdmFsaWRhdGlvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3ZhbGlkYXRpb24tZXJyb3IuY29tcG9uZW50JztcbmltcG9ydCB7IEJMVUVQUklOVFMgfSBmcm9tICcuL2NvbnN0YW50cy9ibHVlcHJpbnRzJztcbmltcG9ydCB7IFZhbGlkYXRpb25Db250YWluZXJEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi1jb250YWluZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uU3R5bGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvdmFsaWRhdGlvbi1zdHlsZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblRhcmdldERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0aW9uLXRhcmdldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy92YWxpZGF0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSAnLi9tb2RlbHMvdmFsaWRhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBWQUxJREFUSU9OX0JMVUVQUklOVFMgfSBmcm9tICcuL3Rva2Vucy9ibHVlcHJpbnRzLnRva2VuJztcbmltcG9ydCB7IFZBTElEQVRJT05fRVJST1JfVEVNUExBVEUgfSBmcm9tICcuL3Rva2Vucy9lcnJvci10ZW1wbGF0ZS50b2tlbic7XG5pbXBvcnQgeyBWQUxJREFUSU9OX0lOVkFMSURfQ0xBU1NFUyB9IGZyb20gJy4vdG9rZW5zL2ludmFsaWQtY2xhc3Nlcy50b2tlbic7XG5pbXBvcnQgeyBWQUxJREFUSU9OX01BUF9FUlJPUlNfRk4gfSBmcm9tICcuL3Rva2Vucy9tYXAtZXJyb3JzLWZuLnRva2VuJztcbmltcG9ydCB7IFZBTElEQVRJT05fVEFSR0VUX1NFTEVDVE9SIH0gZnJvbSAnLi90b2tlbnMvdGFyZ2V0LXNlbGVjdG9yLnRva2VuJztcbmltcG9ydCB7IFZBTElEQVRJT05fVkFMSURBVEVfT05fU1VCTUlUIH0gZnJvbSAnLi90b2tlbnMvdmFsaWRhdGUtb24tc3VibWl0LnRva2VuJztcbmltcG9ydCB7IGRlZmF1bHRNYXBFcnJvcnNGbiB9IGZyb20gJy4vdXRpbHMvbWFwcGVycyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlXSxcbiAgZXhwb3J0czogW1xuICAgIFZhbGlkYXRpb25Db250YWluZXJEaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25TdHlsZURpcmVjdGl2ZSxcbiAgICBWYWxpZGF0aW9uVGFyZ2V0RGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25EaXJlY3RpdmUsXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFZhbGlkYXRpb25FcnJvckNvbXBvbmVudCxcbiAgICBBYnN0cmFjdFZhbGlkYXRpb25EaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvbkNvbnRhaW5lckRpcmVjdGl2ZSxcbiAgICBWYWxpZGF0aW9uR3JvdXBEaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvblN0eWxlRGlyZWN0aXZlLFxuICAgIFZhbGlkYXRpb25UYXJnZXREaXJlY3RpdmUsXG4gICAgVmFsaWRhdGlvbkRpcmVjdGl2ZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTmd4VmFsaWRhdGVDb3JlTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnID0ge30gYXMgVmFsaWRhdGlvbi5Db25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5neFZhbGlkYXRlQ29yZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4VmFsaWRhdGVDb3JlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX0JMVUVQUklOVFMsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZy5ibHVlcHJpbnRzIHx8IEJMVUVQUklOVFMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX0VSUk9SX1RFTVBMQVRFLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWcuZXJyb3JUZW1wbGF0ZSB8fCBWYWxpZGF0aW9uRXJyb3JDb21wb25lbnQsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX0lOVkFMSURfQ0xBU1NFUyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLmludmFsaWRDbGFzc2VzIHx8ICdpcy1pbnZhbGlkJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFZBTElEQVRJT05fTUFQX0VSUk9SU19GTixcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLm1hcEVycm9yc0ZuIHx8IGRlZmF1bHRNYXBFcnJvcnNGbixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFZBTElEQVRJT05fVEFSR0VUX1NFTEVDVE9SLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWcudGFyZ2V0U2VsZWN0b3IsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWQUxJREFUSU9OX1ZBTElEQVRFX09OX1NVQk1JVCxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnLnZhbGlkYXRlT25TdWJtaXQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==