import { Directive, ElementRef, Input, } from '@angular/core';
import { merge, NEVER } from 'rxjs';
import { BLUEPRINTS } from '../constants';
import { VALIDATION_BLUEPRINTS, VALIDATION_ERROR_TEMPLATE, VALIDATION_INVALID_CLASSES, VALIDATION_MAP_ERRORS_FN, VALIDATION_TARGET_SELECTOR, VALIDATION_VALIDATE_ON_SUBMIT, } from '../tokens';
import { evalPropTruthy } from '../utils';
import * as i0 from "@angular/core";
export class AbstractValidationDirective {
    constructor(injector) {
        this.injector = injector;
        this.config = {
            blueprints: injector.get(VALIDATION_BLUEPRINTS),
            errorTemplate: injector.get(VALIDATION_ERROR_TEMPLATE),
            invalidClasses: injector.get(VALIDATION_INVALID_CLASSES),
            mapErrorsFn: injector.get(VALIDATION_MAP_ERRORS_FN),
            targetSelector: injector.get(VALIDATION_TARGET_SELECTOR),
            validateOnSubmit: injector.get(VALIDATION_VALIDATE_ON_SUBMIT),
        };
        this.elRef = injector.get(ElementRef);
    }
    get group() {
        return ((this.groupRef || {}).form ||
            (this.groupName || {}).control);
    }
    get parent() {
        return this.parentRef || { getStream: () => null };
    }
    get blueprints() {
        return {
            ...BLUEPRINTS,
            ...(this._blueprints || this.parent.blueprints || this.config.blueprints || {}),
        };
    }
    get errorTemplate() {
        return this._errorTemplate || this.parent.errorTemplate || this.config.errorTemplate;
    }
    get invalidClasses() {
        return this._invalidClasses || this.parent.invalidClasses || this.config.invalidClasses;
    }
    get mapErrorsFn() {
        return this._mapErrorsFn || this.parent.mapErrorsFn || this.config.mapErrorsFn;
    }
    get skipValidation() {
        return (evalPropTruthy(this._skipValidation) ||
            this.parent.skipValidation ||
            this.config.skipValidation);
    }
    get targetSelector() {
        return this._targetSelector || this.parent.targetSelector || this.config.targetSelector;
    }
    get validateOnSubmit() {
        return (evalPropTruthy(this._validateOnSubmit) ||
            this.parent.validateOnSubmit ||
            this.config.validateOnSubmit);
    }
    getStream(streamName) {
        return merge(this[streamName + '$']
            ? this[streamName + '$'].asObservable()
            : NEVER, this.parent.getStream(streamName) || NEVER);
    }
    ngOnDestroy() { }
}
AbstractValidationDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: AbstractValidationDirective, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive });
AbstractValidationDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.7", type: AbstractValidationDirective, selector: "abstractValidationDirective", inputs: { _blueprints: ["blueprints", "_blueprints"], _errorTemplate: ["errorTemplate", "_errorTemplate"], _invalidClasses: ["invalidClasses", "_invalidClasses"], _mapErrorsFn: ["mapErrorsFn", "_mapErrorsFn"], _skipValidation: ["skipValidation", "_skipValidation"], _targetSelector: ["targetSelector", "_targetSelector"], _validateOnSubmit: ["validateOnSubmit", "_validateOnSubmit"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: AbstractValidationDirective, decorators: [{
            type: Directive,
            args: [{
                    /* tslint:disable-next-line */
                    selector: 'abstractValidationDirective',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; }, propDecorators: { _blueprints: [{
                type: Input,
                args: ['blueprints']
            }], _errorTemplate: [{
                type: Input,
                args: ['errorTemplate']
            }], _invalidClasses: [{
                type: Input,
                args: ['invalidClasses']
            }], _mapErrorsFn: [{
                type: Input,
                args: ['mapErrorsFn']
            }], _skipValidation: [{
                type: Input,
                args: ['skipValidation']
            }], _targetSelector: [{
                type: Input,
                args: ['targetSelector']
            }], _validateOnSubmit: [{
                type: Input,
                args: ['validateOnSubmit']
            }] } });
//# sourceMappingURL=data:application/json;base64,