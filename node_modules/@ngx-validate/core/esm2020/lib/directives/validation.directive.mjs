import { ComponentRef, Directive, Optional, Self, SkipSelf, TemplateRef, } from '@angular/core';
import { merge, Subscription } from 'rxjs';
import { filter, map, mapTo, tap } from 'rxjs/operators';
import { AbstractValidationDirective } from '../abstracts';
import { generateValidationError } from '../utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./validation-group.directive";
import * as i3 from "./validation-style.directive";
import * as i4 from "./validation-target.directive";
import * as i5 from "./validation-container.directive";
export class ValidationDirective extends AbstractValidationDirective {
    constructor(injector, cdRef, control, renderer, vcRef, parentRef, markRef, targetRef, containerRef, formGroupDirective) {
        super(injector);
        this.injector = injector;
        this.cdRef = cdRef;
        this.control = control;
        this.renderer = renderer;
        this.vcRef = vcRef;
        this.parentRef = parentRef;
        this.markRef = markRef;
        this.targetRef = targetRef;
        this.containerRef = containerRef;
        this.formGroupDirective = formGroupDirective;
        this.isSubmitted = false;
        this.subscriptions = new Subscription();
    }
    get validation$() {
        return merge(this.parent.getStream('status').pipe(mapTo(null)), this.parent.getStream('value').pipe(mapTo(null)), this.parent.getStream('submit'));
    }
    buildErrors(errors) {
        return Object.keys(errors || {}).map(key => generateValidationError(key, errors[key], this.blueprints[key]));
    }
    insertErrorClasses() {
        this.renderer.addClass(this.markElement, this.invalidClasses);
    }
    insertErrors(errors) {
        const template = this.errorTemplate;
        const targetRef = this.containerRef ? this.containerRef.targetRef : this.targetRef;
        const vcRef = targetRef ? targetRef.vcRef : this.vcRef;
        this.errorRef =
            template instanceof TemplateRef
                ? vcRef.createEmbeddedView(template, { $implicit: errors }, vcRef.length)
                : vcRef.createComponent(template, { index: vcRef.length, injector: this.injector });
        if (this.errorRef instanceof ComponentRef && this.errorRef.instance)
            this.errorRef.instance.validationErrors = errors;
    }
    removeErrorClasses() {
        this.renderer.removeClass(this.markElement, this.invalidClasses);
    }
    removeErrors() {
        if (this.errorRef) {
            this.errorRef.destroy();
            this.errorRef = null;
        }
    }
    setMarkElement() {
        this.markElement =
            (this.markRef
                ? this.markRef.elRef.nativeElement
                : this.targetSelector
                    ? this.elRef.nativeElement.closest(this.targetSelector)
                    : null) || this.elRef.nativeElement;
    }
    shouldValidate(errors) {
        return errors.length && this.control.dirty && (!this.validateOnSubmit || this.isSubmitted);
    }
    subscribeToValidation() {
        let cached;
        this.subscriptions.add(this.validation$
            .pipe(filter(() => !this.skipValidation), tap(form => {
            if (form && this.formGroupDirective.submitted) {
                this.control.control.markAsDirty();
                this.isSubmitted = true;
            }
        }), map(() => this.mapErrorsFn(this.buildErrors(this.control.errors), this.buildErrors((this.parentRef.group || {}).errors), this.control)))
            .subscribe(errors => {
            if (cached === JSON.stringify(errors))
                return;
            this.removeErrors();
            if (this.shouldValidate(errors)) {
                this.insertErrors(errors);
                if (!cached)
                    this.insertErrorClasses();
                cached = JSON.stringify(errors);
            }
            else {
                this.removeErrorClasses();
                cached = '';
            }
            this.cdRef.markForCheck();
        }));
    }
    ngAfterViewInit() {
        this.setMarkElement();
        this.subscribeToValidation();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
ValidationDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: ValidationDirective, deps: [{ token: i0.Injector }, { token: i0.ChangeDetectorRef }, { token: i1.NgControl, self: true }, { token: i0.Renderer2 }, { token: i0.ViewContainerRef }, { token: i2.ValidationGroupDirective, skipSelf: true }, { token: i3.ValidationStyleDirective, optional: true, skipSelf: true }, { token: i4.ValidationTargetDirective, optional: true, skipSelf: true }, { token: i5.ValidationContainerDirective, optional: true }, { token: i1.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
ValidationDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.7", type: ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: ValidationDirective, decorators: [{
            type: Directive,
            args: [{
                    /* tslint:disable-next-line */
                    selector: '[formControl],[formControlName]',
                    exportAs: 'validationDirective',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ChangeDetectorRef }, { type: i1.NgControl, decorators: [{
                    type: Self
                }] }, { type: i0.Renderer2 }, { type: i0.ViewContainerRef }, { type: i2.ValidationGroupDirective, decorators: [{
                    type: SkipSelf
                }] }, { type: i3.ValidationStyleDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i4.ValidationTargetDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i5.ValidationContainerDirective, decorators: [{
                    type: Optional
                }] }, { type: i1.FormGroupDirective, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvZGlyZWN0aXZlcy92YWxpZGF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsWUFBWSxFQUNaLFNBQVMsRUFJVCxRQUFRLEVBRVIsSUFBSSxFQUNKLFFBQVEsRUFDUixXQUFXLEdBRVosTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLEtBQUssRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUczRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7Ozs7QUFXbkQsTUFBTSxPQUFPLG1CQUNYLFNBQVEsMkJBQTJCO0lBaUJuQyxZQUNTLFFBQWtCLEVBQ2pCLEtBQXdCLEVBQ2hCLE9BQWtCLEVBQzFCLFFBQW1CLEVBQ25CLEtBQXVCLEVBQ1osU0FBbUMsRUFDdEIsT0FBaUMsRUFDbEMsU0FBb0MsRUFDL0MsWUFBMEMsRUFDMUMsa0JBQXNDO1FBRTFELEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQVhULGFBQVEsR0FBUixRQUFRLENBQVU7UUFDakIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFDaEIsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUMxQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ1osY0FBUyxHQUFULFNBQVMsQ0FBMEI7UUFDdEIsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFDbEMsY0FBUyxHQUFULFNBQVMsQ0FBMkI7UUFDL0MsaUJBQVksR0FBWixZQUFZ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RTlDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUVwQixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxNQUFNO29CQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2dCQUN2QyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNqQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDMUIsTUFBTSxHQUFHLEVBQUUsQ0FBQzthQUNiO1lBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ0osQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLENBQUM7O2dIQWhJVSxtQkFBbUI7b0dBQW5CLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUwvQixTQUFTO21CQUFDO29CQUNULDhCQUE4QjtvQkFDOUIsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7OzBCQXNCSSxJQUFJOzswQkFHSixRQUFROzswQkFDUixRQUFROzswQkFBSSxRQUFROzswQkFDcEIsUUFBUTs7MEJBQUksUUFBUTs7MEJBQ3BCLFFBQVE7OzBCQUNSLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50UmVmLFxuICBEaXJlY3RpdmUsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgSW5qZWN0b3IsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIFJlbmRlcmVyMixcbiAgU2VsZixcbiAgU2tpcFNlbGYsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVudHlwZWRGb3JtR3JvdXAsIEZvcm1Hcm91cERpcmVjdGl2ZSwgTmdDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgbWVyZ2UsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIG1hcFRvLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBYnN0cmFjdFZhbGlkYXRpb25EaXJlY3RpdmUgfSBmcm9tICcuLi9hYnN0cmFjdHMnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cyc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IGdlbmVyYXRlVmFsaWRhdGlvbkVycm9yIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkNvbnRhaW5lckRpcmVjdGl2ZSB9IGZyb20gJy4vdmFsaWRhdGlvbi1jb250YWluZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZhbGlkYXRpb25Hcm91cERpcmVjdGl2ZSB9IGZyb20gJy4vdmFsaWRhdGlvbi1ncm91cC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvblN0eWxlRGlyZWN0aXZlIH0gZnJvbSAnLi92YWxpZGF0aW9uLXN0eWxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uVGFyZ2V0RGlyZWN0aXZlIH0gZnJvbSAnLi92YWxpZGF0aW9uLXRhcmdldC5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgLyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lICovXG4gIHNlbGVjdG9yOiAnW2Zvcm1Db250cm9sXSxbZm9ybUNvbnRyb2xOYW1lXScsXG4gIGV4cG9ydEFzOiAndmFsaWRhdGlvbkRpcmVjdGl2ZScsXG59KVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25EaXJlY3RpdmVcbiAgZXh0ZW5kcyBBYnN0cmFjdFZhbGlkYXRpb25EaXJlY3RpdmVcbiAgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3lcbntcbiAgcHJpdmF0ZSBlcnJvclJlZjogQ29tcG9uZW50UmVmPFZhbGlkYXRpb25FcnJvckNvbXBvbmVudD4gfCBFbWJlZGRlZFZpZXdSZWY8YW55PjtcbiAgcHJpdmF0ZSBtYXJrRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgaXNTdWJtaXR0ZWQgPSBmYWxzZTtcblxuICBnZXQgdmFsaWRhdGlvbiQoKTogT2JzZXJ2YWJsZTxVbnR5cGVkRm9ybUdyb3VwPiB7XG4gICAgcmV0dXJuIG1lcmdlKFxuICAgICAgdGhpcy5wYXJlbnQuZ2V0U3RyZWFtKCdzdGF0dXMnKS5waXBlKG1hcFRvKG51bGwpKSxcbiAgICAgIHRoaXMucGFyZW50LmdldFN0cmVhbSgndmFsdWUnKS5waXBlKG1hcFRvKG51bGwpKSxcbiAgICAgIHRoaXMucGFyZW50LmdldFN0cmVhbSgnc3VibWl0JyksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBTZWxmKCkgcHJpdmF0ZSBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgdmNSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgQFNraXBTZWxmKCkgcHVibGljIHBhcmVudFJlZjogVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlLFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHByaXZhdGUgbWFya1JlZjogVmFsaWRhdGlvblN0eWxlRGlyZWN0aXZlLFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHB1YmxpYyB0YXJnZXRSZWY6IFZhbGlkYXRpb25UYXJnZXREaXJlY3RpdmUsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBjb250YWluZXJSZWY6IFZhbGlkYXRpb25Db250YWluZXJEaXJlY3RpdmUsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBmb3JtR3JvdXBEaXJlY3RpdmU6IEZvcm1Hcm91cERpcmVjdGl2ZSxcbiAgKSB7XG4gICAgc3VwZXIoaW5qZWN0b3IpO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZEVycm9ycyhlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMpOiBWYWxpZGF0aW9uLkVycm9yW10ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhlcnJvcnMgfHwge30pLm1hcChrZXkgPT5cbiAgICAgIGdlbmVyYXRlVmFsaWRhdGlvbkVycm9yKGtleSwgZXJyb3JzW2tleV0sIHRoaXMuYmx1ZXByaW50c1trZXldKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBpbnNlcnRFcnJvckNsYXNzZXMoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm1hcmtFbGVtZW50LCB0aGlzLmludmFsaWRDbGFzc2VzKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5zZXJ0RXJyb3JzKHRoaXM6IFZhbGlkYXRpb25EaXJlY3RpdmUsIGVycm9yczogVmFsaWRhdGlvbi5FcnJvcltdKTogdm9pZCB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLmVycm9yVGVtcGxhdGU7XG4gICAgY29uc3QgdGFyZ2V0UmVmID0gdGhpcy5jb250YWluZXJSZWYgPyB0aGlzLmNvbnRhaW5lclJlZi50YXJnZXRSZWYgOiB0aGlzLnRhcmdldFJlZjtcbiAgICBjb25zdCB2Y1JlZiA9IHRhcmdldFJlZiA/IHRhcmdldFJlZi52Y1JlZiA6IHRoaXMudmNSZWY7XG5cbiAgICB0aGlzLmVycm9yUmVmID1cbiAgICAgIHRlbXBsYXRlIGluc3RhbmNlb2YgVGVtcGxhdGVSZWZcbiAgICAgICAgPyB2Y1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGVtcGxhdGUsIHsgJGltcGxpY2l0OiBlcnJvcnMgfSwgdmNSZWYubGVuZ3RoKVxuICAgICAgICA6IHZjUmVmLmNyZWF0ZUNvbXBvbmVudCh0ZW1wbGF0ZSwgeyBpbmRleDogdmNSZWYubGVuZ3RoLCBpbmplY3RvcjogdGhpcy5pbmplY3RvciB9KTtcblxuICAgIGlmICh0aGlzLmVycm9yUmVmIGluc3RhbmNlb2YgQ29tcG9uZW50UmVmICYmIHRoaXMuZXJyb3JSZWYuaW5zdGFuY2UpXG4gICAgICAodGhpcy5lcnJvclJlZiBhcyBDb21wb25lbnRSZWY8YW55PikuaW5zdGFuY2UudmFsaWRhdGlvbkVycm9ycyA9IGVycm9ycztcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlRXJyb3JDbGFzc2VzKCkge1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5tYXJrRWxlbWVudCwgdGhpcy5pbnZhbGlkQ2xhc3Nlcyk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUVycm9ycygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lcnJvclJlZikge1xuICAgICAgdGhpcy5lcnJvclJlZi5kZXN0cm95KCk7XG4gICAgICB0aGlzLmVycm9yUmVmID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldE1hcmtFbGVtZW50KCk6IHZvaWQge1xuICAgIHRoaXMubWFya0VsZW1lbnQgPVxuICAgICAgKHRoaXMubWFya1JlZlxuICAgICAgICA/IHRoaXMubWFya1JlZi5lbFJlZi5uYXRpdmVFbGVtZW50XG4gICAgICAgIDogdGhpcy50YXJnZXRTZWxlY3RvclxuICAgICAgICA/IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5jbG9zZXN0KHRoaXMudGFyZ2V0U2VsZWN0b3IpXG4gICAgICAgIDogbnVsbCkgfHwgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRWYWxpZGF0ZShlcnJvcnM6IFZhbGlkYXRpb24uRXJyb3JbXSkge1xuICAgIHJldHVybiBlcnJvcnMubGVuZ3RoICYmIHRoaXMuY29udHJvbC5kaXJ0eSAmJiAoIXRoaXMudmFsaWRhdGVPblN1Ym1pdCB8fCB0aGlzLmlzU3VibWl0dGVkKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9WYWxpZGF0aW9uKCk6IHZvaWQge1xuICAgIGxldCBjYWNoZWQ6IHN0cmluZztcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoXG4gICAgICB0aGlzLnZhbGlkYXRpb24kXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIGZpbHRlcigoKSA9PiAhdGhpcy5za2lwVmFsaWRhdGlvbiksXG4gICAgICAgICAgdGFwKGZvcm0gPT4ge1xuICAgICAgICAgICAgaWYgKGZvcm0gJiYgdGhpcy5mb3JtR3JvdXBEaXJlY3RpdmUuc3VibWl0dGVkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY29udHJvbC5jb250cm9sLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgICAgICAgIHRoaXMuaXNTdWJtaXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIG1hcCgoKSA9PlxuICAgICAgICAgICAgdGhpcy5tYXBFcnJvcnNGbihcbiAgICAgICAgICAgICAgdGhpcy5idWlsZEVycm9ycyh0aGlzLmNvbnRyb2wuZXJyb3JzKSxcbiAgICAgICAgICAgICAgdGhpcy5idWlsZEVycm9ycygodGhpcy5wYXJlbnRSZWYuZ3JvdXAgfHwgKHt9IGFzIFVudHlwZWRGb3JtR3JvdXApKS5lcnJvcnMpLFxuICAgICAgICAgICAgICB0aGlzLmNvbnRyb2wsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZShlcnJvcnMgPT4ge1xuICAgICAgICAgIGlmIChjYWNoZWQgPT09IEpTT04uc3RyaW5naWZ5KGVycm9ycykpIHJldHVybjtcblxuICAgICAgICAgIHRoaXMucmVtb3ZlRXJyb3JzKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5zaG91bGRWYWxpZGF0ZShlcnJvcnMpKSB7XG4gICAgICAgICAgICB0aGlzLmluc2VydEVycm9ycyhlcnJvcnMpO1xuICAgICAgICAgICAgaWYgKCFjYWNoZWQpIHRoaXMuaW5zZXJ0RXJyb3JDbGFzc2VzKCk7XG4gICAgICAgICAgICBjYWNoZWQgPSBKU09OLnN0cmluZ2lmeShlcnJvcnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVycm9yQ2xhc3NlcygpO1xuICAgICAgICAgICAgY2FjaGVkID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNldE1hcmtFbGVtZW50KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVUb1ZhbGlkYXRpb24oKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=