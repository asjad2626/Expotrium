import { Directive, Optional, Self, SkipSelf, } from '@angular/core';
import { ReplaySubject, Subscription } from 'rxjs';
import { AbstractValidationDirective } from '../abstracts';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class ValidationGroupDirective extends AbstractValidationDirective {
    constructor(injector, cdRef, groupName, groupRef, parentRef) {
        super(injector);
        this.injector = injector;
        this.cdRef = cdRef;
        this.groupName = groupName;
        this.groupRef = groupRef;
        this.parentRef = parentRef;
        this.status$ = new ReplaySubject(1);
        this.submit$ = new ReplaySubject(1);
        this.value$ = new ReplaySubject(1);
        this.subs = new Subscription();
    }
    subscribeToFormSubmit() {
        this.elRef.nativeElement.onsubmit = event => {
            if (this.group.invalid)
                event.preventDefault();
            this.submit$.next(this.group);
            this.cdRef.markForCheck();
        };
    }
    subscribeToStatusChanges() {
        this.subs.add(this.group.statusChanges.subscribe(() => {
            this.status$.next(this.group);
            this.cdRef.markForCheck();
        }));
    }
    subscribeToValueChanges() {
        this.subs.add(this.group.valueChanges.subscribe(() => {
            this.value$.next(this.group);
            this.cdRef.markForCheck();
        }));
    }
    ngAfterViewInit() {
        if (!this.parentRef)
            this.subscribeToFormSubmit();
        this.subscribeToStatusChanges();
        this.subscribeToValueChanges();
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
}
ValidationGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: ValidationGroupDirective, deps: [{ token: i0.Injector }, { token: i0.ChangeDetectorRef }, { token: i1.FormGroupName, optional: true, self: true }, { token: i1.FormGroupDirective, optional: true, self: true }, { token: ValidationGroupDirective, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
ValidationGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.7", type: ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: ValidationGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    /* tslint:disable-next-line */
                    selector: '[formGroup],[formGroupName]',
                    exportAs: 'validationGroup',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ChangeDetectorRef }, { type: i1.FormGroupName, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i1.FormGroupDirective, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: ValidationGroupDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvZGlyZWN0aXZlcy92YWxpZGF0aW9uLWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsU0FBUyxFQUdULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7O0FBTzNELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSwyQkFBMkI7SUFRdkUsWUFDUyxRQUFrQixFQUNsQixLQUF3QixFQUd4QixTQUF3QixFQUd4QixRQUE0QixFQUc1QixTQUFtQztRQUUxQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFaVCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBR3hCLGNBQVMsR0FBVCxTQUFTLENBQWU7UUFHeEIsYUFBUSxHQUFSLFFBQVEsQ0FBb0I7UUFHNUIsY0FBUyxHQUFULFNBQVMsQ0FBMEI7UUFqQjVDLFlBQU8sR0FBRyxJQUFJLGFBQWEsQ0FBbUIsQ0FBQyxDQUFDLENBQUM7UUFDakQsWUFBTyxHQUFHLElBQUksYUFBYSxDQUFtQixDQUFDLENBQUMsQ0FBQztRQUNqRCxXQUFNLEdBQUcsSUFBSSxhQUFhLENBQW1CLENBQUMsQ0FBQyxDQUFDO1FBRXhDLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBZ0JsQyxDQUFDO0lBRU8scUJBQXFCO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBaUMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLEVBQUU7WUFDL0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Z0JBQUUsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTyx3QkFBd0I7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVPLHVCQUF1QjtRQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDWCxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztZQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQixDQUFDOztxSEExRFUsd0JBQXdCO3lHQUF4Qix3QkFBd0I7MkZBQXhCLHdCQUF3QjtrQkFMcEMsU0FBUzttQkFBQztvQkFDVCw4QkFBOEI7b0JBQzlCLFFBQVEsRUFBRSw2QkFBNkI7b0JBQ3ZDLFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOzswQkFZSSxRQUFROzswQkFDUixJQUFJOzswQkFFSixRQUFROzswQkFDUixJQUFJOzswQkFFSixRQUFROzswQkFDUixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0b3IsXG4gIE9uRGVzdHJveSxcbiAgT3B0aW9uYWwsXG4gIFNlbGYsXG4gIFNraXBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVudHlwZWRGb3JtR3JvdXAsIEZvcm1Hcm91cERpcmVjdGl2ZSwgRm9ybUdyb3VwTmFtZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWJzdHJhY3RWYWxpZGF0aW9uRGlyZWN0aXZlIH0gZnJvbSAnLi4vYWJzdHJhY3RzJztcblxuQERpcmVjdGl2ZSh7XG4gIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSAqL1xuICBzZWxlY3RvcjogJ1tmb3JtR3JvdXBdLFtmb3JtR3JvdXBOYW1lXScsXG4gIGV4cG9ydEFzOiAndmFsaWRhdGlvbkdyb3VwJyxcbn0pXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlIGV4dGVuZHMgQWJzdHJhY3RWYWxpZGF0aW9uRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgc3RhdHVzJCA9IG5ldyBSZXBsYXlTdWJqZWN0PFVudHlwZWRGb3JtR3JvdXA+KDEpO1xuICBzdWJtaXQkID0gbmV3IFJlcGxheVN1YmplY3Q8VW50eXBlZEZvcm1Hcm91cD4oMSk7XG4gIHZhbHVlJCA9IG5ldyBSZXBsYXlTdWJqZWN0PFVudHlwZWRGb3JtR3JvdXA+KDEpO1xuXG4gIHByaXZhdGUgc3VicyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHB1YmxpYyBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQE9wdGlvbmFsKClcbiAgICBAU2VsZigpXG4gICAgcHVibGljIGdyb3VwTmFtZTogRm9ybUdyb3VwTmFtZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTZWxmKClcbiAgICBwdWJsaWMgZ3JvdXBSZWY6IEZvcm1Hcm91cERpcmVjdGl2ZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBTa2lwU2VsZigpXG4gICAgcHVibGljIHBhcmVudFJlZjogVmFsaWRhdGlvbkdyb3VwRGlyZWN0aXZlLFxuICApIHtcbiAgICBzdXBlcihpbmplY3Rvcik7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvRm9ybVN1Ym1pdCgpIHtcbiAgICAodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxGb3JtRWxlbWVudCkub25zdWJtaXQgPSBldmVudCA9PiB7XG4gICAgICBpZiAodGhpcy5ncm91cC5pbnZhbGlkKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5zdWJtaXQkLm5leHQodGhpcy5ncm91cCk7XG4gICAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmliZVRvU3RhdHVzQ2hhbmdlcygpIHtcbiAgICB0aGlzLnN1YnMuYWRkKFxuICAgICAgdGhpcy5ncm91cC5zdGF0dXNDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdHVzJC5uZXh0KHRoaXMuZ3JvdXApO1xuICAgICAgICB0aGlzLmNkUmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9WYWx1ZUNoYW5nZXMoKSB7XG4gICAgdGhpcy5zdWJzLmFkZChcbiAgICAgIHRoaXMuZ3JvdXAudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMudmFsdWUkLm5leHQodGhpcy5ncm91cCk7XG4gICAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5wYXJlbnRSZWYpIHRoaXMuc3Vic2NyaWJlVG9Gb3JtU3VibWl0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVUb1N0YXR1c0NoYW5nZXMoKTtcbiAgICB0aGlzLnN1YnNjcmliZVRvVmFsdWVDaGFuZ2VzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnMudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19