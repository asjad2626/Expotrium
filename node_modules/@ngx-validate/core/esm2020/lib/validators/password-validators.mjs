import { addCommas, normalizeDiacritics } from '../utils';
export function comparePasswords([controlName1, controlName2]) {
    return (group) => {
        const password = group.get(controlName1).value;
        const repeat = group.get(controlName2).value;
        return !password || !repeat || password === repeat
            ? null
            : {
                passwordMismatch: {
                    fields: [controlName1, controlName2],
                },
            };
    };
}
export function validatePassword(shouldContain = ['small', 'capital', 'number', 'special']) {
    return (control) => {
        if (!control.value)
            return null;
        const value = normalizeDiacritics(control.value);
        const regex = {
            small: /.*[a-z].*/,
            capital: /.*[A-Z].*/,
            number: /.*[0-9].*/,
            special: /.*[^0-9a-zA-Z].*/,
        };
        const missing = shouldContain.filter(key => !regex[key].test(value));
        return missing.length
            ? {
                invalidPassword: {
                    missing,
                    description: addCommas(missing.map(key => ({
                        small: 'a small letter',
                        capital: 'a capital',
                        number: 'a number',
                        special: 'a special character',
                    }[key]))),
                },
            }
            : null;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2xpYi92YWxpZGF0b3JzL3Bhc3N3b3JkLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUxRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFXO0lBQ3JFLE9BQU8sQ0FBQyxLQUF1QixFQUFFLEVBQUU7UUFDakMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDL0MsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFN0MsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE1BQU0sSUFBSSxRQUFRLEtBQUssTUFBTTtZQUNoRCxDQUFDLENBQUMsSUFBSTtZQUNOLENBQUMsQ0FBQztnQkFDRSxnQkFBZ0IsRUFBRTtvQkFDaEIsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQztpQkFDckM7YUFDRixDQUFDO0lBQ1IsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUlELE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsZ0JBQStCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO0lBRXhFLE9BQU8sQ0FBQyxPQUF3QixFQUFFLEVBQUU7UUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFaEMsTUFBTSxLQUFLLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWpELE1BQU0sS0FBSyxHQUFHO1lBQ1osS0FBSyxFQUFFLFdBQVc7WUFDbEIsT0FBTyxFQUFFLFdBQVc7WUFDcEIsTUFBTSxFQUFFLFdBQVc7WUFDbkIsT0FBTyxFQUFFLGtCQUFrQjtTQUM1QixDQUFDO1FBRUYsTUFBTSxPQUFPLEdBQWEsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRS9FLE9BQU8sT0FBTyxDQUFDLE1BQU07WUFDbkIsQ0FBQyxDQUFDO2dCQUNFLGVBQWUsRUFBRTtvQkFDZixPQUFPO29CQUNQLFdBQVcsRUFBRSxTQUFTLENBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsR0FBRyxDQUFDLEVBQUUsQ0FDSixDQUFDO3dCQUNDLEtBQUssRUFBRSxnQkFBZ0I7d0JBQ3ZCLE9BQU8sRUFBRSxXQUFXO3dCQUNwQixNQUFNLEVBQUUsVUFBVTt3QkFDbEIsT0FBTyxFQUFFLHFCQUFxQjtxQkFDL0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUNWLENBQ0Y7aUJBQ0Y7YUFDRjtZQUNILENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDWCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBVbnR5cGVkRm9ybUdyb3VwLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGFkZENvbW1hcywgbm9ybWFsaXplRGlhY3JpdGljcyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVQYXNzd29yZHMoW2NvbnRyb2xOYW1lMSwgY29udHJvbE5hbWUyXTogc3RyaW5nW10pOiBWYWxpZGF0b3JGbiB7XG4gIHJldHVybiAoZ3JvdXA6IFVudHlwZWRGb3JtR3JvdXApID0+IHtcbiAgICBjb25zdCBwYXNzd29yZCA9IGdyb3VwLmdldChjb250cm9sTmFtZTEpLnZhbHVlO1xuICAgIGNvbnN0IHJlcGVhdCA9IGdyb3VwLmdldChjb250cm9sTmFtZTIpLnZhbHVlO1xuXG4gICAgcmV0dXJuICFwYXNzd29yZCB8fCAhcmVwZWF0IHx8IHBhc3N3b3JkID09PSByZXBlYXRcbiAgICAgID8gbnVsbFxuICAgICAgOiB7XG4gICAgICAgICAgcGFzc3dvcmRNaXNtYXRjaDoge1xuICAgICAgICAgICAgZmllbGRzOiBbY29udHJvbE5hbWUxLCBjb250cm9sTmFtZTJdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFBhc3N3b3JkUnVsZXMgPSAoJ3NtYWxsJyB8ICdjYXBpdGFsJyB8ICdudW1iZXInIHwgJ3NwZWNpYWwnKVtdO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChcbiAgc2hvdWxkQ29udGFpbjogUGFzc3dvcmRSdWxlcyA9IFsnc21hbGwnLCAnY2FwaXRhbCcsICdudW1iZXInLCAnc3BlY2lhbCddLFxuKTogVmFsaWRhdG9yRm4ge1xuICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xuICAgIGlmICghY29udHJvbC52YWx1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCB2YWx1ZSA9IG5vcm1hbGl6ZURpYWNyaXRpY3MoY29udHJvbC52YWx1ZSk7XG5cbiAgICBjb25zdCByZWdleCA9IHtcbiAgICAgIHNtYWxsOiAvLipbYS16XS4qLyxcbiAgICAgIGNhcGl0YWw6IC8uKltBLVpdLiovLFxuICAgICAgbnVtYmVyOiAvLipbMC05XS4qLyxcbiAgICAgIHNwZWNpYWw6IC8uKlteMC05YS16QS1aXS4qLyxcbiAgICB9O1xuXG4gICAgY29uc3QgbWlzc2luZzogc3RyaW5nW10gPSBzaG91bGRDb250YWluLmZpbHRlcihrZXkgPT4gIXJlZ2V4W2tleV0udGVzdCh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIG1pc3NpbmcubGVuZ3RoXG4gICAgICA/IHtcbiAgICAgICAgICBpbnZhbGlkUGFzc3dvcmQ6IHtcbiAgICAgICAgICAgIG1pc3NpbmcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYWRkQ29tbWFzKFxuICAgICAgICAgICAgICBtaXNzaW5nLm1hcChcbiAgICAgICAgICAgICAgICBrZXkgPT5cbiAgICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsOiAnYSBzbWFsbCBsZXR0ZXInLFxuICAgICAgICAgICAgICAgICAgICBjYXBpdGFsOiAnYSBjYXBpdGFsJyxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiAnYSBudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsOiAnYSBzcGVjaWFsIGNoYXJhY3RlcicsXG4gICAgICAgICAgICAgICAgICB9W2tleV0pLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICA6IG51bGw7XG4gIH07XG59XG4iXX0=