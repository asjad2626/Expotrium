import { __decorate } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewEncapsulation } from '@angular/core';
import { NG_ASYNC_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { of, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { parseExpression } from 'cron-parser';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "ng-zorro-antd/i18n";
import * as i3 from "@angular/common";
import * as i4 from "./cron-expression-label.component";
import * as i5 from "./cron-expression-input.component";
import * as i6 from "./cron-expression-preview.component";
export class NzCronExpressionComponent {
    constructor(formBuilder, cdr, i18n) {
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.i18n = i18n;
        this.nzSize = 'default';
        this.nzType = 'linux';
        this.nzCollapseDisable = false;
        this.nzExtra = null;
        this.nzSemantic = null;
        this.focus = false;
        this.labelFocus = null;
        this.validLabel = null;
        this.labels = [];
        this.nextTimeList = [];
        this.destroy$ = new Subject();
        this.onChange = () => { };
        this.onTouch = () => null;
        this.checkValid = (control) => {
            if (control.value) {
                try {
                    const cron = [];
                    this.labels.forEach(label => {
                        label === this.validLabel ? cron.push(control.value) : cron.push('*');
                    });
                    parseExpression(cron.join(' '));
                }
                catch (err) {
                    return of({ error: true });
                }
            }
            return of(null);
        };
    }
    convertFormat(value) {
        const values = value.split(' ');
        const valueObject = {};
        this.labels.map((a, b) => {
            valueObject[a] = values[b];
        });
        this.validateForm.patchValue(valueObject);
    }
    writeValue(value) {
        if (value) {
            this.convertFormat(value);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    validate() {
        if (this.validateForm.valid) {
            return of(null);
        }
        else {
            return of({ error: true });
        }
    }
    ngOnInit() {
        if (this.nzType === 'spring') {
            this.labels = ['second', 'minute', 'hour', 'day', 'month', 'week'];
            this.validateForm = this.formBuilder.group({
                second: ['0', Validators.required, this.checkValid],
                minute: ['*', Validators.required, this.checkValid],
                hour: ['*', Validators.required, this.checkValid],
                day: ['*', Validators.required, this.checkValid],
                month: ['*', Validators.required, this.checkValid],
                week: ['*', Validators.required, this.checkValid]
            });
        }
        else {
            this.labels = ['minute', 'hour', 'day', 'month', 'week'];
            this.validateForm = this.formBuilder.group({
                minute: ['*', Validators.required, this.checkValid],
                hour: ['*', Validators.required, this.checkValid],
                day: ['*', Validators.required, this.checkValid],
                month: ['*', Validators.required, this.checkValid],
                week: ['*', Validators.required, this.checkValid]
            });
        }
        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.locale = this.i18n.getLocaleData('CronExpression');
            this.cdr.markForCheck();
        });
        this.previewDate(this.validateForm.value);
        this.validateForm.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(value => {
            this.onChange(Object.values(value).join(' '));
            this.previewDate(value);
            this.cdr.markForCheck();
        });
    }
    previewDate(value) {
        try {
            this.interval = parseExpression(Object.values(value).join(' '));
            this.nextTimeList = [
                this.interval.next().toDate(),
                this.interval.next().toDate(),
                this.interval.next().toDate(),
                this.interval.next().toDate(),
                this.interval.next().toDate()
            ];
        }
        catch (err) {
            return;
        }
    }
    loadMorePreview() {
        this.nextTimeList = [
            ...this.nextTimeList,
            this.interval.next().toDate(),
            this.interval.next().toDate(),
            this.interval.next().toDate(),
            this.interval.next().toDate(),
            this.interval.next().toDate()
        ];
        this.cdr.markForCheck();
    }
    focusEffect(value) {
        this.focus = true;
        this.labelFocus = value;
        this.cdr.markForCheck();
    }
    blurEffect() {
        this.focus = false;
        this.labelFocus = null;
        this.cdr.markForCheck();
    }
    getValue(item) {
        this.validLabel = item.label;
        this.validateForm.controls[item.label].patchValue(item.value);
        this.cdr.markForCheck();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
NzCronExpressionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NzCronExpressionComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: i0.ChangeDetectorRef }, { token: i2.NzI18nService }], target: i0.ɵɵFactoryTarget.Component });
NzCronExpressionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: NzCronExpressionComponent, selector: "nz-cron-expression", inputs: { nzSize: "nzSize", nzType: "nzType", nzCollapseDisable: "nzCollapseDisable", nzExtra: "nzExtra", nzSemantic: "nzSemantic" }, providers: [
        {
            provide: NG_ASYNC_VALIDATORS,
            useExisting: forwardRef(() => NzCronExpressionComponent),
            multi: true
        },
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NzCronExpressionComponent),
            multi: true
        }
    ], exportAs: ["nzCronExpression"], ngImport: i0, template: `
    <div class="ant-cron-expression">
      <div class="ant-cron-expression-content">
        <div
          class="ant-input ant-cron-expression-input-group"
          [class.ant-input-lg]="nzSize === 'large'"
          [class.ant-input-sm]="nzSize === 'small'"
          [class.ant-cron-expression-input-group-focus]="focus"
          [class.ant-cron-expression-input-group-error]="!validateForm.valid"
          [class.ant-cron-expression-input-group-error-focus]="!validateForm.valid && focus"
        >
          <ng-container *ngFor="let label of labels">
            <nz-cron-expression-input
              [value]="this.validateForm.controls[label].value"
              [label]="label"
              (focusEffect)="focusEffect($event)"
              (blurEffect)="blurEffect()"
              (getValue)="getValue($event)"
            ></nz-cron-expression-input>
          </ng-container>
        </div>
        <div
          class="ant-cron-expression-label-group"
          [class.ant-input-lg]="nzSize === 'large'"
          [class.ant-cron-expression-label-group-default]="nzSize === 'default'"
          [class.ant-input-sm]="nzSize === 'small'"
        >
          <ng-container *ngFor="let label of labels">
            <nz-cron-expression-label
              [type]="label"
              [valid]="this.validateForm.controls[label].valid"
              [labelFocus]="labelFocus"
              [locale]="locale"
            ></nz-cron-expression-label>
          </ng-container>
        </div>
        <nz-cron-expression-preview
          *ngIf="!nzCollapseDisable"
          [TimeList]="nextTimeList"
          [visible]="validateForm.valid"
          [locale]="locale"
          [nzSemantic]="nzSemantic"
          (loadMorePreview)="loadMorePreview()"
        ></nz-cron-expression-preview>
      </div>
      <div class="ant-cron-expression-map" *ngIf="nzExtra">
        <ng-template [ngTemplateOutlet]="nzExtra"></ng-template>
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.NzCronExpressionLabelComponent, selector: "nz-cron-expression-label", inputs: ["type", "valid", "locale", "labelFocus"], exportAs: ["nzCronExpressionLabel"] }, { kind: "component", type: i5.NzCronExpressionInputComponent, selector: "nz-cron-expression-input", inputs: ["value", "label"], outputs: ["focusEffect", "blurEffect", "getValue"], exportAs: ["nzCronExpressionInput"] }, { kind: "component", type: i6.NzCronExpressionPreviewComponent, selector: "nz-cron-expression-preview", inputs: ["TimeList", "visible", "locale", "nzSemantic"], outputs: ["loadMorePreview"], exportAs: ["nzCronExpressionPreview"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    InputBoolean()
], NzCronExpressionComponent.prototype, "nzCollapseDisable", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NzCronExpressionComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'nz-cron-expression',
                    exportAs: 'nzCronExpression',
                    template: `
    <div class="ant-cron-expression">
      <div class="ant-cron-expression-content">
        <div
          class="ant-input ant-cron-expression-input-group"
          [class.ant-input-lg]="nzSize === 'large'"
          [class.ant-input-sm]="nzSize === 'small'"
          [class.ant-cron-expression-input-group-focus]="focus"
          [class.ant-cron-expression-input-group-error]="!validateForm.valid"
          [class.ant-cron-expression-input-group-error-focus]="!validateForm.valid && focus"
        >
          <ng-container *ngFor="let label of labels">
            <nz-cron-expression-input
              [value]="this.validateForm.controls[label].value"
              [label]="label"
              (focusEffect)="focusEffect($event)"
              (blurEffect)="blurEffect()"
              (getValue)="getValue($event)"
            ></nz-cron-expression-input>
          </ng-container>
        </div>
        <div
          class="ant-cron-expression-label-group"
          [class.ant-input-lg]="nzSize === 'large'"
          [class.ant-cron-expression-label-group-default]="nzSize === 'default'"
          [class.ant-input-sm]="nzSize === 'small'"
        >
          <ng-container *ngFor="let label of labels">
            <nz-cron-expression-label
              [type]="label"
              [valid]="this.validateForm.controls[label].valid"
              [labelFocus]="labelFocus"
              [locale]="locale"
            ></nz-cron-expression-label>
          </ng-container>
        </div>
        <nz-cron-expression-preview
          *ngIf="!nzCollapseDisable"
          [TimeList]="nextTimeList"
          [visible]="validateForm.valid"
          [locale]="locale"
          [nzSemantic]="nzSemantic"
          (loadMorePreview)="loadMorePreview()"
        ></nz-cron-expression-preview>
      </div>
      <div class="ant-cron-expression-map" *ngIf="nzExtra">
        <ng-template [ngTemplateOutlet]="nzExtra"></ng-template>
      </div>
    </div>
  `,
                    providers: [
                        {
                            provide: NG_ASYNC_VALIDATORS,
                            useExisting: forwardRef(() => NzCronExpressionComponent),
                            multi: true
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NzCronExpressionComponent),
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: i0.ChangeDetectorRef }, { type: i2.NzI18nService }]; }, propDecorators: { nzSize: [{
                type: Input
            }], nzType: [{
                type: Input
            }], nzCollapseDisable: [{
                type: Input
            }], nzExtra: [{
                type: Input
            }], nzSemantic: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,