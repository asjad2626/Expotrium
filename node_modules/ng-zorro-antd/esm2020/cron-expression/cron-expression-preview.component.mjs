import { __decorate } from "tslib";
/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "ng-zorro-antd/icon";
export class NzCronExpressionPreviewComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.TimeList = [];
        this.visible = true;
        this.nzSemantic = null;
        this.loadMorePreview = new EventEmitter();
        this.isExpand = true;
    }
    setExpand() {
        this.isExpand = !this.isExpand;
        this.cdr.markForCheck();
    }
}
NzCronExpressionPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NzCronExpressionPreviewComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NzCronExpressionPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: NzCronExpressionPreviewComponent, selector: "nz-cron-expression-preview", inputs: { TimeList: "TimeList", visible: "visible", locale: "locale", nzSemantic: "nzSemantic" }, outputs: { loadMorePreview: "loadMorePreview" }, exportAs: ["nzCronExpressionPreview"], ngImport: i0, template: `<div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      <ng-container *ngIf="visible; else cronError">
        <ng-container *ngIf="!nzSemantic; else semanticTemplate">
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        </ng-container>
        <ng-template #semanticTemplate [ngTemplateOutlet]="nzSemantic"></ng-template>
      </ng-container>
      <ng-template #cronError>{{ locale.cronError }}</ng-template>
    </div>
    <div *ngIf="visible" class="ant-cron-expression-preview-content">
      <div class="ant-cron-expression-preview-content-date">
        <ng-container *ngIf="!isExpand">
          <ul class="ant-cron-expression-preview-list">
            <li *ngFor="let item of TimeList">
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
            <li><a (click)="loadMorePreview.emit()">···</a></li>
          </ul>
        </ng-container>
      </div>
      <ul class="ant-cron-expression-preview-icon">
        <li *ngIf="isExpand"><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
        <li *ngIf="!isExpand"><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      </ul>
    </div>
  </div>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NzIconDirective, selector: "[nz-icon]", inputs: ["nzSpin", "nzRotate", "nzType", "nzTheme", "nzTwotoneColor", "nzIconfont"], exportAs: ["nzIcon"] }, { kind: "pipe", type: i1.DatePipe, name: "date" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    InputBoolean()
], NzCronExpressionPreviewComponent.prototype, "visible", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: NzCronExpressionPreviewComponent, decorators: [{
            type: Component,
            args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    selector: 'nz-cron-expression-preview',
                    exportAs: 'nzCronExpressionPreview',
                    template: `<div class="ant-collapse ant-collapse-borderless ant-cron-expression-preview">
    <div class="ant-cron-expression-preview-dateTime" [class.ant-cron-expression-preview-dateTime-center]="!isExpand">
      <ng-container *ngIf="visible; else cronError">
        <ng-container *ngIf="!nzSemantic; else semanticTemplate">
          {{ TimeList[0] | date: 'YYYY-MM-dd HH:mm:ss' }}
        </ng-container>
        <ng-template #semanticTemplate [ngTemplateOutlet]="nzSemantic"></ng-template>
      </ng-container>
      <ng-template #cronError>{{ locale.cronError }}</ng-template>
    </div>
    <div *ngIf="visible" class="ant-cron-expression-preview-content">
      <div class="ant-cron-expression-preview-content-date">
        <ng-container *ngIf="!isExpand">
          <ul class="ant-cron-expression-preview-list">
            <li *ngFor="let item of TimeList">
              {{ item | date: 'YYYY-MM-dd HH:mm:ss' }}
            </li>
            <li><a (click)="loadMorePreview.emit()">···</a></li>
          </ul>
        </ng-container>
      </div>
      <ul class="ant-cron-expression-preview-icon">
        <li *ngIf="isExpand"><span nz-icon nzType="down" nzTheme="outline" (click)="setExpand()"></span></li>
        <li *ngIf="!isExpand"><span nz-icon nzType="up" nzTheme="outline" (click)="setExpand()"></span></li>
      </ul>
    </div>
  </div>`
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { TimeList: [{
                type: Input
            }], visible: [{
                type: Input
            }], locale: [{
                type: Input
            }], nzSemantic: [{
                type: Input
            }], loadMorePreview: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vY29tcG9uZW50cy9jcm9uLWV4cHJlc3Npb24vY3Jvbi1leHByZXNzaW9uLXByZXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQ0wsU0FBUyxFQUNULGlCQUFpQixFQUNqQix1QkFBdUIsRUFDdkIsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBR2IsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7O0FBb0N2RCxNQUFNLE9BQU8sZ0NBQWdDO0lBUzNDLFlBQW9CLEdBQXNCO1FBQXRCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBUmpDLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDTixZQUFPLEdBQVksSUFBSSxDQUFDO1FBRXhDLGVBQVUsR0FBNkIsSUFBSSxDQUFDO1FBQ2xDLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUU5RCxhQUFRLEdBQVksSUFBSSxDQUFDO0lBRW9CLENBQUM7SUFFOUMsU0FBUztRQUNQLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OEhBZFUsZ0NBQWdDO2tIQUFoQyxnQ0FBZ0MsNFBBNUJqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0EwQkg7O0lBSUcsWUFBWSxFQUFFO2lFQUF5Qjs0RkFGdEMsZ0NBQWdDO2tCQWpDNUMsU0FBUzttQkFBQztvQkFDVCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0EwQkg7aUJBQ1I7d0dBRVUsUUFBUTtzQkFBaEIsS0FBSztnQkFDbUIsT0FBTztzQkFBL0IsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDYSxlQUFlO3NCQUFqQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIFRlbXBsYXRlUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdXRpbCc7XG5pbXBvcnQgeyBOekNyb25FeHByZXNzaW9uQ3JvbkVycm9ySTE4biB9IGZyb20gJ25nLXpvcnJvLWFudGQvaTE4bic7XG5cbkBDb21wb25lbnQoe1xuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgc2VsZWN0b3I6ICduei1jcm9uLWV4cHJlc3Npb24tcHJldmlldycsXG4gIGV4cG9ydEFzOiAnbnpDcm9uRXhwcmVzc2lvblByZXZpZXcnLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJhbnQtY29sbGFwc2UgYW50LWNvbGxhcHNlLWJvcmRlcmxlc3MgYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3XCI+XG4gICAgPGRpdiBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1kYXRlVGltZVwiIFtjbGFzcy5hbnQtY3Jvbi1leHByZXNzaW9uLXByZXZpZXctZGF0ZVRpbWUtY2VudGVyXT1cIiFpc0V4cGFuZFwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInZpc2libGU7IGVsc2UgY3JvbkVycm9yXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhbnpTZW1hbnRpYzsgZWxzZSBzZW1hbnRpY1RlbXBsYXRlXCI+XG4gICAgICAgICAge3sgVGltZUxpc3RbMF0gfCBkYXRlOiAnWVlZWS1NTS1kZCBISDptbTpzcycgfX1cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjc2VtYW50aWNUZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJuelNlbWFudGljXCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPG5nLXRlbXBsYXRlICNjcm9uRXJyb3I+e3sgbG9jYWxlLmNyb25FcnJvciB9fTwvbmctdGVtcGxhdGU+XG4gICAgPC9kaXY+XG4gICAgPGRpdiAqbmdJZj1cInZpc2libGVcIiBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1jb250ZW50XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3LWNvbnRlbnQtZGF0ZVwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzRXhwYW5kXCI+XG4gICAgICAgICAgPHVsIGNsYXNzPVwiYW50LWNyb24tZXhwcmVzc2lvbi1wcmV2aWV3LWxpc3RcIj5cbiAgICAgICAgICAgIDxsaSAqbmdGb3I9XCJsZXQgaXRlbSBvZiBUaW1lTGlzdFwiPlxuICAgICAgICAgICAgICB7eyBpdGVtIHwgZGF0ZTogJ1lZWVktTU0tZGQgSEg6bW06c3MnIH19XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPjxhIChjbGljayk9XCJsb2FkTW9yZVByZXZpZXcuZW1pdCgpXCI+wrfCt8K3PC9hPjwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDx1bCBjbGFzcz1cImFudC1jcm9uLWV4cHJlc3Npb24tcHJldmlldy1pY29uXCI+XG4gICAgICAgIDxsaSAqbmdJZj1cImlzRXhwYW5kXCI+PHNwYW4gbnotaWNvbiBuelR5cGU9XCJkb3duXCIgbnpUaGVtZT1cIm91dGxpbmVcIiAoY2xpY2spPVwic2V0RXhwYW5kKClcIj48L3NwYW4+PC9saT5cbiAgICAgICAgPGxpICpuZ0lmPVwiIWlzRXhwYW5kXCI+PHNwYW4gbnotaWNvbiBuelR5cGU9XCJ1cFwiIG56VGhlbWU9XCJvdXRsaW5lXCIgKGNsaWNrKT1cInNldEV4cGFuZCgpXCI+PC9zcGFuPjwvbGk+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIE56Q3JvbkV4cHJlc3Npb25QcmV2aWV3Q29tcG9uZW50IHtcbiAgQElucHV0KCkgVGltZUxpc3Q6IERhdGVbXSA9IFtdO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgdmlzaWJsZTogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGxvY2FsZSE6IE56Q3JvbkV4cHJlc3Npb25Dcm9uRXJyb3JJMThuO1xuICBASW5wdXQoKSBuelNlbWFudGljOiBUZW1wbGF0ZVJlZjx2b2lkPiB8IG51bGwgPSBudWxsO1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgbG9hZE1vcmVQcmV2aWV3ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIGlzRXhwYW5kOiBib29sZWFuID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgc2V0RXhwYW5kKCk6IHZvaWQge1xuICAgIHRoaXMuaXNFeHBhbmQgPSAhdGhpcy5pc0V4cGFuZDtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxufVxuIl19