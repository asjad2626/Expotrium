import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { map, switchMap, take, tap } from 'rxjs/operators';
import { AbpApplicationConfigurationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service';
import { AbpApplicationLocalizationService } from '../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-localization.service';
import { INCUDE_LOCALIZATION_RESOURCES_TOKEN } from '../tokens/include-localization-resources.token';
import { InternalStore } from '../utils/internal-store-utils';
import * as i0 from "@angular/core";
import * as i1 from "../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-configuration.service";
import * as i2 from "../proxy/volo/abp/asp-net-core/mvc/application-configurations/abp-application-localization.service";
export class ConfigStateService {
    constructor(abpConfigService, abpApplicationLocalizationService, includeLocalizationResources) {
        this.abpConfigService = abpConfigService;
        this.abpApplicationLocalizationService = abpApplicationLocalizationService;
        this.includeLocalizationResources = includeLocalizationResources;
        this.store = new InternalStore({});
        this.updateSubject = new Subject();
        this.initUpdateStream();
    }
    get createOnUpdateStream() {
        return this.store.sliceUpdate;
    }
    initUpdateStream() {
        this.updateSubject
            .pipe(switchMap(() => this.abpConfigService.get({
            includeLocalizationResources: this.includeLocalizationResources,
        })))
            .pipe(switchMap(appState => this.getLocalizationAndCombineWithAppState(appState)))
            .subscribe(res => this.store.set(res));
    }
    getLocalizationAndCombineWithAppState(appState) {
        return this.getlocalizationResource(appState.localization.currentCulture.cultureName).pipe(map(result => ({ ...appState, localization: { ...appState.localization, ...result } })));
    }
    getlocalizationResource(cultureName) {
        return this.abpApplicationLocalizationService.get({
            cultureName: cultureName,
            onlyDynamics: false,
        });
    }
    refreshAppState() {
        this.updateSubject.next();
        return this.createOnUpdateStream(state => state).pipe(take(1));
    }
    refreshLocalization(lang) {
        if (this.includeLocalizationResources) {
            return this.refreshAppState().pipe(map(() => null));
        }
        else {
            return this.getlocalizationResource(lang)
                .pipe(tap(result => this.store.patch({ localization: { ...this.store.state.localization, ...result } })))
                .pipe(map(() => null));
        }
    }
    getOne$(key) {
        return this.store.sliceState(state => state[key]);
    }
    getOne(key) {
        return this.store.state[key];
    }
    getAll$() {
        return this.store.sliceState(state => state);
    }
    getAll() {
        return this.store.state;
    }
    getDeep$(keys) {
        keys = splitKeys(keys);
        return this.store
            .sliceState(state => state)
            .pipe(map(state => {
            return keys.reduce((acc, val) => {
                if (acc) {
                    return acc[val];
                }
                return undefined;
            }, state);
        }));
    }
    getDeep(keys) {
        keys = splitKeys(keys);
        return keys.reduce((acc, val) => {
            if (acc) {
                return acc[val];
            }
            return undefined;
        }, this.store.state);
    }
    getFeature(key) {
        return this.store.state.features?.values?.[key];
    }
    getFeature$(key) {
        return this.store.sliceState(state => state.features?.values?.[key]);
    }
    getFeatures(keys) {
        const { features } = this.store.state;
        if (!features)
            return;
        return keys.reduce((acc, key) => ({ ...acc, [key]: features.values[key] }), {});
    }
    getFeatures$(keys) {
        return this.store.sliceState(({ features }) => {
            if (!features?.values)
                return;
            return keys.reduce((acc, key) => ({ ...acc, [key]: features.values[key] }), {});
        });
    }
    getSetting(key) {
        return this.store.state.setting?.values?.[key];
    }
    getSetting$(key) {
        return this.store.sliceState(state => state.setting?.values?.[key]);
    }
    getSettings(keyword) {
        const settings = this.store.state.setting?.values || {};
        if (!keyword)
            return settings;
        const keysFound = Object.keys(settings).filter(key => key.indexOf(keyword) > -1);
        return keysFound.reduce((acc, key) => {
            acc[key] = settings[key];
            return acc;
        }, {});
    }
    getSettings$(keyword) {
        return this.store
            .sliceState(state => state.setting?.values)
            .pipe(map((settings = {}) => {
            if (!keyword)
                return settings;
            const keysFound = Object.keys(settings).filter(key => key.indexOf(keyword) > -1);
            return keysFound.reduce((acc, key) => {
                acc[key] = settings[key];
                return acc;
            }, {});
        }));
    }
    getGlobalFeatures() {
        return this.store.state.globalFeatures;
    }
    getGlobalFeatures$() {
        return this.store.sliceState(state => state.globalFeatures);
    }
    isGlobalFeatureEnabled(key, globalFeatures) {
        const features = globalFeatures.enabledFeatures || [];
        return features.some(f => key === f);
    }
    getGlobalFeatureIsEnabled(key) {
        return this.isGlobalFeatureEnabled(key, this.store.state.globalFeatures);
    }
    getGlobalFeatureIsEnabled$(key) {
        return this.store.sliceState(state => this.isGlobalFeatureEnabled(key, state.globalFeatures));
    }
}
ConfigStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ConfigStateService, deps: [{ token: i1.AbpApplicationConfigurationService }, { token: i2.AbpApplicationLocalizationService }, { token: INCUDE_LOCALIZATION_RESOURCES_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
ConfigStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ConfigStateService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ConfigStateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.AbpApplicationConfigurationService }, { type: i2.AbpApplicationLocalizationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [INCUDE_LOCALIZATION_RESOURCES_TOKEN]
                }] }]; } });
function splitKeys(keys) {
    if (typeof keys === 'string') {
        keys = keys.split('.');
    }
    if (!Array.isArray(keys)) {
        throw new Error('The argument must be a dot string or an string array.');
    }
    return keys;
}
//# sourceMappingURL=data:application/json;base64,