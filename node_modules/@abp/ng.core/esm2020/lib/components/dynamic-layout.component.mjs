import { Component, Injector, isDevMode, Optional, SkipSelf } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LocalizationService } from '../services/localization.service';
import { ReplaceableComponentsService } from '../services/replaceable-components.service';
import { RouterEvents } from '../services/router-events.service';
import { RoutesService } from '../services/routes.service';
import { SubscriptionService } from '../services/subscription.service';
import { findRoute, getRoutePath } from '../utils/route-utils';
import * as i0 from "@angular/core";
import * as i1 from "../services/localization.service";
import * as i2 from "../services/replaceable-components.service";
import * as i3 from "../services/subscription.service";
import * as i4 from "../services/router-events.service";
import * as i5 from "@angular/common";
export class DynamicLayoutComponent {
    constructor(injector, localizationService, replaceableComponents, subscription, routerEvents, dynamicLayoutComponent) {
        this.localizationService = localizationService;
        this.replaceableComponents = replaceableComponents;
        this.subscription = subscription;
        this.routerEvents = routerEvents;
        // TODO: Consider a shared enum (eThemeSharedComponents) for known layouts
        this.layouts = new Map([
            ['application', 'Theme.ApplicationLayoutComponent'],
            ['account', 'Theme.AccountLayoutComponent'],
            ['empty', 'Theme.EmptyLayoutComponent'],
        ]);
        this.isLayoutVisible = true;
        if (dynamicLayoutComponent) {
            if (isDevMode)
                console.warn('DynamicLayoutComponent must be used only in AppComponent.');
            return;
        }
        this.route = injector.get(ActivatedRoute);
        this.router = injector.get(Router);
        this.routes = injector.get(RoutesService);
        this.checkLayoutOnNavigationEnd();
        this.listenToLanguageChange();
    }
    checkLayoutOnNavigationEnd() {
        const navigationEnd$ = this.routerEvents.getNavigationEvents('End');
        this.subscription.addOne(navigationEnd$, () => this.getLayout());
    }
    getLayout() {
        let expectedLayout = (this.route.snapshot.data || {}).layout;
        if (!expectedLayout) {
            let node = findRoute(this.routes, getRoutePath(this.router));
            node = { parent: node };
            while (node.parent) {
                node = node.parent;
                if (node.layout) {
                    expectedLayout = node.layout;
                    break;
                }
            }
        }
        if (!expectedLayout)
            expectedLayout = "empty" /* eLayoutType.empty */;
        if (this.layoutKey === expectedLayout)
            return;
        const key = this.layouts.get(expectedLayout);
        this.layout = this.getComponent(key)?.component;
        this.layoutKey = expectedLayout;
        if (!this.layout) {
            this.showLayoutNotFoundError(expectedLayout);
        }
    }
    showLayoutNotFoundError(layoutName) {
        let message = `Layout ${layoutName} not found.`;
        if (layoutName === 'account') {
            message = 'Account layout not found. Please check your configuration. If you are using LeptonX, please make sure you have added "AccountLayoutModule.forRoot()" to your app.module configuration.';
        }
        console.warn(message);
    }
    listenToLanguageChange() {
        this.subscription.addOne(this.localizationService.languageChange$, () => {
            this.isLayoutVisible = false;
            setTimeout(() => (this.isLayoutVisible = true), 0);
        });
    }
    getComponent(key) {
        return this.replaceableComponents.get(key);
    }
}
DynamicLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: DynamicLayoutComponent, deps: [{ token: i0.Injector }, { token: i1.LocalizationService }, { token: i2.ReplaceableComponentsService }, { token: i3.SubscriptionService }, { token: i4.RouterEvents }, { token: DynamicLayoutComponent, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
DynamicLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: DynamicLayoutComponent, selector: "abp-dynamic-layout", providers: [SubscriptionService], ngImport: i0, template: ` <ng-container *ngIf="isLayoutVisible" [ngComponentOutlet]="layout"></ng-container> `, isInline: true, dependencies: [{ kind: "directive", type: i5.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: DynamicLayoutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'abp-dynamic-layout',
                    template: ` <ng-container *ngIf="isLayoutVisible" [ngComponentOutlet]="layout"></ng-container> `,
                    providers: [SubscriptionService],
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.LocalizationService }, { type: i2.ReplaceableComponentsService }, { type: i3.SubscriptionService }, { type: i4.RouterEvents }, { type: DynamicLayoutComponent, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,