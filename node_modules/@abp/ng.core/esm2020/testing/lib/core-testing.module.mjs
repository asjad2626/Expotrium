import { BaseCoreModule, coreOptionsFactory, CORE_OPTIONS, LIST_QUERY_DEBOUNCE_TIME, LOADER_DELAY, PermissionService, RestService, } from '@abp/ng.core';
import { APP_BASE_HREF } from '@angular/common';
import { NgModule } from '@angular/core';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { provideRoutes } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { MockPermissionService } from './services/mock-permission.service';
import { MockRestService } from './services/mock-rest.service';
import * as i0 from "@angular/core";
/**
 * CoreTestingModule is the module that will be used in tests
 * and it provides mock alternatives
 */
export class CoreTestingModule {
    static withConfig({ baseHref = '/', listQueryDebounceTime = 0, routes = [], ...options } = {}) {
        return {
            ngModule: CoreTestingModule,
            providers: [
                { provide: APP_BASE_HREF, useValue: baseHref },
                {
                    provide: 'CORE_OPTIONS',
                    useValue: {
                        skipGetAppConfiguration: true,
                        ...options,
                    },
                },
                {
                    provide: CORE_OPTIONS,
                    useFactory: coreOptionsFactory,
                    deps: ['CORE_OPTIONS'],
                },
                {
                    provide: LIST_QUERY_DEBOUNCE_TIME,
                    useValue: listQueryDebounceTime,
                },
                {
                    provide: PermissionService,
                    useClass: MockPermissionService,
                },
                {
                    provide: RestService,
                    useClass: MockRestService,
                },
                {
                    provide: LOADER_DELAY,
                    useValue: 0,
                },
                provideRoutes(routes),
            ],
        };
    }
}
CoreTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: CoreTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CoreTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.3", ngImport: i0, type: CoreTestingModule, imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule], exports: [RouterTestingModule, BaseCoreModule] });
CoreTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: CoreTestingModule, imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule, RouterTestingModule, BaseCoreModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: CoreTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [RouterTestingModule, BaseCoreModule],
                    imports: [NoopAnimationsModule, RouterTestingModule, BaseCoreModule],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS10ZXN0aW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9zcmMvbGliL2NvcmUtdGVzdGluZy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsWUFBWSxFQUNaLHdCQUF3QixFQUN4QixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFdBQVcsR0FDWixNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFFL0Q7OztHQUdHO0FBS0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixNQUFNLENBQUMsVUFBVSxDQUNmLEVBQUUsUUFBUSxHQUFHLEdBQUcsRUFBRSxxQkFBcUIsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxHQUFHLE9BQU8sS0FBSyxFQUFjO1FBRXZGLE9BQU87WUFDTCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRTtnQkFDOUM7b0JBQ0UsT0FBTyxFQUFFLGNBQWM7b0JBQ3ZCLFFBQVEsRUFBRTt3QkFDUix1QkFBdUIsRUFBRSxJQUFJO3dCQUM3QixHQUFHLE9BQU87cUJBQ1g7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLFlBQVk7b0JBQ3JCLFVBQVUsRUFBRSxrQkFBa0I7b0JBQzlCLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQztpQkFDdkI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLFdBQVc7b0JBQ3BCLFFBQVEsRUFBRSxlQUFlO2lCQUMxQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsUUFBUSxFQUFFLENBQUM7aUJBQ1o7Z0JBQ0QsYUFBYSxDQUFDLE1BQU0sQ0FBQzthQUN0QjtTQUNGLENBQUM7SUFDSixDQUFDOzs4R0F2Q1UsaUJBQWlCOytHQUFqQixpQkFBaUIsWUFGbEIsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxhQUR6RCxtQkFBbUIsRUFBRSxjQUFjOytHQUdsQyxpQkFBaUIsWUFGbEIsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxFQUR6RCxtQkFBbUIsRUFBRSxjQUFjOzJGQUdsQyxpQkFBaUI7a0JBSjdCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsY0FBYyxDQUFDO29CQUM5QyxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxtQkFBbUIsRUFBRSxjQUFjLENBQUM7aUJBQ3JFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBQlAsXHJcbiAgQmFzZUNvcmVNb2R1bGUsXHJcbiAgY29yZU9wdGlvbnNGYWN0b3J5LFxyXG4gIENPUkVfT1BUSU9OUyxcclxuICBMSVNUX1FVRVJZX0RFQk9VTkNFX1RJTUUsXHJcbiAgTE9BREVSX0RFTEFZLFxyXG4gIFBlcm1pc3Npb25TZXJ2aWNlLFxyXG4gIFJlc3RTZXJ2aWNlLFxyXG59IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IEFQUF9CQVNFX0hSRUYgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOb29wQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IHByb3ZpZGVSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBSb3V0ZXJUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyL3Rlc3RpbmcnO1xyXG5pbXBvcnQgeyBNb2NrUGVybWlzc2lvblNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL21vY2stcGVybWlzc2lvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTW9ja1Jlc3RTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9tb2NrLXJlc3Quc2VydmljZSc7XHJcblxyXG4vKipcclxuICogQ29yZVRlc3RpbmdNb2R1bGUgaXMgdGhlIG1vZHVsZSB0aGF0IHdpbGwgYmUgdXNlZCBpbiB0ZXN0c1xyXG4gKiBhbmQgaXQgcHJvdmlkZXMgbW9jayBhbHRlcm5hdGl2ZXNcclxuICovXHJcbkBOZ01vZHVsZSh7XHJcbiAgZXhwb3J0czogW1JvdXRlclRlc3RpbmdNb2R1bGUsIEJhc2VDb3JlTW9kdWxlXSxcclxuICBpbXBvcnRzOiBbTm9vcEFuaW1hdGlvbnNNb2R1bGUsIFJvdXRlclRlc3RpbmdNb2R1bGUsIEJhc2VDb3JlTW9kdWxlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIENvcmVUZXN0aW5nTW9kdWxlIHtcclxuICBzdGF0aWMgd2l0aENvbmZpZyhcclxuICAgIHsgYmFzZUhyZWYgPSAnLycsIGxpc3RRdWVyeURlYm91bmNlVGltZSA9IDAsIHJvdXRlcyA9IFtdLCAuLi5vcHRpb25zIH0gPSB7fSBhcyBBQlAuVGVzdCxcclxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENvcmVUZXN0aW5nTW9kdWxlPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogQ29yZVRlc3RpbmdNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHsgcHJvdmlkZTogQVBQX0JBU0VfSFJFRiwgdXNlVmFsdWU6IGJhc2VIcmVmIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogJ0NPUkVfT1BUSU9OUycsXHJcbiAgICAgICAgICB1c2VWYWx1ZToge1xyXG4gICAgICAgICAgICBza2lwR2V0QXBwQ29uZmlndXJhdGlvbjogdHJ1ZSxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBDT1JFX09QVElPTlMsXHJcbiAgICAgICAgICB1c2VGYWN0b3J5OiBjb3JlT3B0aW9uc0ZhY3RvcnksXHJcbiAgICAgICAgICBkZXBzOiBbJ0NPUkVfT1BUSU9OUyddLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogTElTVF9RVUVSWV9ERUJPVU5DRV9USU1FLFxyXG4gICAgICAgICAgdXNlVmFsdWU6IGxpc3RRdWVyeURlYm91bmNlVGltZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFBlcm1pc3Npb25TZXJ2aWNlLFxyXG4gICAgICAgICAgdXNlQ2xhc3M6IE1vY2tQZXJtaXNzaW9uU2VydmljZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFJlc3RTZXJ2aWNlLFxyXG4gICAgICAgICAgdXNlQ2xhc3M6IE1vY2tSZXN0U2VydmljZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IExPQURFUl9ERUxBWSxcclxuICAgICAgICAgIHVzZVZhbHVlOiAwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvdmlkZVJvdXRlcyhyb3V0ZXMpLFxyXG4gICAgICBdLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19