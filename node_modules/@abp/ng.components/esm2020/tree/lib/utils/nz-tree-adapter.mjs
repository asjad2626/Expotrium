export class BaseNode {
    constructor(id, parentId) {
        this.id = id;
        this.parentId = parentId;
    }
}
export class TreeNode extends BaseNode {
    constructor(entity, nameResolver = ent => ent.displayName || ent.name) {
        super(entity.id, entity.parentId);
        this.entity = entity;
        this.nameResolver = nameResolver;
        this.icon = null;
        this.children = [];
        this.isLeaf = true;
        this.checked = false;
        this.selected = false;
        this.expanded = false;
        this.selectable = true;
        this.disabled = false;
        this.disableCheckbox = false;
        this.key = entity.id;
        this.title = nameResolver(entity);
    }
}
export class TreeAdapter {
    constructor(list = []) {
        this.list = list;
        this.tree = createTreeFromList(this.list);
    }
    getList() {
        return this.list;
    }
    getTree() {
        return this.tree;
    }
    handleDrop({ key, parentNode }) {
        const index = this.list.findIndex(({ id }) => id === key);
        this.list[index].parentId = parentNode ? parentNode.key : null;
        this.tree = createTreeFromList(this.list);
    }
    handleRemove({ key }) {
        this.updateTreeFromList(this.list.filter(item => item.id !== key));
    }
    handleUpdate({ key, children }) {
        /**
         * When we need to update a node with new children, first we need to remove any descendant nodes.
         * If we remove immediate children and create a new tree, any other descendant nodes will be removed
         * and we won't need to recursively remove sub children.
         * Then, you simply add back the new children and create a new tree.
         */
        const listWithDescendantNodesRemoved = this.updateTreeFromList(this.list.filter(item => item.parentId !== key));
        this.updateTreeFromList(listWithDescendantNodesRemoved.concat(children));
    }
    updateTreeFromList(list) {
        this.tree = createTreeFromList(list);
        this.list = createListFromTree(this.tree);
        return this.list;
    }
}
// UTILITY FUNCTIONS
function createTreeFromList(list) {
    const map = createMapFromList(list);
    const tree = [];
    list.forEach(row => {
        const parentId = row.parentId;
        const node = map.get(row.id);
        if (parentId) {
            const parent = map.get(parentId);
            if (!parent)
                return;
            parent.children.push(node);
            parent.isLeaf = false;
        }
        else {
            tree.push(node);
        }
    });
    return tree;
}
function createListFromTree(tree, list = []) {
    tree.forEach(node => {
        list.push({ ...node.entity, parentId: node.parentId });
        if (node.children)
            createListFromTree(node.children, list);
    });
    return list;
}
function createMapFromList(list, map = new Map()) {
    list.forEach(row => map.set(row.id, new TreeNode(row)));
    return map;
}
//# sourceMappingURL=data:application/json;base64,