import { ConfigStateService } from '@abp/ng.core';
import { Validators } from '@angular/forms';
import { normalizeDiacritics } from '@ngx-validate/core';
const { minLength, maxLength } = Validators;
export function getPasswordValidators(injector) {
    const getRule = getRuleFn(injector);
    const passwordRulesArr = [];
    let requiredLength = 1;
    if (getRule('RequireDigit') === 'true') {
        passwordRulesArr.push('number');
    }
    if (getRule('RequireLowercase') === 'true') {
        passwordRulesArr.push('small');
    }
    if (getRule('RequireUppercase') === 'true') {
        passwordRulesArr.push('capital');
    }
    if (getRule('RequireNonAlphanumeric') === 'true') {
        passwordRulesArr.push('special');
    }
    if (Number.isInteger(+getRule('RequiredLength'))) {
        requiredLength = +getRule('RequiredLength');
    }
    const passwordValidators = passwordRulesArr.map(rule => validatePassword(rule));
    return [...passwordValidators, minLength(requiredLength), maxLength(128)];
}
function getRuleFn(injector) {
    const configState = injector.get(ConfigStateService);
    return (key) => {
        const passwordRules = configState.getSettings('Identity.Password');
        return (passwordRules[`Abp.Identity.Password.${key}`] || '').toLowerCase();
    };
}
const errorMessageMap = {
    small: 'passwordRequiresLower',
    capital: 'passwordRequiresUpper',
    number: 'passwordRequiresDigit',
    special: 'passwordRequiresNonAlphanumeric',
};
export function validatePassword(shouldContain) {
    return (control) => {
        if (!control.value)
            return null;
        const value = normalizeDiacritics(control.value);
        const regexMap = {
            small: /.*[a-z].*/,
            capital: /.*[A-Z].*/,
            number: /.*[0-9].*/,
            special: /.*[^0-9a-zA-Z].*/,
        };
        const regex = regexMap[shouldContain];
        const isValid = regex.test(value);
        if (isValid) {
            return null;
        }
        const error = errorMessageMap[shouldContain];
        return {
            [error]: true,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9zcmMvbGliL3V0aWxzL3ZhbGlkYXRpb24tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFPLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXZELE9BQU8sRUFBZ0MsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUUsT0FBTyxFQUFFLG1CQUFtQixFQUFpQixNQUFNLG9CQUFvQixDQUFDO0FBR3hFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsVUFBVSxDQUFDO0FBRTVDLE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxRQUFrQjtJQUN0RCxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFcEMsTUFBTSxnQkFBZ0IsR0FBRyxFQUFtQixDQUFDO0lBQzdDLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztJQUV2QixJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxNQUFNLEVBQUU7UUFDdEMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2pDO0lBRUQsSUFBSSxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxNQUFNLEVBQUU7UUFDMUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2hDO0lBRUQsSUFBSSxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxNQUFNLEVBQUU7UUFDMUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsSUFBSSxPQUFPLENBQUMsd0JBQXdCLENBQUMsS0FBSyxNQUFNLEVBQUU7UUFDaEQsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRTtRQUNoRCxjQUFjLEdBQUcsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUM3QztJQUVELE1BQU0sa0JBQWtCLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRixPQUFPLENBQUMsR0FBRyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLFFBQWtCO0lBQ25DLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUVyRCxPQUFPLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDckIsTUFBTSxhQUFhLEdBQTJCLFdBQVcsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUUzRixPQUFPLENBQUMsYUFBYSxDQUFDLHlCQUF5QixHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdFLENBQUMsQ0FBQztBQUNKLENBQUM7QUFDRCxNQUFNLGVBQWUsR0FBRztJQUN0QixLQUFLLEVBQUUsdUJBQXVCO0lBQzlCLE9BQU8sRUFBRSx1QkFBdUI7SUFDaEMsTUFBTSxFQUFFLHVCQUF1QjtJQUMvQixPQUFPLEVBQUUsaUNBQWlDO0NBQzNDLENBQUM7QUFFRixNQUFNLFVBQVUsZ0JBQWdCLENBQUMsYUFBMkI7SUFDMUQsT0FBTyxDQUFDLE9BQXdCLEVBQUUsRUFBRTtRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQztRQUVoQyxNQUFNLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakQsTUFBTSxRQUFRLEdBQUc7WUFDZixLQUFLLEVBQUUsV0FBVztZQUNsQixPQUFPLEVBQUUsV0FBVztZQUNwQixNQUFNLEVBQUUsV0FBVztZQUNuQixPQUFPLEVBQUUsa0JBQWtCO1NBQzVCLENBQUM7UUFDRixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFdEMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsQyxJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFN0MsT0FBTztZQUNMLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSTtTQUNkLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQUJQLCBDb25maWdTdGF0ZVNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBub3JtYWxpemVEaWFjcml0aWNzLCBQYXNzd29yZFJ1bGVzIH0gZnJvbSAnQG5neC12YWxpZGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgUGFzc3dvcmRSdWxlIH0gZnJvbSAnLi4vbW9kZWxzL3ZhbGlkYXRpb24nO1xyXG5cclxuY29uc3QgeyBtaW5MZW5ndGgsIG1heExlbmd0aCB9ID0gVmFsaWRhdG9ycztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXNzd29yZFZhbGlkYXRvcnMoaW5qZWN0b3I6IEluamVjdG9yKTogVmFsaWRhdG9yRm5bXSB7XHJcbiAgY29uc3QgZ2V0UnVsZSA9IGdldFJ1bGVGbihpbmplY3Rvcik7XHJcblxyXG4gIGNvbnN0IHBhc3N3b3JkUnVsZXNBcnIgPSBbXSBhcyBQYXNzd29yZFJ1bGVzO1xyXG4gIGxldCByZXF1aXJlZExlbmd0aCA9IDE7XHJcblxyXG4gIGlmIChnZXRSdWxlKCdSZXF1aXJlRGlnaXQnKSA9PT0gJ3RydWUnKSB7XHJcbiAgICBwYXNzd29yZFJ1bGVzQXJyLnB1c2goJ251bWJlcicpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGdldFJ1bGUoJ1JlcXVpcmVMb3dlcmNhc2UnKSA9PT0gJ3RydWUnKSB7XHJcbiAgICBwYXNzd29yZFJ1bGVzQXJyLnB1c2goJ3NtYWxsJyk7XHJcbiAgfVxyXG5cclxuICBpZiAoZ2V0UnVsZSgnUmVxdWlyZVVwcGVyY2FzZScpID09PSAndHJ1ZScpIHtcclxuICAgIHBhc3N3b3JkUnVsZXNBcnIucHVzaCgnY2FwaXRhbCcpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGdldFJ1bGUoJ1JlcXVpcmVOb25BbHBoYW51bWVyaWMnKSA9PT0gJ3RydWUnKSB7XHJcbiAgICBwYXNzd29yZFJ1bGVzQXJyLnB1c2goJ3NwZWNpYWwnKTtcclxuICB9XHJcblxyXG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKCtnZXRSdWxlKCdSZXF1aXJlZExlbmd0aCcpKSkge1xyXG4gICAgcmVxdWlyZWRMZW5ndGggPSArZ2V0UnVsZSgnUmVxdWlyZWRMZW5ndGgnKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHBhc3N3b3JkVmFsaWRhdG9ycyA9IHBhc3N3b3JkUnVsZXNBcnIubWFwKHJ1bGUgPT4gdmFsaWRhdGVQYXNzd29yZChydWxlKSk7XHJcbiAgcmV0dXJuIFsuLi5wYXNzd29yZFZhbGlkYXRvcnMsIG1pbkxlbmd0aChyZXF1aXJlZExlbmd0aCksIG1heExlbmd0aCgxMjgpXTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UnVsZUZuKGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gIGNvbnN0IGNvbmZpZ1N0YXRlID0gaW5qZWN0b3IuZ2V0KENvbmZpZ1N0YXRlU2VydmljZSk7XHJcblxyXG4gIHJldHVybiAoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgIGNvbnN0IHBhc3N3b3JkUnVsZXM6IEFCUC5EaWN0aW9uYXJ5PHN0cmluZz4gPSBjb25maWdTdGF0ZS5nZXRTZXR0aW5ncygnSWRlbnRpdHkuUGFzc3dvcmQnKTtcclxuXHJcbiAgICByZXR1cm4gKHBhc3N3b3JkUnVsZXNbYEFicC5JZGVudGl0eS5QYXNzd29yZC4ke2tleX1gXSB8fCAnJykudG9Mb3dlckNhc2UoKTtcclxuICB9O1xyXG59XHJcbmNvbnN0IGVycm9yTWVzc2FnZU1hcCA9IHtcclxuICBzbWFsbDogJ3Bhc3N3b3JkUmVxdWlyZXNMb3dlcicsXHJcbiAgY2FwaXRhbDogJ3Bhc3N3b3JkUmVxdWlyZXNVcHBlcicsXHJcbiAgbnVtYmVyOiAncGFzc3dvcmRSZXF1aXJlc0RpZ2l0JyxcclxuICBzcGVjaWFsOiAncGFzc3dvcmRSZXF1aXJlc05vbkFscGhhbnVtZXJpYycsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChzaG91bGRDb250YWluOiBQYXNzd29yZFJ1bGUpOiBWYWxpZGF0b3JGbiB7XHJcbiAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgIGlmICghY29udHJvbC52YWx1ZSkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgY29uc3QgdmFsdWUgPSBub3JtYWxpemVEaWFjcml0aWNzKGNvbnRyb2wudmFsdWUpO1xyXG5cclxuICAgIGNvbnN0IHJlZ2V4TWFwID0ge1xyXG4gICAgICBzbWFsbDogLy4qW2Etel0uKi8sXHJcbiAgICAgIGNhcGl0YWw6IC8uKltBLVpdLiovLFxyXG4gICAgICBudW1iZXI6IC8uKlswLTldLiovLFxyXG4gICAgICBzcGVjaWFsOiAvLipbXjAtOWEtekEtWl0uKi8sXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVnZXggPSByZWdleE1hcFtzaG91bGRDb250YWluXTtcclxuXHJcbiAgICBjb25zdCBpc1ZhbGlkID0gcmVnZXgudGVzdCh2YWx1ZSk7XHJcblxyXG4gICAgaWYgKGlzVmFsaWQpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXJyb3IgPSBlcnJvck1lc3NhZ2VNYXBbc2hvdWxkQ29udGFpbl07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgW2Vycm9yXTogdHJ1ZSxcclxuICAgIH07XHJcbiAgfTtcclxufVxyXG4iXX0=