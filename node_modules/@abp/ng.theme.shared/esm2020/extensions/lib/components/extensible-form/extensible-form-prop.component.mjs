import { EXTENSIONS_FORM_PROP, EXTENSIONS_FORM_PROP_DATA } from './../../tokens/extensions.token';
import { AbpValidators, ConfigStateService, TrackByService } from '@abp/ng.core';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Injector, Input, Optional, SkipSelf, ViewChild, } from '@angular/core';
import { ControlContainer, FormGroupDirective, Validators, } from '@angular/forms';
import { NgbDateAdapter, NgbTimeAdapter } from '@ng-bootstrap/ng-bootstrap';
import { of } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';
import { DateAdapter } from '../../adapters/date.adapter';
import { TimeAdapter } from '../../adapters/time.adapter';
import { EXTRA_PROPERTIES_KEY } from '../../constants/extra-properties';
import { FormProp } from '../../models/form-props';
import { PropData } from '../../models/props';
import { selfFactory } from '../../utils/factory.util';
import { addTypeaheadTextSuffix } from '../../utils/typeahead.util';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
import * as i4 from "@ngx-validate/core";
import * as i5 from "@ng-bootstrap/ng-bootstrap";
import * as i6 from "../date-time-picker/date-time-picker.component";
import * as i7 from "../../directives/disabled.directive";
export class ExtensibleFormPropComponent {
    constructor(cdRef, track, configState, groupDirective, injector) {
        this.cdRef = cdRef;
        this.track = track;
        this.configState = configState;
        this.injector = injector;
        this.asterisk = '';
        this.containerClassName = 'mb-3';
        this.options$ = of([]);
        this.validators = [];
        this.disabledFn = (data) => false;
        this.search = (text$) => text$
            ? text$.pipe(debounceTime(300), distinctUntilChanged(), switchMap(text => this.prop.options(this.data, text)))
            : of([]);
        this.typeaheadFormatter = (option) => option.key;
        this.form = groupDirective.form;
    }
    get disabled() {
        return this.disabledFn(this.data);
    }
    setTypeaheadValue(selectedOption) {
        this.typeaheadModel = selectedOption || { key: null, value: null };
        const { key, value } = this.typeaheadModel;
        const [keyControl, valueControl] = this.getTypeaheadControls();
        if (valueControl?.value && !value)
            valueControl.markAsDirty();
        keyControl?.setValue(key);
        valueControl?.setValue(value);
    }
    get meridian() {
        return (this.configState.getDeep('localization.currentCulture.dateTimeFormat.shortTimePattern') || '').includes('tt');
    }
    get isInvalid() {
        const control = this.form.get(this.prop.name);
        return control.touched && control.invalid;
    }
    getTypeaheadControls() {
        const { name } = this.prop;
        const extraPropName = `${EXTRA_PROPERTIES_KEY}.${name}`;
        const keyControl = this.form.get(addTypeaheadTextSuffix(extraPropName)) ||
            this.form.get(addTypeaheadTextSuffix(name));
        const valueControl = this.form.get(extraPropName) || this.form.get(name);
        return [keyControl, valueControl];
    }
    setAsterisk() {
        this.asterisk = this.validators.some(isRequired) ? '*' : '';
    }
    ngAfterViewInit() {
        if (this.first && this.fieldRef) {
            this.fieldRef.nativeElement.focus();
            this.cdRef.detectChanges();
        }
    }
    getComponent(prop) {
        if (prop.template) {
            return 'template';
        }
        switch (prop.type) {
            case "boolean" /* ePropType.Boolean */:
                return 'checkbox';
            case "date" /* ePropType.Date */:
                return 'date';
            case "datetime" /* ePropType.DateTime */:
                return 'dateTime';
            case "hidden" /* ePropType.Hidden */:
                return 'hidden';
            case "multiselect" /* ePropType.MultiSelect */:
                return 'multiselect';
            case "text" /* ePropType.Text */:
                return 'textarea';
            case "time" /* ePropType.Time */:
                return 'time';
            case "typeahead" /* ePropType.Typeahead */:
                return 'typeahead';
            default:
                return prop.options ? 'select' : 'input';
        }
    }
    getType(prop) {
        switch (prop.type) {
            case "date" /* ePropType.Date */:
            case "string" /* ePropType.String */:
                return 'text';
            case "boolean" /* ePropType.Boolean */:
                return 'checkbox';
            case "number" /* ePropType.Number */:
                return 'number';
            case "email" /* ePropType.Email */:
                return 'email';
            case "password" /* ePropType.Password */:
                return 'password';
            default:
                return 'hidden';
        }
    }
    ngOnChanges({ prop, data }) {
        const currentProp = prop?.currentValue;
        const { options, readonly, disabled, validators, className, template } = currentProp || {};
        if (template) {
            this.injectorForCustomComponent = Injector.create({
                providers: [
                    {
                        provide: EXTENSIONS_FORM_PROP,
                        useValue: currentProp,
                    },
                    {
                        provide: EXTENSIONS_FORM_PROP_DATA,
                        useValue: data?.currentValue?.record,
                    },
                    { provide: ControlContainer, useExisting: FormGroupDirective },
                ],
                parent: this.injector,
            });
        }
        if (options)
            this.options$ = options(this.data);
        if (readonly)
            this.readonly = readonly(this.data);
        if (disabled) {
            this.disabledFn = disabled;
        }
        if (validators) {
            this.validators = validators(this.data);
            this.setAsterisk();
        }
        if (className !== undefined) {
            this.containerClassName = className;
        }
        const [keyControl, valueControl] = this.getTypeaheadControls();
        if (keyControl && valueControl)
            this.typeaheadModel = { key: keyControl.value, value: valueControl.value };
    }
}
ExtensibleFormPropComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ExtensibleFormPropComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.TrackByService }, { token: i1.ConfigStateService }, { token: i2.FormGroupDirective }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
ExtensibleFormPropComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: ExtensibleFormPropComponent, selector: "abp-extensible-form-prop", inputs: { data: "data", prop: "prop", first: "first" }, viewQueries: [{ propertyName: "fieldRef", first: true, predicate: ["field"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-container\r\n  [ngSwitch]=\"getComponent(prop)\"\r\n  *abpPermission=\"prop.permission; runChangeDetection: false\"\r\n>\r\n  <ng-template ngSwitchCase=\"template\">\r\n    <ng-container *ngComponentOutlet=\"prop.template; injector: injectorForCustomComponent\">\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <div [ngClass]=\"containerClassName\" class=\"mb-3\">\r\n    <ng-template ngSwitchCase=\"input\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <input\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [autocomplete]=\"prop.autocomplete\"\r\n        [type]=\"getType(prop)\"\r\n        [abpDisabled]=\"disabled\"\r\n        [readonly]=\"readonly\"\r\n        class=\"form-control\"\r\n      />\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"hidden\">\r\n      <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"checkbox\">\r\n      <div class=\"form-check\" validationTarget>\r\n        <input\r\n          #field\r\n          [id]=\"prop.id\"\r\n          [formControlName]=\"prop.name\"\r\n          [abpDisabled]=\"disabled\"\r\n          type=\"checkbox\"\r\n          class=\"form-check-input\"\r\n        />\r\n        <ng-template\r\n          [ngTemplateOutlet]=\"label\"\r\n          [ngTemplateOutletContext]=\"{ $implicit: 'form-check-label' }\"\r\n        ></ng-template>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"select\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <select\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        class=\"form-select form-control\"\r\n      >\r\n        <option\r\n          *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n          [ngValue]=\"option.value\"\r\n        >\r\n          {{ option.key }}\r\n        </option>\r\n      </select>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"multiselect\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <select\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        multiple=\"multiple\"\r\n        class=\"form-select form-control\"\r\n      >\r\n        <option\r\n          *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n          [ngValue]=\"option.value\"\r\n        >\r\n          {{ option.key }}\r\n        </option>\r\n      </select>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"typeahead\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <div #typeahead class=\"position-relative\" validationStyle validationTarget>\r\n        <input\r\n          #field\r\n          [id]=\"prop.id\"\r\n          [autocomplete]=\"prop.autocomplete\"\r\n          [abpDisabled]=\"disabled\"\r\n          [ngbTypeahead]=\"search\"\r\n          [editable]=\"false\"\r\n          [inputFormatter]=\"typeaheadFormatter\"\r\n          [resultFormatter]=\"typeaheadFormatter\"\r\n          [ngModelOptions]=\"{ standalone: true }\"\r\n          [(ngModel)]=\"typeaheadModel\"\r\n          (selectItem)=\"setTypeaheadValue($event.item)\"\r\n          (blur)=\"setTypeaheadValue(typeaheadModel)\"\r\n          [class.is-invalid]=\"typeahead.classList.contains('is-invalid')\"\r\n          class=\"form-control\"\r\n        />\r\n        <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"date\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <input\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        (click)=\"datepicker.open()\"\r\n        (keyup.space)=\"datepicker.open()\"\r\n        ngbDatepicker\r\n        #datepicker=\"ngbDatepicker\"\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n      />\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"time\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <ngb-timepicker [formControlName]=\"prop.name\"></ngb-timepicker>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"dateTime\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <abp-date-time-picker [prop]=\"prop\" [meridian]=\"meridian\"></abp-date-time-picker>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"textarea\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <textarea\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        [readonly]=\"readonly\"\r\n        class=\"form-control\"\r\n      ></textarea>\r\n    </ng-template>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #label let-classes>\r\n  <label [htmlFor]=\"prop.id\" [ngClass]=\"classes || 'form-label'\">\r\n    <ng-container *ngIf=\"prop.displayTextResolver; else displayNameTemplate\">\r\n      {{ prop.displayTextResolver(data) | abpLocalization }}\r\n    </ng-container>\r\n    <ng-template #displayNameTemplate> {{ prop.displayName | abpLocalization }}</ng-template>\r\n    {{ asterisk }}\r\n  </label>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.SelectMultipleControlValueAccessor, selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { kind: "directive", type: i4.ValidationStyleDirective, selector: "[validationStyle]", exportAs: ["validationStyle"] }, { kind: "directive", type: i4.ValidationTargetDirective, selector: "[validationTarget]", exportAs: ["validationTarget"] }, { kind: "directive", type: i4.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { kind: "directive", type: i5.NgbInputDatepicker, selector: "input[ngbDatepicker]", inputs: ["autoClose", "datepickerClass", "dayTemplate", "dayTemplateData", "displayMonths", "firstDayOfWeek", "footerTemplate", "markDisabled", "minDate", "maxDate", "navigation", "outsideDays", "placement", "popperOptions", "restoreFocus", "showWeekNumbers", "startDate", "container", "positionTarget", "weekdays", "disabled"], outputs: ["dateSelect", "navigate", "closed"], exportAs: ["ngbDatepicker"] }, { kind: "component", type: i5.NgbTimepicker, selector: "ngb-timepicker", inputs: ["meridian", "spinners", "seconds", "hourStep", "minuteStep", "secondStep", "readonlyInputs", "size"], exportAs: ["ngbTimepicker"] }, { kind: "directive", type: i5.NgbTypeahead, selector: "input[ngbTypeahead]", inputs: ["autocomplete", "container", "editable", "focusFirst", "inputFormatter", "ngbTypeahead", "resultFormatter", "resultTemplate", "showHint", "placement", "popperOptions", "popupClass"], outputs: ["selectItem"], exportAs: ["ngbTypeahead"] }, { kind: "component", type: i6.DateTimePickerComponent, selector: "abp-date-time-picker", inputs: ["prop", "meridian"], exportAs: ["abpDateTimePicker"] }, { kind: "directive", type: i7.DisabledDirective, selector: "[abpDisabled]", inputs: ["abpDisabled"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.LocalizationPipe, name: "abpLocalization" }], viewProviders: [
        {
            provide: ControlContainer,
            useFactory: selfFactory,
            deps: [[new Optional(), new SkipSelf(), ControlContainer]],
        },
        { provide: NgbDateAdapter, useClass: DateAdapter },
        { provide: NgbTimeAdapter, useClass: TimeAdapter },
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ExtensibleFormPropComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-extensible-form-prop', changeDetection: ChangeDetectionStrategy.OnPush, viewProviders: [
                        {
                            provide: ControlContainer,
                            useFactory: selfFactory,
                            deps: [[new Optional(), new SkipSelf(), ControlContainer]],
                        },
                        { provide: NgbDateAdapter, useClass: DateAdapter },
                        { provide: NgbTimeAdapter, useClass: TimeAdapter },
                    ], template: "<ng-container\r\n  [ngSwitch]=\"getComponent(prop)\"\r\n  *abpPermission=\"prop.permission; runChangeDetection: false\"\r\n>\r\n  <ng-template ngSwitchCase=\"template\">\r\n    <ng-container *ngComponentOutlet=\"prop.template; injector: injectorForCustomComponent\">\r\n    </ng-container>\r\n  </ng-template>\r\n\r\n  <div [ngClass]=\"containerClassName\" class=\"mb-3\">\r\n    <ng-template ngSwitchCase=\"input\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <input\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [autocomplete]=\"prop.autocomplete\"\r\n        [type]=\"getType(prop)\"\r\n        [abpDisabled]=\"disabled\"\r\n        [readonly]=\"readonly\"\r\n        class=\"form-control\"\r\n      />\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"hidden\">\r\n      <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"checkbox\">\r\n      <div class=\"form-check\" validationTarget>\r\n        <input\r\n          #field\r\n          [id]=\"prop.id\"\r\n          [formControlName]=\"prop.name\"\r\n          [abpDisabled]=\"disabled\"\r\n          type=\"checkbox\"\r\n          class=\"form-check-input\"\r\n        />\r\n        <ng-template\r\n          [ngTemplateOutlet]=\"label\"\r\n          [ngTemplateOutletContext]=\"{ $implicit: 'form-check-label' }\"\r\n        ></ng-template>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"select\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <select\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        class=\"form-select form-control\"\r\n      >\r\n        <option\r\n          *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n          [ngValue]=\"option.value\"\r\n        >\r\n          {{ option.key }}\r\n        </option>\r\n      </select>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"multiselect\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <select\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        multiple=\"multiple\"\r\n        class=\"form-select form-control\"\r\n      >\r\n        <option\r\n          *ngFor=\"let option of options$ | async; trackBy: track.by('value')\"\r\n          [ngValue]=\"option.value\"\r\n        >\r\n          {{ option.key }}\r\n        </option>\r\n      </select>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"typeahead\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <div #typeahead class=\"position-relative\" validationStyle validationTarget>\r\n        <input\r\n          #field\r\n          [id]=\"prop.id\"\r\n          [autocomplete]=\"prop.autocomplete\"\r\n          [abpDisabled]=\"disabled\"\r\n          [ngbTypeahead]=\"search\"\r\n          [editable]=\"false\"\r\n          [inputFormatter]=\"typeaheadFormatter\"\r\n          [resultFormatter]=\"typeaheadFormatter\"\r\n          [ngModelOptions]=\"{ standalone: true }\"\r\n          [(ngModel)]=\"typeaheadModel\"\r\n          (selectItem)=\"setTypeaheadValue($event.item)\"\r\n          (blur)=\"setTypeaheadValue(typeaheadModel)\"\r\n          [class.is-invalid]=\"typeahead.classList.contains('is-invalid')\"\r\n          class=\"form-control\"\r\n        />\r\n        <input [formControlName]=\"prop.name\" type=\"hidden\" />\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"date\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <input\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        (click)=\"datepicker.open()\"\r\n        (keyup.space)=\"datepicker.open()\"\r\n        ngbDatepicker\r\n        #datepicker=\"ngbDatepicker\"\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n      />\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"time\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <ngb-timepicker [formControlName]=\"prop.name\"></ngb-timepicker>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"dateTime\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <abp-date-time-picker [prop]=\"prop\" [meridian]=\"meridian\"></abp-date-time-picker>\r\n    </ng-template>\r\n\r\n    <ng-template ngSwitchCase=\"textarea\">\r\n      <ng-template [ngTemplateOutlet]=\"label\"></ng-template>\r\n      <textarea\r\n        #field\r\n        [id]=\"prop.id\"\r\n        [formControlName]=\"prop.name\"\r\n        [abpDisabled]=\"disabled\"\r\n        [readonly]=\"readonly\"\r\n        class=\"form-control\"\r\n      ></textarea>\r\n    </ng-template>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #label let-classes>\r\n  <label [htmlFor]=\"prop.id\" [ngClass]=\"classes || 'form-label'\">\r\n    <ng-container *ngIf=\"prop.displayTextResolver; else displayNameTemplate\">\r\n      {{ prop.displayTextResolver(data) | abpLocalization }}\r\n    </ng-container>\r\n    <ng-template #displayNameTemplate> {{ prop.displayName | abpLocalization }}</ng-template>\r\n    {{ asterisk }}\r\n  </label>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TrackByService }, { type: i1.ConfigStateService }, { type: i2.FormGroupDirective }, { type: i0.Injector }]; }, propDecorators: { data: [{
                type: Input
            }], prop: [{
                type: Input
            }], first: [{
                type: Input
            }], fieldRef: [{
                type: ViewChild,
                args: ['field']
            }] } });
function isRequired(validator) {
    return (validator === Validators.required ||
        validator === AbpValidators.required ||
        validator.name === 'required');
}
//# sourceMappingURL=data:application/json;base64,