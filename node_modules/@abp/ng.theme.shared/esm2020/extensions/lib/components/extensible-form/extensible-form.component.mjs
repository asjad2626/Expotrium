import { TrackByService } from '@abp/ng.core';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Input, Optional, QueryList, SkipSelf, ViewChildren, } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { EXTRA_PROPERTIES_KEY } from '../../constants/extra-properties';
import { GroupedFormPropList } from '../../models/form-props';
import { ExtensionsService } from '../../services/extensions.service';
import { EXTENSIONS_IDENTIFIER } from '../../tokens/extensions.token';
import { selfFactory } from '../../utils/factory.util';
import { ExtensibleFormPropComponent } from './extensible-form-prop.component';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
import * as i2 from "@angular/forms";
import * as i3 from "../../services/extensions.service";
import * as i4 from "@angular/common";
import * as i5 from "@ngx-validate/core";
import * as i6 from "./extensible-form-prop.component";
import * as i7 from "../../directives/prop-data.directive";
export class ExtensibleFormComponent {
    constructor(cdRef, track, container, extensions, identifier) {
        this.cdRef = cdRef;
        this.track = track;
        this.container = container;
        this.extensions = extensions;
        this.identifier = identifier;
        this.extraPropertiesKey = EXTRA_PROPERTIES_KEY;
    }
    set selectedRecord(record) {
        const type = !record || JSON.stringify(record) === '{}' ? 'create' : 'edit';
        const propList = this.extensions[`${type}FormProps`].get(this.identifier).props;
        this.groupedPropList = this.createGroupedList(propList);
        this.record = record;
    }
    createGroupedList(propList) {
        const groupedFormPropList = new GroupedFormPropList();
        propList.forEach(item => {
            groupedFormPropList.addItem(item.value);
        });
        return groupedFormPropList;
    }
    get form() {
        return (this.container ? this.container.control : { controls: {} });
    }
    get extraProperties() {
        return (this.form.controls.extraProperties || { controls: {} });
    }
}
ExtensibleFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ExtensibleFormComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.TrackByService }, { token: i2.ControlContainer }, { token: i3.ExtensionsService }, { token: EXTENSIONS_IDENTIFIER }], target: i0.ɵɵFactoryTarget.Component });
ExtensibleFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: ExtensibleFormComponent, selector: "abp-extensible-form", inputs: { selectedRecord: "selectedRecord" }, viewQueries: [{ propertyName: "formProps", predicate: ExtensibleFormPropComponent, descendants: true }], exportAs: ["abpExtensibleForm"], ngImport: i0, template: "<ng-container *ngIf=\"form\">\r\n\r\n  <ng-container *ngFor=\"let groupedProp of groupedPropList.items\">\r\n    <ng-container *abpPropData=\"let data; fromList: groupedProp.formPropList; withRecord: record\">\r\n\r\n      <div *ngIf=\"groupedProp.group?.className; else withoutClassName\"\r\n           [class]=\"groupedProp.group?.className\" [attr.data-name]=\"groupedProp.group?.className\">\r\n        <ng-container [ngTemplateOutlet]=\"propListTemplate\" [ngTemplateOutletContext]=\"{groupedProp:groupedProp,data:data}\">\r\n        </ng-container>\r\n      </div>\r\n\r\n      <ng-template #withoutClassName>\r\n        <ng-container [ngTemplateOutlet]=\"propListTemplate\" [ngTemplateOutletContext]=\"{groupedProp:groupedProp,data:data}\">\r\n        </ng-container>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n  </ng-container>\r\n</ng-container>\r\n\r\n\r\n<ng-template let-groupedProp=\"groupedProp\" let-data=\"data\" #propListTemplate>\r\n  <ng-container *ngFor=\"let prop of groupedProp.formPropList; let first = first; trackBy: track.by('name')\">\r\n    <ng-container *ngIf=\"prop.visible(data)\">\r\n      <ng-container\r\n        [formGroupName]=\"extraPropertiesKey\"\r\n        *ngIf=\"extraProperties.controls[prop.name]; else tempDefault\"\r\n      >\r\n        <abp-extensible-form-prop [prop]=\"prop\" [data]=\"data\"\r\n                                  [class]=\"prop.className\">\r\n        </abp-extensible-form-prop>\r\n      </ng-container>\r\n\r\n      <ng-template #tempDefault>\r\n        <abp-extensible-form-prop\r\n          [class]=\"prop.className\"\r\n          *ngIf=\"form.get(prop.name)\"\r\n          [prop]=\"prop\"\r\n          [data]=\"data\"\r\n          [first]=\"first\"\r\n        ></abp-extensible-form-prop>\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { kind: "directive", type: i5.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "component", type: i6.ExtensibleFormPropComponent, selector: "abp-extensible-form-prop", inputs: ["data", "prop", "first"] }, { kind: "directive", type: i7.PropDataDirective, selector: "[abpPropData]", inputs: ["abpPropDataFromList", "abpPropDataWithRecord", "abpPropDataAtIndex"], exportAs: ["abpPropData"] }], viewProviders: [
        {
            provide: ControlContainer,
            useFactory: selfFactory,
            deps: [[new Optional(), new SkipSelf(), ControlContainer]],
        },
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ExtensibleFormComponent, decorators: [{
            type: Component,
            args: [{ exportAs: 'abpExtensibleForm', selector: 'abp-extensible-form', changeDetection: ChangeDetectionStrategy.OnPush, viewProviders: [
                        {
                            provide: ControlContainer,
                            useFactory: selfFactory,
                            deps: [[new Optional(), new SkipSelf(), ControlContainer]],
                        },
                    ], template: "<ng-container *ngIf=\"form\">\r\n\r\n  <ng-container *ngFor=\"let groupedProp of groupedPropList.items\">\r\n    <ng-container *abpPropData=\"let data; fromList: groupedProp.formPropList; withRecord: record\">\r\n\r\n      <div *ngIf=\"groupedProp.group?.className; else withoutClassName\"\r\n           [class]=\"groupedProp.group?.className\" [attr.data-name]=\"groupedProp.group?.className\">\r\n        <ng-container [ngTemplateOutlet]=\"propListTemplate\" [ngTemplateOutletContext]=\"{groupedProp:groupedProp,data:data}\">\r\n        </ng-container>\r\n      </div>\r\n\r\n      <ng-template #withoutClassName>\r\n        <ng-container [ngTemplateOutlet]=\"propListTemplate\" [ngTemplateOutletContext]=\"{groupedProp:groupedProp,data:data}\">\r\n        </ng-container>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n  </ng-container>\r\n</ng-container>\r\n\r\n\r\n<ng-template let-groupedProp=\"groupedProp\" let-data=\"data\" #propListTemplate>\r\n  <ng-container *ngFor=\"let prop of groupedProp.formPropList; let first = first; trackBy: track.by('name')\">\r\n    <ng-container *ngIf=\"prop.visible(data)\">\r\n      <ng-container\r\n        [formGroupName]=\"extraPropertiesKey\"\r\n        *ngIf=\"extraProperties.controls[prop.name]; else tempDefault\"\r\n      >\r\n        <abp-extensible-form-prop [prop]=\"prop\" [data]=\"data\"\r\n                                  [class]=\"prop.className\">\r\n        </abp-extensible-form-prop>\r\n      </ng-container>\r\n\r\n      <ng-template #tempDefault>\r\n        <abp-extensible-form-prop\r\n          [class]=\"prop.className\"\r\n          *ngIf=\"form.get(prop.name)\"\r\n          [prop]=\"prop\"\r\n          [data]=\"data\"\r\n          [first]=\"first\"\r\n        ></abp-extensible-form-prop>\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.TrackByService }, { type: i2.ControlContainer }, { type: i3.ExtensionsService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [EXTENSIONS_IDENTIFIER]
                }] }]; }, propDecorators: { formProps: [{
                type: ViewChildren,
                args: [ExtensibleFormPropComponent]
            }], selectedRecord: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,