import { Prop, PropData, PropList, Props, PropsFactory, } from './props';
export class FormPropList extends PropList {
}
export class FormProps extends Props {
    constructor() {
        super(...arguments);
        this._ctor = FormPropList;
    }
}
export class GroupedFormPropList {
    constructor() {
        this.items = [];
    }
    addItem(item) {
        const groupName = item.group?.name;
        let group = this.items.find(i => i.group?.name === groupName);
        if (group) {
            group.formPropList.addTail(item);
        }
        else {
            group = {
                formPropList: new FormPropList(),
                group: item.group,
            };
            group.formPropList.addHead(item);
            this.items.push(group);
        }
    }
}
export class CreateFormPropsFactory extends PropsFactory {
    constructor() {
        super(...arguments);
        this._ctor = FormProps;
    }
}
export class EditFormPropsFactory extends PropsFactory {
    constructor() {
        super(...arguments);
        this._ctor = FormProps;
    }
}
export class FormProp extends Prop {
    constructor(options) {
        super(options.type, options.name, options.displayName, options.permission, options.visible, options.isExtra, options.template, options.className);
        this.group = options.group;
        this.className = options.className;
        this.asyncValidators = options.asyncValidators || (_ => []);
        this.validators = options.validators || (_ => []);
        this.disabled = options.disabled || (_ => false);
        this.readonly = options.readonly || (_ => false);
        this.autocomplete = options.autocomplete || 'off';
        this.options = options.options;
        this.id = options.id || options.name;
        const defaultValue = options.defaultValue;
        this.defaultValue = isFalsyValue(defaultValue) ? defaultValue : defaultValue || null;
        this.displayTextResolver = options.displayTextResolver;
    }
    static create(options) {
        return new FormProp(options);
    }
    static createMany(arrayOfOptions) {
        return arrayOfOptions.map(FormProp.create);
    }
}
export class FormPropData extends PropData {
    constructor(injector, record) {
        super();
        this.record = record;
        this.getInjected = injector.get.bind(injector);
    }
}
function isFalsyValue(defaultValue) {
    return [0, '', false].indexOf(defaultValue) > -1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1wcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lLXNoYXJlZC9leHRlbnNpb25zL3NyYy9saWIvbW9kZWxzL2Zvcm0tcHJvcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUNMLElBQUksRUFJSixRQUFRLEVBRVIsUUFBUSxFQUVSLEtBQUssRUFDTCxZQUFZLEdBQ2IsTUFBTSxTQUFTLENBQUM7QUFFakIsTUFBTSxPQUFPLFlBQXNCLFNBQVEsUUFBd0I7Q0FBRztBQUV0RSxNQUFNLE9BQU8sU0FBbUIsU0FBUSxLQUFzQjtJQUE5RDs7UUFDWSxVQUFLLEdBQTBCLFlBQVksQ0FBQztJQUN4RCxDQUFDO0NBQUE7QUFPRCxNQUFNLE9BQU8sbUJBQW1CO0lBQWhDO1FBQ2tCLFVBQUssR0FBMEIsRUFBRSxDQUFDO0lBZXBELENBQUM7SUFkQyxPQUFPLENBQUMsSUFBaUI7UUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUM7UUFDbkMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztRQUM5RCxJQUFJLEtBQUssRUFBRTtZQUNULEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTCxLQUFLLEdBQUc7Z0JBQ04sWUFBWSxFQUFFLElBQUksWUFBWSxFQUFFO2dCQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7YUFDbEIsQ0FBQztZQUNGLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NB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bmplY3RvciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBc3luY1ZhbGlkYXRvckZuLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBPIH0gZnJvbSAndHMtdG9vbGJlbHQnO1xyXG5pbXBvcnQge1xyXG4gIFByb3AsXHJcbiAgUHJvcENhbGxiYWNrLFxyXG4gIFByb3BDb250cmlidXRvckNhbGxiYWNrLFxyXG4gIFByb3BDb250cmlidXRvckNhbGxiYWNrcyxcclxuICBQcm9wRGF0YSxcclxuICBQcm9wRGlzcGxheVRleHRSZXNvbHZlcixcclxuICBQcm9wTGlzdCxcclxuICBQcm9wUHJlZGljYXRlLFxyXG4gIFByb3BzLFxyXG4gIFByb3BzRmFjdG9yeSxcclxufSBmcm9tICcuL3Byb3BzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtUHJvcExpc3Q8UiA9IGFueT4gZXh0ZW5kcyBQcm9wTGlzdDxSLCBGb3JtUHJvcDxSPj4ge31cclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtUHJvcHM8UiA9IGFueT4gZXh0ZW5kcyBQcm9wczxGb3JtUHJvcExpc3Q8Uj4+IHtcclxuICBwcm90ZWN0ZWQgX2N0b3I6IFR5cGU8Rm9ybVByb3BMaXN0PFI+PiA9IEZvcm1Qcm9wTGlzdDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGb3JtUHJvcEdyb3VwIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR3JvdXBlZEZvcm1Qcm9wTGlzdDxSID0gYW55PiB7XHJcbiAgcHVibGljIHJlYWRvbmx5IGl0ZW1zOiBHcm91cGVkRm9ybVByb3BJdGVtW10gPSBbXTtcclxuICBhZGRJdGVtKGl0ZW06IEZvcm1Qcm9wPFI+KSB7XHJcbiAgICBjb25zdCBncm91cE5hbWUgPSBpdGVtLmdyb3VwPy5uYW1lO1xyXG4gICAgbGV0IGdyb3VwID0gdGhpcy5pdGVtcy5maW5kKGkgPT4gaS5ncm91cD8ubmFtZSA9PT0gZ3JvdXBOYW1lKTtcclxuICAgIGlmIChncm91cCkge1xyXG4gICAgICBncm91cC5mb3JtUHJvcExpc3QuYWRkVGFpbChpdGVtKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGdyb3VwID0ge1xyXG4gICAgICAgIGZvcm1Qcm9wTGlzdDogbmV3IEZvcm1Qcm9wTGlzdCgpLFxyXG4gICAgICAgIGdyb3VwOiBpdGVtLmdyb3VwLFxyXG4gICAgICB9O1xyXG4gICAgICBncm91cC5mb3JtUHJvcExpc3QuYWRkSGVhZChpdGVtKTtcclxuICAgICAgdGhpcy5pdGVtcy5wdXNoKGdyb3VwKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgR3JvdXBlZEZvcm1Qcm9wSXRlbSB7XHJcbiAgZ3JvdXA6IEZvcm1Qcm9wR3JvdXA7XHJcbiAgZm9ybVByb3BMaXN0OiBGb3JtUHJvcExpc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDcmVhdGVGb3JtUHJvcHNGYWN0b3J5PFIgPSBhbnk+IGV4dGVuZHMgUHJvcHNGYWN0b3J5PEZvcm1Qcm9wczxSPj4ge1xyXG4gIHByb3RlY3RlZCBfY3RvcjogVHlwZTxGb3JtUHJvcHM8Uj4+ID0gRm9ybVByb3BzO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRWRpdEZvcm1Qcm9wc0ZhY3Rvcnk8UiA9IGFueT4gZXh0ZW5kcyBQcm9wc0ZhY3Rvcnk8Rm9ybVByb3BzPFI+PiB7XHJcbiAgcHJvdGVjdGVkIF9jdG9yOiBUeXBlPEZvcm1Qcm9wczxSPj4gPSBGb3JtUHJvcHM7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtUHJvcDxSID0gYW55PiBleHRlbmRzIFByb3A8Uj4ge1xyXG4gIHJlYWRvbmx5IHZhbGlkYXRvcnM6IFByb3BDYWxsYmFjazxSLCBWYWxpZGF0b3JGbltdPjtcclxuICByZWFkb25seSBhc3luY1ZhbGlkYXRvcnM6IFByb3BDYWxsYmFjazxSLCBBc3luY1ZhbGlkYXRvckZuW10+O1xyXG4gIHJlYWRvbmx5IGRpc2FibGVkOiBQcm9wUHJlZGljYXRlPFI+O1xyXG4gIHJlYWRvbmx5IHJlYWRvbmx5OiBQcm9wUHJlZGljYXRlPFI+O1xyXG4gIHJlYWRvbmx5IGF1dG9jb21wbGV0ZTogc3RyaW5nO1xyXG4gIHJlYWRvbmx5IGRlZmF1bHRWYWx1ZTogYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZyB8IERhdGU7XHJcbiAgcmVhZG9ubHkgb3B0aW9uczogUHJvcENhbGxiYWNrPFIsIE9ic2VydmFibGU8QUJQLk9wdGlvbjxhbnk+W10+PiB8IHVuZGVmaW5lZDtcclxuICByZWFkb25seSBpZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gIHJlYWRvbmx5IHRlbXBsYXRlPzogVHlwZTxhbnk+O1xyXG4gIHJlYWRvbmx5IGNsYXNzTmFtZT86IHN0cmluZztcclxuICByZWFkb25seSBncm91cD86IEZvcm1Qcm9wR3JvdXAgfCB1bmRlZmluZWQ7XHJcbiAgcmVhZG9ubHkgZGlzcGxheVRleHRSZXNvbHZlcj86IFByb3BEaXNwbGF5VGV4dFJlc29sdmVyPFI+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBGb3JtUHJvcE9wdGlvbnM8Uj4pIHtcclxuICAgIHN1cGVyKFxyXG4gICAgICBvcHRpb25zLnR5cGUsXHJcbiAgICAgIG9wdGlvbnMubmFtZSxcclxuICAgICAgb3B0aW9ucy5kaXNwbGF5TmFtZSxcclxuICAgICAgb3B0aW9ucy5wZXJtaXNzaW9uLFxyXG4gICAgICBvcHRpb25zLnZpc2libGUsXHJcbiAgICAgIG9wdGlvbnMuaXNFeHRyYSxcclxuICAgICAgb3B0aW9ucy50ZW1wbGF0ZSxcclxuICAgICAgb3B0aW9ucy5jbGFzc05hbWUsXHJcbiAgICApO1xyXG4gICAgdGhpcy5ncm91cCA9IG9wdGlvbnMuZ3JvdXA7XHJcbiAgICB0aGlzLmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xhc3NOYW1lO1xyXG5cclxuICAgIHRoaXMuYXN5bmNWYWxpZGF0b3JzID0gb3B0aW9ucy5hc3luY1ZhbGlkYXRvcnMgfHwgKF8gPT4gW10pO1xyXG4gICAgdGhpcy52YWxpZGF0b3JzID0gb3B0aW9ucy52YWxpZGF0b3JzIHx8IChfID0+IFtdKTtcclxuICAgIHRoaXMuZGlzYWJsZWQgPSBvcHRpb25zLmRpc2FibGVkIHx8IChfID0+IGZhbHNlKTtcclxuICAgIHRoaXMucmVhZG9ubHkgPSBvcHRpb25zLnJlYWRvbmx5IHx8IChfID0+IGZhbHNlKTtcclxuICAgIHRoaXMuYXV0b2NvbXBsZXRlID0gb3B0aW9ucy5hdXRvY29tcGxldGUgfHwgJ29mZic7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnM7XHJcbiAgICB0aGlzLmlkID0gb3B0aW9ucy5pZCB8fCBvcHRpb25zLm5hbWU7XHJcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZTtcclxuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gaXNGYWxzeVZhbHVlKGRlZmF1bHRWYWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiBkZWZhdWx0VmFsdWUgfHwgbnVsbDtcclxuICAgIHRoaXMuZGlzcGxheVRleHRSZXNvbHZlciA9IG9wdGlvbnMuZGlzcGxheVRleHRSZXNvbHZlcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGU8UiA9IGFueT4ob3B0aW9uczogRm9ybVByb3BPcHRpb25zPFI+KSB7XHJcbiAgICByZXR1cm4gbmV3IEZvcm1Qcm9wPFI+KG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZU1hbnk8UiA9IGFueT4oYXJyYXlPZk9wdGlvbnM6IEZvcm1Qcm9wT3B0aW9uczxSPltdKSB7XHJcbiAgICByZXR1cm4gYXJyYXlPZk9wdGlvbnMubWFwKEZvcm1Qcm9wLmNyZWF0ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRm9ybVByb3BEYXRhPFIgPSBhbnk+IGV4dGVuZHMgUHJvcERhdGE8Uj4ge1xyXG4gIGdldEluamVjdGVkOiBQcm9wRGF0YTxSPlsnZ2V0SW5qZWN0ZWQnXTtcclxuXHJcbiAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yLCBwdWJsaWMgcmVhZG9ubHkgcmVjb3JkOiBSKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuZ2V0SW5qZWN0ZWQgPSBpbmplY3Rvci5nZXQuYmluZChpbmplY3Rvcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBGb3JtUHJvcE9wdGlvbnM8UiA9IGFueT4gPSBPLk9wdGlvbmFsPFxyXG4gIE8uV3JpdGFibGU8Rm9ybVByb3A8Uj4+LFxyXG4gIHwgJ3Blcm1pc3Npb24nXHJcbiAgfCAndmlzaWJsZSdcclxuICB8ICdkaXNwbGF5TmFtZSdcclxuICB8ICdpc0V4dHJhJ1xyXG4gIHwgJ3ZhbGlkYXRvcnMnXHJcbiAgfCAnYXN5bmNWYWxpZGF0b3JzJ1xyXG4gIHwgJ2Rpc2FibGVkJ1xyXG4gIHwgJ3JlYWRvbmx5J1xyXG4gIHwgJ2F1dG9jb21wbGV0ZSdcclxuICB8ICdkZWZhdWx0VmFsdWUnXHJcbiAgfCAnb3B0aW9ucydcclxuICB8ICdpZCdcclxuICB8ICdkaXNwbGF5VGV4dFJlc29sdmVyJ1xyXG4+O1xyXG5cclxuZXhwb3J0IHR5cGUgQ3JlYXRlRm9ybVByb3BEZWZhdWx0czxSID0gYW55PiA9IFJlY29yZDxzdHJpbmcsIEZvcm1Qcm9wPFI+W10+O1xyXG5leHBvcnQgdHlwZSBDcmVhdGVGb3JtUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2s8UiA9IGFueT4gPSBQcm9wQ29udHJpYnV0b3JDYWxsYmFjazxGb3JtUHJvcExpc3Q8Uj4+O1xyXG5leHBvcnQgdHlwZSBDcmVhdGVGb3JtUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2tzPFIgPSBhbnk+ID0gUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2tzPEZvcm1Qcm9wTGlzdDxSPj47XHJcbmV4cG9ydCB0eXBlIEVkaXRGb3JtUHJvcERlZmF1bHRzPFIgPSBhbnk+ID0gUmVjb3JkPHN0cmluZywgRm9ybVByb3A8Uj5bXT47XHJcbmV4cG9ydCB0eXBlIEVkaXRGb3JtUHJvcENvbnRyaWJ1dG9yQ2FsbGJhY2s8UiA9IGFueT4gPSBQcm9wQ29udHJpYnV0b3JDYWxsYmFjazxGb3JtUHJvcExpc3Q8Uj4+O1xyXG5leHBvcnQgdHlwZSBFZGl0Rm9ybVByb3BDb250cmlidXRvckNhbGxiYWNrczxSID0gYW55PiA9IFByb3BDb250cmlidXRvckNhbGxiYWNrczxGb3JtUHJvcExpc3Q8Uj4+O1xyXG5cclxuZnVuY3Rpb24gaXNGYWxzeVZhbHVlKGRlZmF1bHRWYWx1ZTogRm9ybVByb3BbJ2RlZmF1bHRWYWx1ZSddKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIFswLCAnJywgZmFsc2VdLmluZGV4T2YoZGVmYXVsdFZhbHVlIGFzIGFueSkgPiAtMTtcclxufVxyXG4iXX0=