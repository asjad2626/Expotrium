import { ABP, ConfigStateService, TrackByService } from '@abp/ng.core';
import { AfterViewInit, ChangeDetectorRef, Injector, OnChanges, SimpleChanges } from '@angular/core';
import { FormGroupDirective, ValidatorFn } from '@angular/forms';
import { Observable } from 'rxjs';
import { FormProp } from '../../models/form-props';
import { PropData } from '../../models/props';
import * as i0 from "@angular/core";
export declare class ExtensibleFormPropComponent implements OnChanges, AfterViewInit {
    readonly cdRef: ChangeDetectorRef;
    readonly track: TrackByService;
    protected configState: ConfigStateService;
    private injector;
    data: PropData;
    prop: FormProp;
    first?: boolean;
    private fieldRef;
    injectorForCustomComponent: Injector;
    asterisk: string;
    containerClassName: string;
    options$: Observable<ABP.Option<any>[]>;
    validators: ValidatorFn[];
    readonly: boolean;
    typeaheadModel: any;
    private readonly form;
    disabledFn: (data: PropData) => boolean;
    get disabled(): boolean;
    setTypeaheadValue(selectedOption: ABP.Option<string>): void;
    search: (text$: Observable<string>) => Observable<any[]>;
    typeaheadFormatter: (option: ABP.Option<any>) => string;
    get meridian(): any;
    get isInvalid(): boolean;
    constructor(cdRef: ChangeDetectorRef, track: TrackByService, configState: ConfigStateService, groupDirective: FormGroupDirective, injector: Injector);
    private getTypeaheadControls;
    private setAsterisk;
    ngAfterViewInit(): void;
    getComponent(prop: FormProp): string;
    getType(prop: FormProp): string;
    ngOnChanges({ prop, data }: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExtensibleFormPropComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExtensibleFormPropComponent, "abp-extensible-form-prop", never, { "data": "data"; "prop": "prop"; "first": "first"; }, {}, never, never, false, never>;
}
