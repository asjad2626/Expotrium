"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Body = exports.Signature = exports.Method = void 0;
const enums_1 = require("../enums");
const text_1 = require("../utils/text");
const methods_1 = require("../utils/methods");
const constants_1 = require("../constants");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const shouldQuote = require('should-quote');
class Method {
    constructor(options) {
        Object.assign(this, options);
    }
}
exports.Method = Method;
class Signature {
    constructor(options) {
        this.generics = '';
        this.modifier = enums_1.eMethodModifier.Public;
        this.parameters = [];
        this.returnType = '';
        Object.assign(this, options);
    }
}
exports.Signature = Signature;
class Body {
    constructor(options) {
        this.params = [];
        this.requestType = 'any';
        this.registerActionParameter = (param) => {
            const { bindingSourceId, descriptorName, jsonName, name, nameOnMethod } = param;
            const camelName = (0, text_1.camel)(name);
            const paramName = jsonName || camelName;
            let value = (0, text_1.camelizeHyphen)(nameOnMethod);
            if (descriptorName) {
                value = shouldQuote(paramName)
                    ? `${descriptorName}['${paramName}']`
                    : `${descriptorName}.${paramName}`;
            }
            switch (bindingSourceId) {
                case enums_1.eBindingSourceId.Model:
                case enums_1.eBindingSourceId.Query:
                    this.params.push(paramName === value ? value : `${(0, methods_1.getParamName)(paramName)}: ${value}`);
                    break;
                case enums_1.eBindingSourceId.Body:
                    this.body = value;
                    break;
                case enums_1.eBindingSourceId.Path:
                    // eslint-disable-next-line no-case-declarations
                    const regex = new RegExp('{(' + paramName + '|' + camelName + '|' + name + ')}', 'g');
                    this.url = this.url.replace(regex, '${' + value + '}');
                    break;
                default:
                    break;
            }
        };
        Object.assign(this, options);
        this.setUrlQuotes();
    }
    isBlobMethod() {
        return this.responseTypeWithNamespace === constants_1.VOLO_REMOTE_STREAM_CONTENT;
    }
    setUrlQuotes() {
        this.url = /{/.test(this.url) ? `\`/${this.url}\`` : `'/${this.url}'`;
    }
}
exports.Body = Body;
//# sourceMappingURL=method.js.map