"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTargetPath = exports.getWorkspacePath = exports.getWorkspaceSchema = exports.resolveProject = exports.readWorkspaceSchema = exports.getFirstApplication = exports.readEnvironment = exports.isLibrary = void 0;
/* eslint-disable no-empty */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const angular_1 = require("./angular");
const ast_1 = require("./ast");
const common_1 = require("./common");
const symbols_1 = require("../constants/symbols");
const json_file_1 = require("@angular/cli/src/utilities/json-file");
function isLibrary(project) {
    return project.extensions['projectType'] === angular_1.ProjectType.Library;
}
exports.isLibrary = isLibrary;
function readEnvironment(tree, project) {
    if (isLibrary(project))
        return undefined;
    const srcPath = project.sourceRoot || `${project.root}/src`;
    const envPath = srcPath + '/environments/environment.ts';
    const source = (0, common_1.readFileInTree)(tree, envPath);
    return (0, ast_1.findEnvironmentExpression)(source);
}
exports.readEnvironment = readEnvironment;
function getFirstApplication(tree) {
    const workspace = readWorkspaceSchema(tree);
    const [name, project] = Object.entries(workspace.projects).find(([_, project]) => project.projectType === angular_1.ProjectType.Application) || [];
    return { name, project };
}
exports.getFirstApplication = getFirstApplication;
function readWorkspaceSchema(tree) {
    if (!tree.exists('/angular.json'))
        throw new schematics_1.SchematicsException("[Workspace Not Found] Make sure you are running schematics at the root directory of your workspace and it has an angular.json file." /* Exception.NoWorkspace */);
    let workspaceSchema;
    try {
        workspaceSchema = getWorkspaceSchema(tree);
    }
    catch (_) {
        throw new schematics_1.SchematicsException("[Invalid Workspace] The angular.json should be a valid JSON file." /* Exception.InvalidWorkspace */);
    }
    return workspaceSchema;
}
exports.readWorkspaceSchema = readWorkspaceSchema;
// eslint-disable-next-line
// @typescript-eslint/no-explicit-any
async function resolveProject(tree, name, 
// eslint-disable-next-line
// @typescript-eslint/no-explicit-any
notFoundValue = symbols_1.NOT_FOUND_VALUE) {
    name = name || readWorkspaceSchema(tree).defaultProject || getFirstApplication(tree).name;
    const workspace = await (0, angular_1.getWorkspace)(tree);
    let definition;
    try {
        definition = workspace.projects.get(name);
    }
    catch (_) { }
    if (!definition)
        try {
            name = core_1.strings.dasherize(name);
            definition = workspace.projects.get(name);
        }
        catch (_) { }
    if (!definition)
        try {
            name = core_1.strings.camelize(name);
            definition = workspace.projects.get(name);
        }
        catch (_) { }
    if (!definition)
        try {
            name = core_1.strings.classify(name);
            definition = workspace.projects.get(name);
        }
        catch (_) { }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    if (!definition && notFoundValue !== symbols_1.NOT_FOUND_VALUE) {
        return notFoundValue;
    }
    if (!definition)
        throw new schematics_1.SchematicsException("[Project Not Found] Either define a default project in your workspace or specify the project name in schematics options." /* Exception.NoProject */);
    return { name, definition };
}
exports.resolveProject = resolveProject;
function getWorkspaceSchema(host) {
    const path = getWorkspacePath(host);
    const configBuffer = host.read(path);
    if (configBuffer === null) {
        throw new schematics_1.SchematicsException(`Could not find (${path})`);
    }
    const content = configBuffer.toString();
    // eslint-disable-next-line
    // @typescript-eslint/no-explicit-any
    return (0, json_file_1.parseJson)(content);
}
exports.getWorkspaceSchema = getWorkspaceSchema;
function getWorkspacePath(host) {
    const possibleFiles = ['/angular.json', '/.angular.json'];
    const path = possibleFiles.filter(path => host.exists(path))[0];
    return path;
}
exports.getWorkspacePath = getWorkspacePath;
/**
 * Build a default project path for generating.
 * @param project The project which will have its default path generated.
 * @param entryPoint The secondary-entry-point.
 */
function buildTargetPath(project, entryPoint) {
    if (entryPoint) {
        return `${project.root}/${entryPoint}/src`;
    }
    return (0, angular_1.buildDefaultPath)(project);
}
exports.buildTargetPath = buildTargetPath;
//# sourceMappingURL=workspace.js.map