"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.styleCompareFn = exports.removeThemeBasedStyles = exports.getProjectTargetOptions = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("../../utils");
const style_map_1 = require("./style-map");
function default_1(_options) {
    return async (_, __) => {
        const targetThemeName = _options.name;
        const selectedProject = _options.targetProject;
        if (!targetThemeName) {
            throw new schematics_1.SchematicsException('The theme name does not selected');
        }
        return (0, utils_1.updateWorkspace)(storedWorkspace => {
            updateProjectStyle(selectedProject, storedWorkspace, targetThemeName);
        });
    };
}
exports.default = default_1;
function updateProjectStyle(projectName, workspace, targetThemeName) {
    const project = workspace.projects.get(projectName);
    if (!project) {
        throw new schematics_1.SchematicsException('The target project does not selected');
    }
    const isProjectLibrary = (0, utils_1.isLibrary)(project);
    if (isProjectLibrary) {
        throw new schematics_1.SchematicsException('The library project does not supported');
    }
    const targetOption = getProjectTargetOptions(project, 'build');
    const styles = targetOption.styles;
    const sanitizedStyles = removeThemeBasedStyles(styles);
    const newStyles = style_map_1.styleMap.get(targetThemeName);
    if (!newStyles) {
        throw new schematics_1.SchematicsException('The theme does not found');
    }
    targetOption.styles = [...newStyles, ...sanitizedStyles];
}
function getProjectTargetOptions(project, buildTarget) {
    const options = project.targets?.get(buildTarget)?.options;
    if (!options) {
        throw new schematics_1.SchematicsException(`Cannot determine project target configuration for: ${buildTarget}.`);
    }
    return options;
}
exports.getProjectTargetOptions = getProjectTargetOptions;
function removeThemeBasedStyles(styles) {
    return styles.filter(s => !style_map_1.allStyles.some(x => (0, exports.styleCompareFn)(s, x)));
}
exports.removeThemeBasedStyles = removeThemeBasedStyles;
const styleCompareFn = (item1, item2) => {
    const type1 = typeof item1;
    const type2 = typeof item1;
    if (type1 !== type2) {
        return false;
    }
    if (type1 === 'string') {
        return item1 === item2;
    }
    const o1 = item1;
    const o2 = item2;
    return o1.bundleName && o2.bundleName && o1.bundleName == o2.bundleName;
};
exports.styleCompareFn = styleCompareFn;
//# sourceMappingURL=index.js.map