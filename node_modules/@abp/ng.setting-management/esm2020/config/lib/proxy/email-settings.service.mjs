import { RestService } from '@abp/ng.core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class EmailSettingsService {
    constructor(restService) {
        this.restService = restService;
        this.apiName = 'SettingManagement';
        this.get = () => this.restService.request({
            method: 'GET',
            url: '/api/setting-management/emailing',
        }, { apiName: this.apiName });
        this.sendTestEmail = (input) => this.restService.request({
            method: 'POST',
            url: '/api/setting-management/emailing/send-test-email',
            body: input,
        }, { apiName: this.apiName });
        this.update = (input) => this.restService.request({
            method: 'POST',
            url: '/api/setting-management/emailing',
            body: input,
        }, { apiName: this.apiName });
    }
}
EmailSettingsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: EmailSettingsService, deps: [{ token: i1.RestService }], target: i0.ɵɵFactoryTarget.Injectable });
EmailSettingsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: EmailSettingsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: EmailSettingsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RestService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwtc2V0dGluZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3NldHRpbmctbWFuYWdlbWVudC9jb25maWcvc3JjL2xpYi9wcm94eS9lbWFpbC1zZXR0aW5ncy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSzNDLE1BQU0sT0FBTyxvQkFBb0I7SUEwQi9CLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBekI1QyxZQUFPLEdBQUcsbUJBQW1CLENBQUM7UUFFOUIsUUFBRyxHQUFHLEdBQUcsRUFBRSxDQUNULElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUF3QjtZQUM5QyxNQUFNLEVBQUUsS0FBSztZQUNiLEdBQUcsRUFBRSxrQ0FBa0M7U0FDeEMsRUFDRCxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU3QixrQkFBYSxHQUFHLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFZO1lBQ2xDLE1BQU0sRUFBRSxNQUFNO1lBQ2QsR0FBRyxFQUFFLGtEQUFrRDtZQUN2RCxJQUFJLEVBQUUsS0FBSztTQUNaLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0IsV0FBTSxHQUFHLENBQUMsS0FBNkIsRUFBRSxFQUFFLENBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFZO1lBQ2xDLE1BQU0sRUFBRSxNQUFNO1lBQ2QsR0FBRyxFQUFFLGtDQUFrQztZQUN2QyxJQUFJLEVBQUUsS0FBSztTQUNaLEVBQ0QsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFa0IsQ0FBQzs7aUhBMUJyQyxvQkFBb0I7cUhBQXBCLG9CQUFvQixjQUZuQixNQUFNOzJGQUVQLG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEVtYWlsU2V0dGluZ3NEdG8sIFNlbmRUZXN0RW1haWxJbnB1dCwgVXBkYXRlRW1haWxTZXR0aW5nc0R0byB9IGZyb20gJy4vbW9kZWxzJztcclxuaW1wb3J0IHsgUmVzdFNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRW1haWxTZXR0aW5nc1NlcnZpY2Uge1xyXG4gIGFwaU5hbWUgPSAnU2V0dGluZ01hbmFnZW1lbnQnO1xyXG5cclxuICBnZXQgPSAoKSA9PlxyXG4gICAgdGhpcy5yZXN0U2VydmljZS5yZXF1ZXN0PGFueSwgRW1haWxTZXR0aW5nc0R0bz4oe1xyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICB1cmw6ICcvYXBpL3NldHRpbmctbWFuYWdlbWVudC9lbWFpbGluZycsXHJcbiAgICB9LFxyXG4gICAgeyBhcGlOYW1lOiB0aGlzLmFwaU5hbWUgfSk7XHJcblxyXG4gIHNlbmRUZXN0RW1haWwgPSAoaW5wdXQ6IFNlbmRUZXN0RW1haWxJbnB1dCkgPT5cclxuICAgIHRoaXMucmVzdFNlcnZpY2UucmVxdWVzdDxhbnksIHZvaWQ+KHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIHVybDogJy9hcGkvc2V0dGluZy1tYW5hZ2VtZW50L2VtYWlsaW5nL3NlbmQtdGVzdC1lbWFpbCcsXHJcbiAgICAgIGJvZHk6IGlucHV0LFxyXG4gICAgfSxcclxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xyXG5cclxuICB1cGRhdGUgPSAoaW5wdXQ6IFVwZGF0ZUVtYWlsU2V0dGluZ3NEdG8pID0+XHJcbiAgICB0aGlzLnJlc3RTZXJ2aWNlLnJlcXVlc3Q8YW55LCB2b2lkPih7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICB1cmw6ICcvYXBpL3NldHRpbmctbWFuYWdlbWVudC9lbWFpbGluZycsXHJcbiAgICAgIGJvZHk6IGlucHV0LFxyXG4gICAgfSxcclxuICAgIHsgYXBpTmFtZTogdGhpcy5hcGlOYW1lIH0pO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc3RTZXJ2aWNlOiBSZXN0U2VydmljZSkge31cclxufVxyXG4iXX0=