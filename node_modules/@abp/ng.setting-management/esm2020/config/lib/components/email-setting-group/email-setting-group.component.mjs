import { collapse, ToasterService } from '@abp/ng.theme.shared';
import { Component } from '@angular/core';
import { UntypedFormBuilder, Validators } from '@angular/forms';
import { finalize } from 'rxjs/operators';
import { EmailSettingsService } from '../../proxy/email-settings.service';
import * as i0 from "@angular/core";
import * as i1 from "../../proxy/email-settings.service";
import * as i2 from "@angular/forms";
import * as i3 from "@abp/ng.theme.shared";
import * as i4 from "@angular/common";
import * as i5 from "@abp/ng.core";
import * as i6 from "@ngx-validate/core";
export class EmailSettingGroupComponent {
    constructor(emailSettingsService, fb, toasterService) {
        this.emailSettingsService = emailSettingsService;
        this.fb = fb;
        this.toasterService = toasterService;
        this.saving = false;
        this.emailingPolicy = "SettingManagement.Emailing" /* SettingManagementPolicyNames.Emailing */;
        this.isEmailTestModalOpen = false;
        this.modalSize = { size: "lg" };
    }
    ngOnInit() {
        this.getData();
    }
    getData() {
        this.emailSettingsService.get().subscribe(res => {
            this.buildForm(res);
        });
    }
    buildForm(emailSettings) {
        this.form = this.fb.group({
            defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],
            defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],
            smtpHost: [emailSettings.smtpHost],
            smtpPort: [emailSettings.smtpPort, [Validators.required]],
            smtpEnableSsl: [emailSettings.smtpEnableSsl],
            smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],
            smtpDomain: [emailSettings.smtpDomain],
            smtpUserName: [emailSettings.smtpUserName],
            smtpPassword: [emailSettings.smtpPassword],
        });
    }
    submit() {
        if (this.saving || this.form.invalid)
            return;
        this.saving = true;
        this.emailSettingsService
            .update(this.form.value)
            .pipe(finalize(() => (this.saving = false)))
            .subscribe(() => {
            this.toasterService.success('AbpSettingManagement::SuccessfullySaved');
            this.getData();
        });
    }
    openSendEmailModal() {
        this.buildEmailTestForm();
        this.isEmailTestModalOpen = true;
    }
    buildEmailTestForm() {
        this.emailTestForm = this.fb.group({
            senderEmailAddress: ['', [Validators.required, Validators.email]],
            targetEmailAddress: ['', [Validators.required, Validators.email]],
            subject: ['', [Validators.required]],
            body: [''],
        });
    }
    emailTestFormSubmit() {
        if (this.emailTestForm.invalid) {
            return;
        }
        this.emailSettingsService.sendTestEmail(this.emailTestForm.value).subscribe(res => {
            this.toasterService.success('AbpSettingManagement::SuccessfullySent');
            this.isEmailTestModalOpen = false;
        });
    }
}
EmailSettingGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: EmailSettingGroupComponent, deps: [{ token: i1.EmailSettingsService }, { token: i2.UntypedFormBuilder }, { token: i3.ToasterService }], target: i0.ɵɵFactoryTarget.Component });
EmailSettingGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: EmailSettingGroupComponent, selector: "abp-email-setting-group", ngImport: i0, template: "<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\r\n\r\n<hr class=\"my-3\" />\r\n\r\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [validateOnSubmit]=\"true\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization\r\n      }}<span class=\"ms-1\">*</span></label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromAddress' | abpLocalization\r\n      }}<span class=\"ms-1\">*</span></label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}<span class=\"ms-1\">*</span></label>\r\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\r\n  </div>\r\n\r\n  <div class=\"form-check mb-2\">\r\n    <input type=\"checkbox\" id=\"smtp-enable-ssl\" class=\"form-check-input\" formControlName=\"smtpEnableSsl\" />\r\n    <label class=\"form-check-label\" for=\"smtp-enable-ssl\">{{\r\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\r\n      }}</label>\r\n  </div>\r\n  <div class=\"form-check mb-2\">\r\n    <input type=\"checkbox\" id=\"smtp-use-default-credentials\" class=\"form-check-input\"\r\n      formControlName=\"smtpUseDefaultCredentials\" />\r\n    <label class=\"form-check-label\" for=\"smtp-use-default-credentials\">{{\r\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\r\n      }}</label>\r\n  </div>\r\n\r\n  <div [@collapse]=\"{\r\n      value: form.get('smtpUseDefaultCredentials')?.value ? 'collapsed' : 'expanded',\r\n      params: { time: '200ms', easing: 'linear' }\r\n    }\">\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\r\n      <input type=\"password\" class=\"form-control\" formControlName=\"smtpPassword\" />\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <button type=\"submit\" class=\"btn btn-primary\">\r\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\r\n  </button>\r\n  <button type=\"button\" (click)=\"openSendEmailModal()\" class=\"btn btn-primary mx-2\" *abpPermission=\"emailingPolicy\">\r\n    <i class=\"fa f-send\"></i>\r\n    {{ 'AbpSettingManagement::SendTestEmail' | abpLocalization }}\r\n  </button>\r\n</form>\r\n\r\n<abp-modal [(visible)]=\"isEmailTestModalOpen\" [options]=\"modalSize\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{\"SendTestEmail\" | abpLocalization}}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"emailTestForm\" id=\"emailTestForm\" (ngSubmit)=\"emailTestFormSubmit()\">\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::SenderEmailAddress' | abpLocalization }}</label>\r\n        <input class=\"form-control\" formControlName=\"senderEmailAddress\" />\r\n      </div>\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::TargetEmailAddress' | abpLocalization }}</label>\r\n        <input class=\"form-control\" formControlName=\"targetEmailAddress\" />\r\n      </div>\r\n\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::Subject' | abpLocalization }}</label>\r\n        <input class=\"form-control\" formControlName=\"subject\" />\r\n      </div>\r\n\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::Body' | abpLocalization }}</label>\r\n        <textarea class=\"form-control\" formControlName=\"body\"></textarea>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n\r\n  <ng-template #abpFooter>\r\n    <abp-button buttonType=\"submit\" iconClass=\"fa fa-send\" formName=\"emailTestForm\"\r\n      [disabled]=\"emailTestForm.invalid && emailTestForm.dirty\">\r\n      <span>{{ 'AbpTenantManagement::Send' | abpLocalization }}</span>\r\n    </abp-button>\r\n\r\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>Close</button>\r\n  </ng-template>\r\n</abp-modal>", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i5.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { kind: "directive", type: i5.PermissionDirective, selector: "[abpPermission]", inputs: ["abpPermission", "abpPermissionRunChangeDetection"] }, { kind: "component", type: i3.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "component", type: i3.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { kind: "directive", type: i3.ModalCloseDirective, selector: "[abpClose]" }, { kind: "directive", type: i6.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "directive", type: i6.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { kind: "pipe", type: i5.LocalizationPipe, name: "abpLocalization" }], animations: [collapse] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: EmailSettingGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-email-setting-group', animations: [collapse], template: "<h2>{{ 'AbpSettingManagement::Menu:Emailing' | abpLocalization }}</h2>\r\n\r\n<hr class=\"my-3\" />\r\n\r\n<form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\" [validateOnSubmit]=\"true\">\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromDisplayName' | abpLocalization\r\n      }}<span class=\"ms-1\">*</span></label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromDisplayName\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{\r\n      'AbpSettingManagement::DefaultFromAddress' | abpLocalization\r\n      }}<span class=\"ms-1\">*</span></label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"defaultFromAddress\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpHost' | abpLocalization }}</label>\r\n    <input type=\"text\" class=\"form-control\" formControlName=\"smtpHost\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPort' | abpLocalization }}<span class=\"ms-1\">*</span></label>\r\n    <input type=\"number\" class=\"form-control\" formControlName=\"smtpPort\" />\r\n  </div>\r\n\r\n  <div class=\"form-check mb-2\">\r\n    <input type=\"checkbox\" id=\"smtp-enable-ssl\" class=\"form-check-input\" formControlName=\"smtpEnableSsl\" />\r\n    <label class=\"form-check-label\" for=\"smtp-enable-ssl\">{{\r\n      'AbpSettingManagement::SmtpEnableSsl' | abpLocalization\r\n      }}</label>\r\n  </div>\r\n  <div class=\"form-check mb-2\">\r\n    <input type=\"checkbox\" id=\"smtp-use-default-credentials\" class=\"form-check-input\"\r\n      formControlName=\"smtpUseDefaultCredentials\" />\r\n    <label class=\"form-check-label\" for=\"smtp-use-default-credentials\">{{\r\n      'AbpSettingManagement::SmtpUseDefaultCredentials' | abpLocalization\r\n      }}</label>\r\n  </div>\r\n\r\n  <div [@collapse]=\"{\r\n      value: form.get('smtpUseDefaultCredentials')?.value ? 'collapsed' : 'expanded',\r\n      params: { time: '200ms', easing: 'linear' }\r\n    }\">\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpDomain' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpDomain\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpUserName' | abpLocalization }}</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"smtpUserName\" />\r\n    </div>\r\n\r\n    <div class=\"mb-3 form-group\">\r\n      <label class=\"form-label\">{{ 'AbpSettingManagement::SmtpPassword' | abpLocalization }}</label>\r\n      <input type=\"password\" class=\"form-control\" formControlName=\"smtpPassword\" />\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <button type=\"submit\" class=\"btn btn-primary\">\r\n    {{ 'AbpSettingManagement::Save' | abpLocalization }}\r\n  </button>\r\n  <button type=\"button\" (click)=\"openSendEmailModal()\" class=\"btn btn-primary mx-2\" *abpPermission=\"emailingPolicy\">\r\n    <i class=\"fa f-send\"></i>\r\n    {{ 'AbpSettingManagement::SendTestEmail' | abpLocalization }}\r\n  </button>\r\n</form>\r\n\r\n<abp-modal [(visible)]=\"isEmailTestModalOpen\" [options]=\"modalSize\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{\"SendTestEmail\" | abpLocalization}}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"emailTestForm\" id=\"emailTestForm\" (ngSubmit)=\"emailTestFormSubmit()\">\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::SenderEmailAddress' | abpLocalization }}</label>\r\n        <input class=\"form-control\" formControlName=\"senderEmailAddress\" />\r\n      </div>\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::TargetEmailAddress' | abpLocalization }}</label>\r\n        <input class=\"form-control\" formControlName=\"targetEmailAddress\" />\r\n      </div>\r\n\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::Subject' | abpLocalization }}</label>\r\n        <input class=\"form-control\" formControlName=\"subject\" />\r\n      </div>\r\n\r\n\r\n      <div class=\"mb-3 form-group\">\r\n        <label class=\"form-label\">{{ 'AbpSettingManagement::Body' | abpLocalization }}</label>\r\n        <textarea class=\"form-control\" formControlName=\"body\"></textarea>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n\r\n  <ng-template #abpFooter>\r\n    <abp-button buttonType=\"submit\" iconClass=\"fa fa-send\" formName=\"emailTestForm\"\r\n      [disabled]=\"emailTestForm.invalid && emailTestForm.dirty\">\r\n      <span>{{ 'AbpTenantManagement::Send' | abpLocalization }}</span>\r\n    </abp-button>\r\n\r\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>Close</button>\r\n  </ng-template>\r\n</abp-modal>" }]
        }], ctorParameters: function () { return [{ type: i1.EmailSettingsService }, { type: i2.UntypedFormBuilder }, { type: i3.ToasterService }]; } });
//# sourceMappingURL=data:application/json;base64,