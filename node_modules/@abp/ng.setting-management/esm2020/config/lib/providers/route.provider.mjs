import { noop, RoutesService } from '@abp/ng.core';
import { APP_INITIALIZER, inject, InjectionToken } from '@angular/core';
import { debounceTime, map } from 'rxjs/operators';
import { SettingTabsService } from '../services/settings-tabs.service';
export function configureRoutes(routesService) {
    return () => {
        routesService.add([
            {
                name: "AbpSettingManagement::Settings" /* eSettingManagementRouteNames.Settings */,
                path: '/setting-management',
                parentName: "AbpUiNavigation::Menu:Administration" /* eThemeSharedRouteNames.Administration */,
                layout: "application" /* eLayoutType.application */,
                order: 100,
                iconClass: 'fa fa-cog',
            },
        ]);
    };
}
export const SETTING_MANAGEMENT_HAS_SETTING = new InjectionToken('SETTING_MANAGEMENT_HAS_SETTING', {
    factory: () => {
        const settingTabsService = inject(SettingTabsService);
        return settingTabsService.visible$.pipe(debounceTime(0), map(nodes => !!nodes.length));
    },
});
export const SETTING_MANAGEMENT_ROUTE_PROVIDERS = [
    { provide: APP_INITIALIZER, useFactory: configureRoutes, deps: [RoutesService], multi: true },
    {
        provide: APP_INITIALIZER,
        useFactory: noop,
        deps: [SETTING_MANAGEMENT_HAS_SETTING],
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zZXR0aW5nLW1hbmFnZW1lbnQvY29uZmlnL3NyYy9saWIvcHJvdmlkZXJzL3JvdXRlLnByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZSxJQUFJLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBR3ZFLE1BQU0sVUFBVSxlQUFlLENBQUMsYUFBNEI7SUFDMUQsT0FBTyxHQUFHLEVBQUU7UUFDVixhQUFhLENBQUMsR0FBRyxDQUFDO1lBQ2hCO2dCQUNFLElBQUksOEVBQXVDO2dCQUMzQyxJQUFJLEVBQUUscUJBQXFCO2dCQUMzQixVQUFVLG9GQUF1QztnQkFDakQsTUFBTSw2Q0FBeUI7Z0JBQy9CLEtBQUssRUFBRSxHQUFHO2dCQUNWLFNBQVMsRUFBRSxXQUFXO2FBQ3ZCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLElBQUksY0FBYyxDQUM5RCxnQ0FBZ0MsRUFDaEM7SUFDRSxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ1osTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN0RCxPQUFPLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ3JDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUM3QixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtDQUFrQyxHQUFHO0lBQ2hELEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7SUFDN0Y7UUFDRSxPQUFPLEVBQUUsZUFBZTtRQUN4QixVQUFVLEVBQUUsSUFBSTtRQUNoQixJQUFJLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztRQUN0QyxLQUFLLEVBQUUsSUFBSTtLQUNaO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVMYXlvdXRUeXBlLCBub29wLCBSb3V0ZXNTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgZVRoZW1lU2hhcmVkUm91dGVOYW1lcyB9IGZyb20gJ0BhYnAvbmcudGhlbWUuc2hhcmVkJztcclxuaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBpbmplY3QsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBlU2V0dGluZ01hbmFnZW1lbnRSb3V0ZU5hbWVzIH0gZnJvbSAnLi4vZW51bXMvcm91dGUtbmFtZXMnO1xyXG5pbXBvcnQgeyBTZXR0aW5nVGFic1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zZXR0aW5ncy10YWJzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlUm91dGVzKHJvdXRlc1NlcnZpY2U6IFJvdXRlc1NlcnZpY2UpIHtcclxuICByZXR1cm4gKCkgPT4ge1xyXG4gICAgcm91dGVzU2VydmljZS5hZGQoW1xyXG4gICAgICB7XHJcbiAgICAgICAgbmFtZTogZVNldHRpbmdNYW5hZ2VtZW50Um91dGVOYW1lcy5TZXR0aW5ncyxcclxuICAgICAgICBwYXRoOiAnL3NldHRpbmctbWFuYWdlbWVudCcsXHJcbiAgICAgICAgcGFyZW50TmFtZTogZVRoZW1lU2hhcmVkUm91dGVOYW1lcy5BZG1pbmlzdHJhdGlvbixcclxuICAgICAgICBsYXlvdXQ6IGVMYXlvdXRUeXBlLmFwcGxpY2F0aW9uLFxyXG4gICAgICAgIG9yZGVyOiAxMDAsXHJcbiAgICAgICAgaWNvbkNsYXNzOiAnZmEgZmEtY29nJyxcclxuICAgICAgfSxcclxuICAgIF0pO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTRVRUSU5HX01BTkFHRU1FTlRfSEFTX1NFVFRJTkcgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTxib29sZWFuPj4oXHJcbiAgJ1NFVFRJTkdfTUFOQUdFTUVOVF9IQVNfU0VUVElORycsXHJcbiAge1xyXG4gICAgZmFjdG9yeTogKCkgPT4ge1xyXG4gICAgICBjb25zdCBzZXR0aW5nVGFic1NlcnZpY2UgPSBpbmplY3QoU2V0dGluZ1RhYnNTZXJ2aWNlKTtcclxuICAgICAgcmV0dXJuIHNldHRpbmdUYWJzU2VydmljZS52aXNpYmxlJC5waXBlKFxyXG4gICAgICAgIGRlYm91bmNlVGltZSgwKSxcclxuICAgICAgICBtYXAobm9kZXMgPT4gISFub2Rlcy5sZW5ndGgpLFxyXG4gICAgICApO1xyXG4gICAgfSxcclxuICB9LFxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVFRJTkdfTUFOQUdFTUVOVF9ST1VURV9QUk9WSURFUlMgPSBbXHJcbiAgeyBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsIHVzZUZhY3Rvcnk6IGNvbmZpZ3VyZVJvdXRlcywgZGVwczogW1JvdXRlc1NlcnZpY2VdLCBtdWx0aTogdHJ1ZSB9LFxyXG4gIHtcclxuICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcclxuICAgIHVzZUZhY3Rvcnk6IG5vb3AsXHJcbiAgICBkZXBzOiBbU0VUVElOR19NQU5BR0VNRU5UX0hBU19TRVRUSU5HXSxcclxuICAgIG11bHRpOiB0cnVlLFxyXG4gIH0sXHJcbl07XHJcbiJdfQ==