import { ConfigStateService, featuresFactory, noop } from '@abp/ng.core';
import { APP_INITIALIZER, inject, InjectionToken } from '@angular/core';
import { map } from 'rxjs/operators';
export const SETTING_MANAGEMENT_FEATURES = new InjectionToken('SETTING_MANAGEMENT_FEATURES', {
    providedIn: 'root',
    factory: () => {
        const configState = inject(ConfigStateService);
        const featureKey = 'SettingManagement.Enable';
        const mapFn = (features) => ({
            enable: features[featureKey].toLowerCase() !== 'false',
        });
        return featuresFactory(configState, [featureKey], mapFn);
    },
});
export const SETTING_MANAGEMENT_ROUTE_VISIBILITY = new InjectionToken('SETTING_MANAGEMENT_ROUTE_VISIBILITY', {
    providedIn: 'root',
    factory: () => {
        const stream = inject(SETTING_MANAGEMENT_FEATURES);
        return stream.pipe(map(features => features.enable));
    },
});
export const SETTING_MANAGEMENT_FEATURES_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: noop,
        deps: [SETTING_MANAGEMENT_ROUTE_VISIBILITY],
        multi: true,
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZXMudG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zZXR0aW5nLW1hbmFnZW1lbnQvY29uZmlnL3NyYy9saWIvcHJvdmlkZXJzL2ZlYXR1cmVzLnRva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQzNELDZCQUE2QixFQUM3QjtJQUNFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDWixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMvQyxNQUFNLFVBQVUsR0FBRywwQkFBMEIsQ0FBQztRQUM5QyxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQWdDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbkQsTUFBTSxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPO1NBQ3ZELENBQUMsQ0FBQztRQUNILE9BQU8sZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRixDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxtQ0FBbUMsR0FBRyxJQUFJLGNBQWMsQ0FDbkUscUNBQXFDLEVBQ3JDO0lBQ0UsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNaLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0YsQ0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUNBQXFDLEdBQUc7SUFDbkQ7UUFDRSxPQUFPLEVBQUUsZUFBZTtRQUN4QixVQUFVLEVBQUUsSUFBSTtRQUNoQixJQUFJLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQztRQUMzQyxLQUFLLEVBQUUsSUFBSTtLQUNaO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZ1N0YXRlU2VydmljZSwgZmVhdHVyZXNGYWN0b3J5LCBub29wIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBpbmplY3QsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVFRJTkdfTUFOQUdFTUVOVF9GRUFUVVJFUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPHsgZW5hYmxlOiBib29sZWFuIH0+PihcclxuICAnU0VUVElOR19NQU5BR0VNRU5UX0ZFQVRVUkVTJyxcclxuICB7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXHJcbiAgICBmYWN0b3J5OiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbmZpZ1N0YXRlID0gaW5qZWN0KENvbmZpZ1N0YXRlU2VydmljZSk7XHJcbiAgICAgIGNvbnN0IGZlYXR1cmVLZXkgPSAnU2V0dGluZ01hbmFnZW1lbnQuRW5hYmxlJztcclxuICAgICAgY29uc3QgbWFwRm4gPSAoZmVhdHVyZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+ICh7XHJcbiAgICAgICAgZW5hYmxlOiBmZWF0dXJlc1tmZWF0dXJlS2V5XS50b0xvd2VyQ2FzZSgpICE9PSAnZmFsc2UnLFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGZlYXR1cmVzRmFjdG9yeShjb25maWdTdGF0ZSwgW2ZlYXR1cmVLZXldLCBtYXBGbik7XHJcbiAgICB9LFxyXG4gIH0sXHJcbik7XHJcblxyXG5leHBvcnQgY29uc3QgU0VUVElOR19NQU5BR0VNRU5UX1JPVVRFX1ZJU0lCSUxJVFkgPSBuZXcgSW5qZWN0aW9uVG9rZW48T2JzZXJ2YWJsZTxib29sZWFuPj4oXHJcbiAgJ1NFVFRJTkdfTUFOQUdFTUVOVF9ST1VURV9WSVNJQklMSVRZJyxcclxuICB7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXHJcbiAgICBmYWN0b3J5OiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN0cmVhbSA9IGluamVjdChTRVRUSU5HX01BTkFHRU1FTlRfRkVBVFVSRVMpO1xyXG4gICAgICByZXR1cm4gc3RyZWFtLnBpcGUobWFwKGZlYXR1cmVzID0+IGZlYXR1cmVzLmVuYWJsZSkpO1xyXG4gICAgfSxcclxuICB9LFxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNFVFRJTkdfTUFOQUdFTUVOVF9GRUFUVVJFU19QUk9WSURFUlMgPSBbXHJcbiAge1xyXG4gICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgdXNlRmFjdG9yeTogbm9vcCxcclxuICAgIGRlcHM6IFtTRVRUSU5HX01BTkFHRU1FTlRfUk9VVEVfVklTSUJJTElUWV0sXHJcbiAgICBtdWx0aTogdHJ1ZSxcclxuICB9LFxyXG5dO1xyXG4iXX0=