import { CoreModule, LazyModuleFactory } from '@abp/ng.core';
import { FeatureManagementModule } from '@abp/ng.feature-management';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import { NgModule } from '@angular/core';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import { TenantsComponent } from './components/tenants/tenants.component';
import { TenantManagementExtensionsGuard } from './guards/extensions.guard';
import { TenantManagementRoutingModule } from './tenant-management-routing.module';
import { TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS, TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS, TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS, } from './tokens/extensions.token';
import * as i0 from "@angular/core";
export class TenantManagementModule {
    static forChild(options = {}) {
        return {
            ngModule: TenantManagementModule,
            providers: [
                {
                    provide: TENANT_MANAGEMENT_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: TENANT_MANAGEMENT_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                TenantManagementExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(TenantManagementModule.forChild(options));
    }
}
TenantManagementModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: TenantManagementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TenantManagementModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.3", ngImport: i0, type: TenantManagementModule, declarations: [TenantsComponent], imports: [TenantManagementRoutingModule,
        NgxValidateCoreModule,
        CoreModule,
        ThemeSharedModule,
        NgbDropdownModule,
        FeatureManagementModule,
        UiExtensionsModule], exports: [TenantsComponent] });
TenantManagementModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: TenantManagementModule, imports: [TenantManagementRoutingModule,
        NgxValidateCoreModule,
        CoreModule,
        ThemeSharedModule,
        NgbDropdownModule,
        FeatureManagementModule,
        UiExtensionsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: TenantManagementModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TenantsComponent],
                    exports: [TenantsComponent],
                    imports: [
                        TenantManagementRoutingModule,
                        NgxValidateCoreModule,
                        CoreModule,
                        ThemeSharedModule,
                        NgbDropdownModule,
                        FeatureManagementModule,
                        UiExtensionsModule,
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LW1hbmFnZW1lbnQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdGVuYW50LW1hbmFnZW1lbnQvc3JjL2xpYi90ZW5hbnQtbWFuYWdlbWVudC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQXVCLFFBQVEsRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDMUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFNUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkYsT0FBTyxFQUNMLCtDQUErQyxFQUMvQyw2Q0FBNkMsRUFDN0MsNENBQTRDLEVBQzVDLDBDQUEwQyxFQUMxQyw2Q0FBNkMsR0FDOUMsTUFBTSwyQkFBMkIsQ0FBQzs7QUFlbkMsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxNQUFNLENBQUMsUUFBUSxDQUNiLFVBQXlDLEVBQUU7UUFFM0MsT0FBTztZQUNMLFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSw0Q0FBNEM7b0JBQ3JELFFBQVEsRUFBRSxPQUFPLENBQUMsd0JBQXdCO2lCQUMzQztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsNkNBQTZDO29CQUN0RCxRQUFRLEVBQUUsT0FBTyxDQUFDLHlCQUF5QjtpQkFDNUM7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLDBDQUEwQztvQkFDbkQsUUFBUSxFQUFFLE9BQU8sQ0FBQyxzQkFBc0I7aUJBQ3pDO2dCQUNEO29CQUNFLE9BQU8sRUFBRSwrQ0FBK0M7b0JBQ3hELFFBQVEsRUFBRSxPQUFPLENBQUMsMEJBQTBCO2lCQUM3QztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsNkNBQTZDO29CQUN0RCxRQUFRLEVBQUUsT0FBTyxDQUFDLHdCQUF3QjtpQkFDM0M7Z0JBQ0QsK0JBQStCO2FBQ2hDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUNaLFVBQXlDLEVBQUU7UUFFM0MsT0FBTyxJQUFJLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7O21IQXBDVSxzQkFBc0I7b0hBQXRCLHNCQUFzQixpQkFabEIsZ0JBQWdCLGFBRzdCLDZCQUE2QjtRQUM3QixxQkFBcUI7UUFDckIsVUFBVTtRQUNWLGlCQUFpQjtRQUNqQixpQkFBaUI7UUFDakIsdUJBQXVCO1FBQ3ZCLGtCQUFrQixhQVJWLGdCQUFnQjtvSEFXZixzQkFBc0IsWUFUL0IsNkJBQTZCO1FBQzdCLHFCQUFxQjtRQUNyQixVQUFVO1FBQ1YsaUJBQWlCO1FBQ2pCLGlCQUFpQjtRQUNqQix1QkFBdUI7UUFDdkIsa0JBQWtCOzJGQUdULHNCQUFzQjtrQkFibEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQzNCLE9BQU8sRUFBRTt3QkFDUCw2QkFBNkI7d0JBQzdCLHFCQUFxQjt3QkFDckIsVUFBVTt3QkFDVixpQkFBaUI7d0JBQ2pCLGlCQUFpQjt3QkFDakIsdUJBQXVCO3dCQUN2QixrQkFBa0I7cUJBQ25CO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZU1vZHVsZSwgTGF6eU1vZHVsZUZhY3RvcnkgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBGZWF0dXJlTWFuYWdlbWVudE1vZHVsZSB9IGZyb20gJ0BhYnAvbmcuZmVhdHVyZS1tYW5hZ2VtZW50JztcclxuaW1wb3J0IHsgVGhlbWVTaGFyZWRNb2R1bGUgfSBmcm9tICdAYWJwL25nLnRoZW1lLnNoYXJlZCc7XHJcbmltcG9ydCB7IFVpRXh0ZW5zaW9uc01vZHVsZSB9IGZyb20gJ0BhYnAvbmcudGhlbWUuc2hhcmVkL2V4dGVuc2lvbnMnO1xyXG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgTmdNb2R1bGVGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nYkRyb3Bkb3duTW9kdWxlIH0gZnJvbSAnQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAnO1xyXG5pbXBvcnQgeyBOZ3hWYWxpZGF0ZUNvcmVNb2R1bGUgfSBmcm9tICdAbmd4LXZhbGlkYXRlL2NvcmUnO1xyXG5pbXBvcnQgeyBUZW5hbnRzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3RlbmFudHMvdGVuYW50cy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUZW5hbnRNYW5hZ2VtZW50RXh0ZW5zaW9uc0d1YXJkIH0gZnJvbSAnLi9ndWFyZHMvZXh0ZW5zaW9ucy5ndWFyZCc7XHJcbmltcG9ydCB7IFRlbmFudE1hbmFnZW1lbnRDb25maWdPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMvY29uZmlnLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBUZW5hbnRNYW5hZ2VtZW50Um91dGluZ01vZHVsZSB9IGZyb20gJy4vdGVuYW50LW1hbmFnZW1lbnQtcm91dGluZy5tb2R1bGUnO1xyXG5pbXBvcnQge1xyXG4gIFRFTkFOVF9NQU5BR0VNRU5UX0NSRUFURV9GT1JNX1BST1BfQ09OVFJJQlVUT1JTLFxyXG4gIFRFTkFOVF9NQU5BR0VNRU5UX0VESVRfRk9STV9QUk9QX0NPTlRSSUJVVE9SUyxcclxuICBURU5BTlRfTUFOQUdFTUVOVF9FTlRJVFlfQUNUSU9OX0NPTlRSSUJVVE9SUyxcclxuICBURU5BTlRfTUFOQUdFTUVOVF9FTlRJVFlfUFJPUF9DT05UUklCVVRPUlMsXHJcbiAgVEVOQU5UX01BTkFHRU1FTlRfVE9PTEJBUl9BQ1RJT05fQ09OVFJJQlVUT1JTLFxyXG59IGZyb20gJy4vdG9rZW5zL2V4dGVuc2lvbnMudG9rZW4nO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtUZW5hbnRzQ29tcG9uZW50XSxcclxuICBleHBvcnRzOiBbVGVuYW50c0NvbXBvbmVudF0sXHJcbiAgaW1wb3J0czogW1xyXG4gICAgVGVuYW50TWFuYWdlbWVudFJvdXRpbmdNb2R1bGUsXHJcbiAgICBOZ3hWYWxpZGF0ZUNvcmVNb2R1bGUsXHJcbiAgICBDb3JlTW9kdWxlLFxyXG4gICAgVGhlbWVTaGFyZWRNb2R1bGUsXHJcbiAgICBOZ2JEcm9wZG93bk1vZHVsZSxcclxuICAgIEZlYXR1cmVNYW5hZ2VtZW50TW9kdWxlLFxyXG4gICAgVWlFeHRlbnNpb25zTW9kdWxlLFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUZW5hbnRNYW5hZ2VtZW50TW9kdWxlIHtcclxuICBzdGF0aWMgZm9yQ2hpbGQoXHJcbiAgICBvcHRpb25zOiBUZW5hbnRNYW5hZ2VtZW50Q29uZmlnT3B0aW9ucyA9IHt9LFxyXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8VGVuYW50TWFuYWdlbWVudE1vZHVsZT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IFRlbmFudE1hbmFnZW1lbnRNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFRFTkFOVF9NQU5BR0VNRU5UX0VOVElUWV9BQ1RJT05fQ09OVFJJQlVUT1JTLFxyXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMuZW50aXR5QWN0aW9uQ29udHJpYnV0b3JzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogVEVOQU5UX01BTkFHRU1FTlRfVE9PTEJBUl9BQ1RJT05fQ09OVFJJQlVUT1JTLFxyXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMudG9vbGJhckFjdGlvbkNvbnRyaWJ1dG9ycyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFRFTkFOVF9NQU5BR0VNRU5UX0VOVElUWV9QUk9QX0NPTlRSSUJVVE9SUyxcclxuICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb25zLmVudGl0eVByb3BDb250cmlidXRvcnMsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBURU5BTlRfTUFOQUdFTUVOVF9DUkVBVEVfRk9STV9QUk9QX0NPTlRSSUJVVE9SUyxcclxuICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb25zLmNyZWF0ZUZvcm1Qcm9wQ29udHJpYnV0b3JzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogVEVOQU5UX01BTkFHRU1FTlRfRURJVF9GT1JNX1BST1BfQ09OVFJJQlVUT1JTLFxyXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMuZWRpdEZvcm1Qcm9wQ29udHJpYnV0b3JzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgVGVuYW50TWFuYWdlbWVudEV4dGVuc2lvbnNHdWFyZCxcclxuICAgICAgXSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZm9yTGF6eShcclxuICAgIG9wdGlvbnM6IFRlbmFudE1hbmFnZW1lbnRDb25maWdPcHRpb25zID0ge30sXHJcbiAgKTogTmdNb2R1bGVGYWN0b3J5PFRlbmFudE1hbmFnZW1lbnRNb2R1bGU+IHtcclxuICAgIHJldHVybiBuZXcgTGF6eU1vZHVsZUZhY3RvcnkoVGVuYW50TWFuYWdlbWVudE1vZHVsZS5mb3JDaGlsZChvcHRpb25zKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==