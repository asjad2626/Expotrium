import { NgModule } from '@angular/core';
import { LpxModule } from '@volo/ngx-lepton-x.lite';
import { ValidationErrorModule } from './components/validation-error';
import { LPX_USER_PROVIDER } from './providers/user.provider';
import { LPX_LANGUAGE_PROVIDER } from './providers/language.provider';
import { LPX_TRANSLATE_PROVIDER } from './providers/translate.provider';
import { LEPTON_X_USER_MENU_PROVIDERS } from './providers/user-menu-service.provider';
import { LeptonXAbpCoreModule } from '@volo/abp.ng.lepton-x.core';
import * as i0 from "@angular/core";
export class ThemeLeptonXModule {
    static forRoot(options) {
        return {
            ngModule: ThemeLeptonXModule,
            providers: [
                LpxModule.forRoot(createLpxModuleOptions(options))
                    .providers,
                ValidationErrorModule.forRoot().providers,
                LPX_USER_PROVIDER,
                LPX_LANGUAGE_PROVIDER,
                LPX_TRANSLATE_PROVIDER,
                LEPTON_X_USER_MENU_PROVIDERS,
                LeptonXAbpCoreModule.forRoot().providers,
            ],
        };
    }
}
ThemeLeptonXModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ThemeLeptonXModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ThemeLeptonXModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: ThemeLeptonXModule, imports: [LpxModule, ValidationErrorModule] });
ThemeLeptonXModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ThemeLeptonXModule, imports: [LpxModule, ValidationErrorModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ThemeLeptonXModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [LpxModule, ValidationErrorModule],
                    exports: [],
                }]
        }] });
function createLpxModuleOptions(options) {
    return {
        ...options,
        styleFactory: (styles) => {
            styles.push({
                bundleName: 'abp-bundle',
            });
            if (options?.styleFactory) {
                return options.styleFactory(styles);
            }
            return styles;
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtbGVwdG9uLXgubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9hYnAtbGVwdG9uLXgvc3JjL2xpYi90aGVtZS1sZXB0b24teC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLFNBQVMsRUFBYyxNQUFNLHlCQUF5QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQVNsRSxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCLE1BQU0sQ0FBQyxPQUFPLENBQ1osT0FBbUM7UUFFbkMsT0FBTztZQUNMLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFO2dCQUNULFNBQVMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUM7cUJBQy9DLFNBQXFCO2dCQUN4QixxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFxQjtnQkFDckQsaUJBQWlCO2dCQUNqQixxQkFBcUI7Z0JBQ3JCLHNCQUFzQjtnQkFDdEIsNEJBQTRCO2dCQUM1QixvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFxQjthQUNyRDtTQUNGLENBQUM7SUFDSixDQUFDOzsrR0FqQlUsa0JBQWtCO2dIQUFsQixrQkFBa0IsWUFIbkIsU0FBUyxFQUFFLHFCQUFxQjtnSEFHL0Isa0JBQWtCLFlBSG5CLFNBQVMsRUFBRSxxQkFBcUI7MkZBRy9CLGtCQUFrQjtrQkFMOUIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsRUFBRTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLHFCQUFxQixDQUFDO29CQUMzQyxPQUFPLEVBQUUsRUFBRTtpQkFDWjs7QUFxQkQsU0FBUyxzQkFBc0IsQ0FBQyxPQUFtQztJQUNqRSxPQUFPO1FBQ0wsR0FBRyxPQUFPO1FBQ1YsWUFBWSxFQUFFLENBQUMsTUFBaUIsRUFBRSxFQUFFO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1YsVUFBVSxFQUFFLFlBQVk7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxPQUFPLEVBQUUsWUFBWSxFQUFFO2dCQUN6QixPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckM7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTHB4U3R5bGVzIH0gZnJvbSAnQHZvbG8vbmd4LWxlcHRvbi14LmNvcmUnO1xyXG5pbXBvcnQgeyBMcHhNb2R1bGUsIExweE9wdGlvbnMgfSBmcm9tICdAdm9sby9uZ3gtbGVwdG9uLXgubGl0ZSc7XHJcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvck1vZHVsZSB9IGZyb20gJy4vY29tcG9uZW50cy92YWxpZGF0aW9uLWVycm9yJztcclxuaW1wb3J0IHsgTFBYX1VTRVJfUFJPVklERVIgfSBmcm9tICcuL3Byb3ZpZGVycy91c2VyLnByb3ZpZGVyJztcclxuaW1wb3J0IHsgTFBYX0xBTkdVQUdFX1BST1ZJREVSIH0gZnJvbSAnLi9wcm92aWRlcnMvbGFuZ3VhZ2UucHJvdmlkZXInO1xyXG5pbXBvcnQgeyBMUFhfVFJBTlNMQVRFX1BST1ZJREVSIH0gZnJvbSAnLi9wcm92aWRlcnMvdHJhbnNsYXRlLnByb3ZpZGVyJztcclxuaW1wb3J0IHsgTEVQVE9OX1hfVVNFUl9NRU5VX1BST1ZJREVSUyB9IGZyb20gJy4vcHJvdmlkZXJzL3VzZXItbWVudS1zZXJ2aWNlLnByb3ZpZGVyJztcclxuaW1wb3J0IHsgTGVwdG9uWEFicENvcmVNb2R1bGUgfSBmcm9tICdAdm9sby9hYnAubmcubGVwdG9uLXguY29yZSc7XHJcblxyXG5leHBvcnQgdHlwZSBUaGVtZUxlcHRvblhNb2R1bGVPcHRpb25zID0gTHB4T3B0aW9ucztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXSxcclxuICBpbXBvcnRzOiBbTHB4TW9kdWxlLCBWYWxpZGF0aW9uRXJyb3JNb2R1bGVdLFxyXG4gIGV4cG9ydHM6IFtdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgVGhlbWVMZXB0b25YTW9kdWxlIHtcclxuICBzdGF0aWMgZm9yUm9vdChcclxuICAgIG9wdGlvbnM/OiBUaGVtZUxlcHRvblhNb2R1bGVPcHRpb25zXHJcbiAgKTogTW9kdWxlV2l0aFByb3ZpZGVyczxUaGVtZUxlcHRvblhNb2R1bGU+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBUaGVtZUxlcHRvblhNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIExweE1vZHVsZS5mb3JSb290KGNyZWF0ZUxweE1vZHVsZU9wdGlvbnMob3B0aW9ucykpXHJcbiAgICAgICAgICAucHJvdmlkZXJzIGFzIFByb3ZpZGVyLFxyXG4gICAgICAgIFZhbGlkYXRpb25FcnJvck1vZHVsZS5mb3JSb290KCkucHJvdmlkZXJzIGFzIFByb3ZpZGVyLFxyXG4gICAgICAgIExQWF9VU0VSX1BST1ZJREVSLFxyXG4gICAgICAgIExQWF9MQU5HVUFHRV9QUk9WSURFUixcclxuICAgICAgICBMUFhfVFJBTlNMQVRFX1BST1ZJREVSLFxyXG4gICAgICAgIExFUFRPTl9YX1VTRVJfTUVOVV9QUk9WSURFUlMsXHJcbiAgICAgICAgTGVwdG9uWEFicENvcmVNb2R1bGUuZm9yUm9vdCgpLnByb3ZpZGVycyBhcyBQcm92aWRlcixcclxuICAgICAgXSxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVMcHhNb2R1bGVPcHRpb25zKG9wdGlvbnM/OiBUaGVtZUxlcHRvblhNb2R1bGVPcHRpb25zKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLm9wdGlvbnMsXHJcbiAgICBzdHlsZUZhY3Rvcnk6IChzdHlsZXM6IExweFN0eWxlcykgPT4ge1xyXG4gICAgICBzdHlsZXMucHVzaCh7XHJcbiAgICAgICAgYnVuZGxlTmFtZTogJ2FicC1idW5kbGUnLFxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKG9wdGlvbnM/LnN0eWxlRmFjdG9yeSkge1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLnN0eWxlRmFjdG9yeShzdHlsZXMpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzdHlsZXM7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuIl19