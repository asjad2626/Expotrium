import { Injectable } from '@angular/core';
import { ConfigStateService, getLocaleDirection, SessionStateService } from '@abp/ng.core';
import { filter } from 'rxjs/operators';
import { LanguageService } from '@volo/ngx-lepton-x.core';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
import * as i2 from "@volo/ngx-lepton-x.core";
export class AbpLanguageService {
    constructor(configState, languageService, sessionState) {
        this.configState = configState;
        this.languageService = languageService;
        this.sessionState = sessionState;
        this.languages$ = this.configState.getDeep$('localization.languages');
        this.mapLang = (lang) => {
            return {
                cultureName: lang.cultureName,
                displayName: lang.displayName || '',
                selected: this.sessionState.getLanguage() === lang.cultureName,
                isRTL: getLocaleDirection(lang.cultureName) === 'rtl',
            };
        };
    }
    subscribeLanguage() {
        this.languages$.pipe(filter(Boolean)).subscribe(langs => {
            this.languageService.init(langs.map(this.mapLang));
        });
        this.languageService.selectedLanguage$
            .pipe(filter(Boolean))
            .subscribe(lang => {
            this.sessionState.setLanguage(lang?.cultureName || '');
        });
    }
}
AbpLanguageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpLanguageService, deps: [{ token: i1.ConfigStateService }, { token: i2.LanguageService }, { token: i1.SessionStateService }], target: i0.ɵɵFactoryTarget.Injectable });
AbpLanguageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpLanguageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpLanguageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigStateService }, { type: i2.LanguageService }, { type: i1.SessionStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWJwLWxlcHRvbi14L3NyYy9saWIvc2VydmljZXMvbGFuZ3VhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBZ0IsbUJBQW1CLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekcsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQWUsTUFBTSx5QkFBeUIsQ0FBQzs7OztBQUt2RSxNQUFNLE9BQU8sa0JBQWtCO0lBRzdCLFlBQ1UsV0FBK0IsRUFDL0IsZUFBZ0MsRUFDaEMsWUFBaUM7UUFGakMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFMM0MsZUFBVSxHQUErQixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBb0JyRixZQUFPLEdBQUcsQ0FBQyxJQUFrQixFQUFlLEVBQUU7WUFDcEQsT0FBTztnQkFDTCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7Z0JBQzdCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxJQUFJLEVBQUU7Z0JBQ25DLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksQ0FBQyxXQUFXO2dCQUM5RCxLQUFLLEVBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUs7YUFDdkQsQ0FBQztRQUNKLENBQUMsQ0FBQztJQXJCQyxDQUFDO0lBRUosaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFpQixPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0RSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUI7YUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBMkIsT0FBTyxDQUFDLENBQUM7YUFDL0MsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzsrR0FuQlUsa0JBQWtCO21IQUFsQixrQkFBa0IsY0FGakIsTUFBTTsyRkFFUCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENvbmZpZ1N0YXRlU2VydmljZSwgZ2V0TG9jYWxlRGlyZWN0aW9uLCBMYW5ndWFnZUluZm8sIFNlc3Npb25TdGF0ZVNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSwgTHB4TGFuZ3VhZ2UgfSBmcm9tICdAdm9sby9uZ3gtbGVwdG9uLXguY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWJwTGFuZ3VhZ2VTZXJ2aWNlIHtcclxuICBsYW5ndWFnZXMkOiBPYnNlcnZhYmxlPExhbmd1YWdlSW5mb1tdPiA9IHRoaXMuY29uZmlnU3RhdGUuZ2V0RGVlcCQoJ2xvY2FsaXphdGlvbi5sYW5ndWFnZXMnKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNvbmZpZ1N0YXRlOiBDb25maWdTdGF0ZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBzZXNzaW9uU3RhdGU6IFNlc3Npb25TdGF0ZVNlcnZpY2UsXHJcbiAgKSB7fVxyXG5cclxuICBzdWJzY3JpYmVMYW5ndWFnZSgpIHtcclxuICAgIHRoaXMubGFuZ3VhZ2VzJC5waXBlKGZpbHRlcjxMYW5ndWFnZUluZm9bXT4oQm9vbGVhbikpLnN1YnNjcmliZShsYW5ncyA9PiB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmluaXQobGFuZ3MubWFwKHRoaXMubWFwTGFuZykpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5sYW5ndWFnZVNlcnZpY2Uuc2VsZWN0ZWRMYW5ndWFnZSRcclxuICAgICAgLnBpcGUoZmlsdGVyPExhbmd1YWdlSW5mbyB8IHVuZGVmaW5lZD4oQm9vbGVhbikpXHJcbiAgICAgIC5zdWJzY3JpYmUobGFuZyA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uU3RhdGUuc2V0TGFuZ3VhZ2UobGFuZz8uY3VsdHVyZU5hbWUgfHwgJycpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWFwTGFuZyA9IChsYW5nOiBMYW5ndWFnZUluZm8pOiBMcHhMYW5ndWFnZSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjdWx0dXJlTmFtZTogbGFuZy5jdWx0dXJlTmFtZSxcclxuICAgICAgZGlzcGxheU5hbWU6IGxhbmcuZGlzcGxheU5hbWUgfHwgJycsXHJcbiAgICAgIHNlbGVjdGVkOiB0aGlzLnNlc3Npb25TdGF0ZS5nZXRMYW5ndWFnZSgpID09PSBsYW5nLmN1bHR1cmVOYW1lLFxyXG4gICAgICBpc1JUTDogIGdldExvY2FsZURpcmVjdGlvbihsYW5nLmN1bHR1cmVOYW1lKSA9PT0gJ3J0bCcsXHJcbiAgICB9O1xyXG4gIH07XHJcbn1cclxuIl19