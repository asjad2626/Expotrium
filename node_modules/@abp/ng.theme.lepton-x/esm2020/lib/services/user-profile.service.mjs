import { Inject, Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { AuthService, ConfigStateService, NAVIGATE_TO_MANAGE_PROFILE, } from '@abp/ng.core';
import { UserProfileService } from '@volo/ngx-lepton-x.core';
import { filter } from 'rxjs/operators';
import { OAuthService } from 'angular-oauth2-oidc';
import { UserMenuService } from '@abp/ng.theme.shared';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
import * as i2 from "@volo/ngx-lepton-x.core";
import * as i3 from "angular-oauth2-oidc";
import * as i4 from "@abp/ng.theme.shared";
export class AbpUserProfileService {
    constructor(configState, userProfileService, authService, navigateToManageProfile, oAuthService, userMenuService) {
        this.configState = configState;
        this.userProfileService = userProfileService;
        this.authService = authService;
        this.navigateToManageProfile = navigateToManageProfile;
        this.oAuthService = oAuthService;
        this.userMenuService = userMenuService;
        this.currentUser$ = this.configState.getOne$('currentUser');
    }
    subscribeUser() {
        combineLatest([
            this.currentUser$.pipe(filter(Boolean)),
            this.userMenuService.items$,
        ]).subscribe(([user, userMenuItems]) => {
            const userActionGroups = userMenuItems.reduce((acc, curr) => {
                const menuItem = {
                    icon: curr.textTemplate?.icon,
                    text: curr.textTemplate?.text,
                    component: curr?.component,
                    action: () => {
                        curr.action();
                        return of(true);
                    },
                };
                acc[0].push(menuItem);
                return acc;
            }, [[]]);
            this.userProfileService.setUser({
                fullName: user.name || user.userName || '',
                email: user.email || '',
                userName: user.userName || '',
                avatar: {
                    type: 'icon',
                    source: 'bi bi-person-circle',
                },
                userActionGroups,
            });
        });
    }
}
AbpUserProfileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpUserProfileService, deps: [{ token: i1.ConfigStateService }, { token: i2.UserProfileService }, { token: i1.AuthService }, { token: NAVIGATE_TO_MANAGE_PROFILE }, { token: i3.OAuthService }, { token: i4.UserMenuService }], target: i0.ɵɵFactoryTarget.Injectable });
AbpUserProfileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpUserProfileService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpUserProfileService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConfigStateService }, { type: i2.UserProfileService }, { type: i1.AuthService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NAVIGATE_TO_MANAGE_PROFILE]
                }] }, { type: i3.OAuthService }, { type: i4.UserMenuService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcm9maWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FicC1sZXB0b24teC9zcmMvbGliL3NlcnZpY2VzL3VzZXItcHJvZmlsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFDTCxXQUFXLEVBQ1gsa0JBQWtCLEVBRWxCLDBCQUEwQixHQUMzQixNQUFNLGNBQWMsQ0FBQztBQUN0QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7O0FBS3ZELE1BQU0sT0FBTyxxQkFBcUI7SUFJaEMsWUFDVSxXQUErQixFQUMvQixrQkFBc0MsRUFDdEMsV0FBd0IsRUFDVyx1QkFBNEIsRUFDL0QsWUFBMEIsRUFDMUIsZUFBZ0M7UUFMaEMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDVyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQUs7UUFDL0QsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBVDFDLGlCQUFZLEdBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFTdkMsQ0FBQztJQUVKLGFBQWE7UUFDWCxhQUFhLENBQUM7WUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQWlCLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZELElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTTtTQUM1QixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxNQUFNLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQzNDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUNaLE1BQU0sUUFBUSxHQUFHO29CQUNmLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUk7b0JBQzdCLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUk7b0JBQzdCLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUztvQkFDMUIsTUFBTSxFQUFFLEdBQUcsRUFBRTt3QkFDWCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7d0JBQ2QsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2xCLENBQUM7aUJBQ0YsQ0FBQztnQkFDRixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN0QixPQUFPLEdBQUcsQ0FBQztZQUNiLENBQUMsRUFDRCxDQUFDLEVBQUUsQ0FBQyxDQUNMLENBQUM7WUFDRixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDO2dCQUM5QixRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUU7Z0JBQzFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUU7Z0JBQzdCLE1BQU0sRUFBRTtvQkFDTixJQUFJLEVBQUUsTUFBTTtvQkFDWixNQUFNLEVBQUUscUJBQXFCO2lCQUM5QjtnQkFDRCxnQkFBZ0I7YUFDakIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztrSEE3Q1UscUJBQXFCLGlIQVF0QiwwQkFBMEI7c0hBUnpCLHFCQUFxQixjQUZwQixNQUFNOzJGQUVQLHFCQUFxQjtrQkFIakMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQVNJLE1BQU07MkJBQUMsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7XHJcbiAgQXV0aFNlcnZpY2UsXHJcbiAgQ29uZmlnU3RhdGVTZXJ2aWNlLFxyXG4gIEN1cnJlbnRVc2VyRHRvLFxyXG4gIE5BVklHQVRFX1RPX01BTkFHRV9QUk9GSUxFLFxyXG59IGZyb20gJ0BhYnAvbmcuY29yZSc7XHJcbmltcG9ydCB7IFVzZXJQcm9maWxlU2VydmljZSB9IGZyb20gJ0B2b2xvL25neC1sZXB0b24teC5jb3JlJztcclxuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBPQXV0aFNlcnZpY2UgfSBmcm9tICdhbmd1bGFyLW9hdXRoMi1vaWRjJztcclxuaW1wb3J0IHsgVXNlck1lbnVTZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy50aGVtZS5zaGFyZWQnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290JyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEFicFVzZXJQcm9maWxlU2VydmljZSB7XHJcbiAgY3VycmVudFVzZXIkOiBPYnNlcnZhYmxlPEN1cnJlbnRVc2VyRHRvPiA9XHJcbiAgICB0aGlzLmNvbmZpZ1N0YXRlLmdldE9uZSQoJ2N1cnJlbnRVc2VyJyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjb25maWdTdGF0ZTogQ29uZmlnU3RhdGVTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSB1c2VyUHJvZmlsZVNlcnZpY2U6IFVzZXJQcm9maWxlU2VydmljZSxcclxuICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxyXG4gICAgQEluamVjdChOQVZJR0FURV9UT19NQU5BR0VfUFJPRklMRSkgcHVibGljIG5hdmlnYXRlVG9NYW5hZ2VQcm9maWxlOiBhbnksXHJcbiAgICBwcml2YXRlIG9BdXRoU2VydmljZTogT0F1dGhTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSB1c2VyTWVudVNlcnZpY2U6IFVzZXJNZW51U2VydmljZVxyXG4gICkge31cclxuXHJcbiAgc3Vic2NyaWJlVXNlcigpIHtcclxuICAgIGNvbWJpbmVMYXRlc3QoW1xyXG4gICAgICB0aGlzLmN1cnJlbnRVc2VyJC5waXBlKGZpbHRlcjxDdXJyZW50VXNlckR0bz4oQm9vbGVhbikpLFxyXG4gICAgICB0aGlzLnVzZXJNZW51U2VydmljZS5pdGVtcyQsXHJcbiAgICBdKS5zdWJzY3JpYmUoKFt1c2VyLCB1c2VyTWVudUl0ZW1zXSkgPT4ge1xyXG4gICAgICBjb25zdCB1c2VyQWN0aW9uR3JvdXBzID0gdXNlck1lbnVJdGVtcy5yZWR1Y2UoXHJcbiAgICAgICAgKGFjYywgY3VycikgPT4ge1xyXG4gICAgICAgICAgY29uc3QgbWVudUl0ZW0gPSB7XHJcbiAgICAgICAgICAgIGljb246IGN1cnIudGV4dFRlbXBsYXRlPy5pY29uLFxyXG4gICAgICAgICAgICB0ZXh0OiBjdXJyLnRleHRUZW1wbGF0ZT8udGV4dCxcclxuICAgICAgICAgICAgY29tcG9uZW50OiBjdXJyPy5jb21wb25lbnQsXHJcbiAgICAgICAgICAgIGFjdGlvbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGN1cnIuYWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGFjY1swXS5wdXNoKG1lbnVJdGVtKTtcclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBbW11dXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMudXNlclByb2ZpbGVTZXJ2aWNlLnNldFVzZXIoe1xyXG4gICAgICAgIGZ1bGxOYW1lOiB1c2VyLm5hbWUgfHwgdXNlci51c2VyTmFtZSB8fCAnJyxcclxuICAgICAgICBlbWFpbDogdXNlci5lbWFpbCB8fCAnJyxcclxuICAgICAgICB1c2VyTmFtZTogdXNlci51c2VyTmFtZSB8fCAnJyxcclxuICAgICAgICBhdmF0YXI6IHtcclxuICAgICAgICAgIHR5cGU6ICdpY29uJyxcclxuICAgICAgICAgIHNvdXJjZTogJ2JpIGJpLXBlcnNvbi1jaXJjbGUnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXNlckFjdGlvbkdyb3VwcyxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19