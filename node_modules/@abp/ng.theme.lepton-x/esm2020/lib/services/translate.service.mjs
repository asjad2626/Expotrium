import { Injectable } from '@angular/core';
import { LocalizationService } from '@abp/ng.core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@abp/ng.core";
export class AbpTranslateService {
    constructor(localization) {
        this.localization = localization;
    }
    get(key, defaultValue) {
        const keyToTranslate = this.getKey(key);
        if (keyToTranslate) {
            return this.localization.instant({
                key: keyToTranslate,
                defaultValue,
            });
        }
        return defaultValue || key;
    }
    get$(key, defaultValue) {
        const keyToTranslate = this.getKey(key);
        if (keyToTranslate) {
            return this.localization.get({
                key: keyToTranslate,
                defaultValue,
            });
        }
        return of(defaultValue || key);
    }
    getKey(key) {
        return key.includes('::') ? key : undefined;
    }
}
AbpTranslateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpTranslateService, deps: [{ token: i1.LocalizationService }], target: i0.ɵɵFactoryTarget.Injectable });
AbpTranslateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpTranslateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AbpTranslateService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LocalizationService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FicC1sZXB0b24teC9zcmMvbGliL3NlcnZpY2VzL3RyYW5zbGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRW5ELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQUd0QyxNQUFNLE9BQU8sbUJBQW1CO0lBQzlCLFlBQW9CLFlBQWlDO1FBQWpDLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtJQUFHLENBQUM7SUFFekQsR0FBRyxDQUFDLEdBQVcsRUFBRSxZQUFnQztRQUMvQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksY0FBYyxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7Z0JBQy9CLEdBQUcsRUFBRSxjQUFjO2dCQUNuQixZQUFZO2FBQ2IsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLFlBQVksSUFBSSxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFXLEVBQUUsWUFBZ0M7UUFDaEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLGNBQWMsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDO2dCQUMzQixHQUFHLEVBQUUsY0FBYztnQkFDbkIsWUFBWTthQUNiLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxFQUFFLENBQUMsWUFBWSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxNQUFNLENBQUMsR0FBVztRQUN4QixPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzlDLENBQUM7O2dIQTdCVSxtQkFBbUI7b0hBQW5CLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUQvQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQGFicC9uZy5jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0B2b2xvL25neC1sZXB0b24teC5jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEFicFRyYW5zbGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBUcmFuc2xhdGVTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSkge31cclxuXHJcbiAgZ2V0KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBrZXlUb1RyYW5zbGF0ZSA9IHRoaXMuZ2V0S2V5KGtleSk7XHJcbiAgICBpZiAoa2V5VG9UcmFuc2xhdGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubG9jYWxpemF0aW9uLmluc3RhbnQoe1xyXG4gICAgICAgIGtleToga2V5VG9UcmFuc2xhdGUsXHJcbiAgICAgICAgZGVmYXVsdFZhbHVlLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlIHx8IGtleTtcclxuICB9XHJcblxyXG4gIGdldCQoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IGtleVRvVHJhbnNsYXRlID0gdGhpcy5nZXRLZXkoa2V5KTtcclxuICAgIGlmIChrZXlUb1RyYW5zbGF0ZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5sb2NhbGl6YXRpb24uZ2V0KHtcclxuICAgICAgICBrZXk6IGtleVRvVHJhbnNsYXRlLFxyXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9mKGRlZmF1bHRWYWx1ZSB8fCBrZXkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIGtleS5pbmNsdWRlcygnOjonKSA/IGtleSA6IHVuZGVmaW5lZDtcclxuICB9XHJcbn1cclxuIl19