import * as i1 from '@abp/ng.core';
import { ListService, LocalizationService, escapeHtmlChars, ConfigStateService, RouterOutletComponent, AuthGuard, PermissionGuard, ReplaceableRouteContainerComponent, LazyModuleFactory, CoreModule } from '@abp/ng.core';
import * as i3 from '@abp/ng.identity/proxy';
import * as i2 from '@abp/ng.theme.shared';
import { Confirmation, getPasswordValidators, ThemeSharedModule } from '@abp/ng.theme.shared';
import * as i5 from '@abp/ng.theme.shared/extensions';
import { FormPropData, generateFormFromProps, EXTENSIONS_IDENTIFIER, EntityAction, EntityProp, FormProp, ToolbarAction, ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultActions, mergeWithDefaultProps, UiExtensionsModule } from '@abp/ng.theme.shared/extensions';
import * as i0 from '@angular/core';
import { Component, ViewChild, InjectionToken, Injectable, NgModule } from '@angular/core';
import { finalize, tap, switchMap, map, mapTo } from 'rxjs/operators';
import * as i4 from '@angular/forms';
import { Validators } from '@angular/forms';
import * as i6 from '@abp/ng.permission-management';
import { PermissionManagementModule } from '@abp/ng.permission-management';
import * as i9 from '@ngx-validate/core';
import { NgxValidateCoreModule } from '@ngx-validate/core';
import * as i5$1 from '@angular/common';
import * as i6$1 from '@ng-bootstrap/ng-bootstrap';
import { NgbNavModule, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { of } from 'rxjs';
import * as i1$1 from '@angular/router';
import { RouterModule } from '@angular/router';

class RolesComponent {
    constructor(list, confirmationService, toasterService, injector, service) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.toasterService = toasterService;
        this.injector = injector;
        this.service = service;
        this.data = { items: [], totalCount: 0 };
        this.visiblePermissions = false;
        this.modalBusy = false;
        this.permissionManagementKey = "PermissionManagement.PermissionManagementComponent" /* ePermissionManagementComponents.PermissionManagement */;
        this.onVisiblePermissionChange = event => {
            this.visiblePermissions = event;
        };
    }
    ngOnInit() {
        this.hookToQuery();
    }
    buildForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
    }
    openModal() {
        this.buildForm();
        this.isModalVisible = true;
    }
    add() {
        this.selected = {};
        this.openModal();
    }
    edit(id) {
        this.service.get(id).subscribe(res => {
            this.selected = res;
            this.openModal();
        });
    }
    save() {
        if (!this.form.valid)
            return;
        this.modalBusy = true;
        const { id } = this.selected;
        (id
            ? this.service.update(id, { ...this.selected, ...this.form.value })
            : this.service.create(this.form.value))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
        });
    }
    delete(id, name) {
        this.confirmationService
            .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [name],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.toasterService.success('AbpUi::SuccessfullyDeleted');
                this.service.delete(id).subscribe(() => this.list.get());
            }
        });
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => (this.data = res));
    }
    openPermissionsModal(providerKey) {
        this.providerKey = providerKey;
        setTimeout(() => {
            this.visiblePermissions = true;
        }, 0);
    }
    sort(data) {
        const { prop, dir } = data.sorts[0];
        this.list.sortKey = prop;
        this.list.sortOrder = dir;
    }
}
RolesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: RolesComponent, deps: [{ token: i1.ListService }, { token: i2.ConfirmationService }, { token: i2.ToasterService }, { token: i0.Injector }, { token: i3.IdentityRoleService }], target: i0.ɵɵFactoryTarget.Component });
RolesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: RolesComponent, selector: "abp-roles", providers: [
        ListService,
        {
            provide: EXTENSIONS_IDENTIFIER,
            useValue: "Identity.RolesComponent" /* eIdentityComponents.Roles */,
        },
    ], ngImport: i0, template: "<div id=\"identity-roles-wrapper\" class=\"card\">\r\n  <div class=\"card-header\">\r\n    <div class=\"row\">\r\n      <div class=\"col col-md-6\">\r\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Roles' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class=\"text-end col col-md-6\">\r\n        <abp-page-toolbar [record]=\"data.items\"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"card-body\">\r\n    <abp-extensible-table\r\n      [data]=\"data.items\"\r\n      [recordsTotal]=\"data.totalCount\"\r\n      [list]=\"list\"\r\n    ></abp-extensible-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewRole') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement=\"abpPermissionManagement\"\r\n  *abpReplaceableTemplate=\"\r\n    {\r\n      inputs: {\r\n        providerName: { value: 'R' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true },\r\n        hideBadges: { value: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  \"\r\n  (abpInit)=\"init(abpPermissionManagement)\"\r\n>\r\n</abp-permission-management>\r\n", dependencies: [{ kind: "directive", type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { kind: "directive", type: i1.InitDirective, selector: "[abpInit]", outputs: ["abpInit"] }, { kind: "directive", type: i1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "component", type: i2.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "component", type: i2.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { kind: "directive", type: i2.ModalCloseDirective, selector: "[abpClose]" }, { kind: "component", type: i5.PageToolbarComponent, selector: "abp-page-toolbar", exportAs: ["abpPageToolbar"] }, { kind: "component", type: i5.ExtensibleFormComponent, selector: "abp-extensible-form", inputs: ["selectedRecord"], exportAs: ["abpExtensibleForm"] }, { kind: "component", type: i5.ExtensibleTableComponent, selector: "abp-extensible-table", inputs: ["actionsText", "data", "list", "recordsTotal", "actionsColumnWidth", "actionsTemplate"], outputs: ["tableActivate"], exportAs: ["abpExtensibleTable"] }, { kind: "component", type: i6.PermissionManagementComponent, selector: "abp-permission-management", inputs: ["providerName", "providerKey", "hideBadges", "entityDisplayName", "visible"], outputs: ["visibleChange"], exportAs: ["abpPermissionManagement"] }, { kind: "directive", type: i9.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "pipe", type: i1.LocalizationPipe, name: "abpLocalization" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: RolesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-roles', providers: [
                        ListService,
                        {
                            provide: EXTENSIONS_IDENTIFIER,
                            useValue: "Identity.RolesComponent" /* eIdentityComponents.Roles */,
                        },
                    ], template: "<div id=\"identity-roles-wrapper\" class=\"card\">\r\n  <div class=\"card-header\">\r\n    <div class=\"row\">\r\n      <div class=\"col col-md-6\">\r\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Roles' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class=\"text-end col col-md-6\">\r\n        <abp-page-toolbar [record]=\"data.items\"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"card-body\">\r\n    <abp-extensible-table\r\n      [data]=\"data.items\"\r\n      [recordsTotal]=\"data.totalCount\"\r\n      [list]=\"list\"\r\n    ></abp-extensible-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewRole') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"save()\" validateOnSubmit>\r\n      <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement=\"abpPermissionManagement\"\r\n  *abpReplaceableTemplate=\"\r\n    {\r\n      inputs: {\r\n        providerName: { value: 'R' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true },\r\n        hideBadges: { value: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  \"\r\n  (abpInit)=\"init(abpPermissionManagement)\"\r\n>\r\n</abp-permission-management>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.ListService }, { type: i2.ConfirmationService }, { type: i2.ToasterService }, { type: i0.Injector }, { type: i3.IdentityRoleService }]; } });

class UsersComponent {
    constructor(list, confirmationService, service, toasterService, fb, injector) {
        this.list = list;
        this.confirmationService = confirmationService;
        this.service = service;
        this.toasterService = toasterService;
        this.fb = fb;
        this.injector = injector;
        this.data = { items: [], totalCount: 0 };
        this.visiblePermissions = false;
        this.modalBusy = false;
        this.permissionManagementKey = "PermissionManagement.PermissionManagementComponent" /* ePermissionManagementComponents.PermissionManagement */;
        this.trackByFn = (index, item) => Object.keys(item)[0] || index;
        this.onVisiblePermissionChange = event => {
            this.visiblePermissions = event;
        };
    }
    get roleGroups() {
        return this.form.get('roleNames')?.controls || [];
    }
    ngOnInit() {
        this.hookToQuery();
    }
    buildForm() {
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
        this.service.getAssignableRoles().subscribe(({ items }) => {
            this.roles = items;
            this.form.addControl('roleNames', this.fb.array(this.roles.map(role => this.fb.group({
                [role.name]: [
                    this.selected.id
                        ? !!this.selectedUserRoles?.find(userRole => userRole.id === role.id)
                        : role.isDefault,
                ],
            }))));
        });
    }
    openModal() {
        this.buildForm();
        this.isModalVisible = true;
    }
    add() {
        this.selected = {};
        this.selectedUserRoles = [];
        this.openModal();
    }
    edit(id) {
        this.service
            .get(id)
            .pipe(tap(user => (this.selected = user)), switchMap(() => this.service.getRoles(id)))
            .subscribe(userRole => {
            this.selectedUserRoles = userRole.items || [];
            this.openModal();
        });
    }
    save() {
        if (!this.form.valid || this.modalBusy)
            return;
        this.modalBusy = true;
        const { roleNames = [] } = this.form.value;
        const mappedRoleNames = roleNames.filter(role => !!role[Object.keys(role)[0]]).map(role => Object.keys(role)[0]) ||
            [];
        const { id } = this.selected;
        (id
            ? this.service.update(id, {
                ...this.selected,
                ...this.form.value,
                roleNames: mappedRoleNames,
            })
            : this.service.create({ ...this.form.value, roleNames: mappedRoleNames }))
            .pipe(finalize(() => (this.modalBusy = false)))
            .subscribe(() => {
            this.isModalVisible = false;
            this.list.get();
        });
    }
    delete(id, userName) {
        this.confirmationService
            .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {
            messageLocalizationParams: [userName],
        })
            .subscribe((status) => {
            if (status === Confirmation.Status.confirm) {
                this.service.delete(id).subscribe(() => {
                    this.toasterService.success('AbpUi::SuccessfullyDeleted');
                    this.list.get();
                });
            }
        });
    }
    sort(data) {
        const { prop, dir } = data.sorts[0];
        this.list.sortKey = prop;
        this.list.sortOrder = dir;
    }
    hookToQuery() {
        this.list.hookToQuery(query => this.service.getList(query)).subscribe(res => (this.data = res));
    }
    openPermissionsModal(providerKey, entityDisplayName) {
        this.providerKey = providerKey;
        this.entityDisplayName = entityDisplayName;
        setTimeout(() => {
            this.visiblePermissions = true;
        }, 0);
    }
}
UsersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: UsersComponent, deps: [{ token: i1.ListService }, { token: i2.ConfirmationService }, { token: i3.IdentityUserService }, { token: i2.ToasterService }, { token: i4.UntypedFormBuilder }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
UsersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: UsersComponent, selector: "abp-users", providers: [
        ListService,
        {
            provide: EXTENSIONS_IDENTIFIER,
            useValue: "Identity.UsersComponent" /* eIdentityComponents.Users */,
        },
    ], viewQueries: [{ propertyName: "modalContent", first: true, predicate: ["modalContent"], descendants: true }], ngImport: i0, template: "<div id=\"identity-roles-wrapper\" class=\"card\">\r\n  <div class=\"card-header\">\r\n    <div class=\"row\">\r\n      <div class=\"col col-md-6\">\r\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Users' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class=\"text-end col col-md-6\">\r\n        <abp-page-toolbar [record]=\"data.items\"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"search\"\r\n          class=\"form-control\"\r\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n          [(ngModel)]=\"list.filter\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <abp-extensible-table\r\n      [data]=\"data.items\"\r\n      [recordsTotal]=\"data.totalCount\"\r\n      [list]=\"list\"\r\n    ></abp-extensible-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewUser') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <ng-template #loaderRef\r\n      ><div class=\"text-center\"><i class=\"fa fa-pulse fa-spinner\"></i></div\r\n    ></ng-template>\r\n\r\n    <form *ngIf=\"form; else loaderRef\" [formGroup]=\"form\" (ngSubmit)=\"save()\">\r\n      <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ 'AbpIdentity::UserInformations' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n          </ng-template>\r\n        </li>\r\n\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ 'AbpIdentity::Roles' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div\r\n              *ngFor=\"let roleGroup of roleGroups; let i = index; trackBy: trackByFn\"\r\n              class=\"form-check mb-2\"\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                class=\"form-check-input\"\r\n                [attr.id]=\"'roles-' + i\"\r\n                [formControl]=\"roleGroup.controls[roles[i].name]\"\r\n              />\r\n              <label class=\"form-check-label\" [attr.for]=\"'roles-' + i\">{{ roles[i].name }}</label>\r\n            </div>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n\r\n      <div class=\"mt-2 fade-in-top\" [ngbNavOutlet]=\"nav\"></div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement=\"abpPermissionManagement\"\r\n  *abpReplaceableTemplate=\"\r\n    {\r\n      inputs: {\r\n        providerName: { value: 'U' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  \"\r\n  [entityDisplayName]=\"entityDisplayName\"\r\n  (abpInit)=\"init(abpPermissionManagement)\"\r\n>\r\n</abp-permission-management>\r\n", dependencies: [{ kind: "directive", type: i5$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { kind: "directive", type: i1.InitDirective, selector: "[abpInit]", outputs: ["abpInit"] }, { kind: "directive", type: i1.ReplaceableTemplateDirective, selector: "[abpReplaceableTemplate]", inputs: ["abpReplaceableTemplate"] }, { kind: "directive", type: i6$1.NgbNavContent, selector: "ng-template[ngbNavContent]" }, { kind: "directive", type: i6$1.NgbNav, selector: "[ngbNav]", inputs: ["activeId", "animation", "destroyOnHide", "orientation", "roles", "keyboard"], outputs: ["activeIdChange", "shown", "hidden", "navChange"], exportAs: ["ngbNav"] }, { kind: "directive", type: i6$1.NgbNavItem, selector: "[ngbNavItem]", inputs: ["destroyOnHide", "disabled", "domId", "ngbNavItem"], outputs: ["shown", "hidden"], exportAs: ["ngbNavItem"] }, { kind: "directive", type: i6$1.NgbNavLink, selector: "a[ngbNavLink]" }, { kind: "component", type: i6$1.NgbNavOutlet, selector: "[ngbNavOutlet]", inputs: ["paneRole", "ngbNavOutlet"] }, { kind: "component", type: i2.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "component", type: i2.ModalComponent, selector: "abp-modal", inputs: ["visible", "busy", "options", "suppressUnsavedChangesWarning"], outputs: ["visibleChange", "init", "appear", "disappear"] }, { kind: "directive", type: i2.ModalCloseDirective, selector: "[abpClose]" }, { kind: "component", type: i5.PageToolbarComponent, selector: "abp-page-toolbar", exportAs: ["abpPageToolbar"] }, { kind: "component", type: i5.ExtensibleFormComponent, selector: "abp-extensible-form", inputs: ["selectedRecord"], exportAs: ["abpExtensibleForm"] }, { kind: "component", type: i5.ExtensibleTableComponent, selector: "abp-extensible-table", inputs: ["actionsText", "data", "list", "recordsTotal", "actionsColumnWidth", "actionsTemplate"], outputs: ["tableActivate"], exportAs: ["abpExtensibleTable"] }, { kind: "component", type: i6.PermissionManagementComponent, selector: "abp-permission-management", inputs: ["providerName", "providerKey", "hideBadges", "entityDisplayName", "visible"], outputs: ["visibleChange"], exportAs: ["abpPermissionManagement"] }, { kind: "directive", type: i9.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "directive", type: i9.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { kind: "pipe", type: i1.LocalizationPipe, name: "abpLocalization" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: UsersComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-users', providers: [
                        ListService,
                        {
                            provide: EXTENSIONS_IDENTIFIER,
                            useValue: "Identity.UsersComponent" /* eIdentityComponents.Users */,
                        },
                    ], template: "<div id=\"identity-roles-wrapper\" class=\"card\">\r\n  <div class=\"card-header\">\r\n    <div class=\"row\">\r\n      <div class=\"col col-md-6\">\r\n        <h5 class=\"card-title\">{{ 'AbpIdentity::Users' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class=\"text-end col col-md-6\">\r\n        <abp-page-toolbar [record]=\"data.items\"></abp-page-toolbar>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <div id=\"data-tables-table-filter\" class=\"data-tables-filter\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"search\"\r\n          class=\"form-control\"\r\n          [placeholder]=\"'AbpUi::PagerSearch' | abpLocalization\"\r\n          [(ngModel)]=\"list.filter\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <abp-extensible-table\r\n      [data]=\"data.items\"\r\n      [recordsTotal]=\"data.totalCount\"\r\n      [list]=\"list\"\r\n    ></abp-extensible-table>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]=\"isModalVisible\" [busy]=\"modalBusy\">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? 'AbpIdentity::Edit' : 'AbpIdentity::NewUser') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <ng-template #loaderRef\r\n      ><div class=\"text-center\"><i class=\"fa fa-pulse fa-spinner\"></i></div\r\n    ></ng-template>\r\n\r\n    <form *ngIf=\"form; else loaderRef\" [formGroup]=\"form\" (ngSubmit)=\"save()\">\r\n      <ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ 'AbpIdentity::UserInformations' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n          </ng-template>\r\n        </li>\r\n\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ 'AbpIdentity::Roles' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div\r\n              *ngFor=\"let roleGroup of roleGroups; let i = index; trackBy: trackByFn\"\r\n              class=\"form-check mb-2\"\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                class=\"form-check-input\"\r\n                [attr.id]=\"'roles-' + i\"\r\n                [formControl]=\"roleGroup.controls[roles[i].name]\"\r\n              />\r\n              <label class=\"form-check-label\" [attr.for]=\"'roles-' + i\">{{ roles[i].name }}</label>\r\n            </div>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n\r\n      <div class=\"mt-2 fade-in-top\" [ngbNavOutlet]=\"nav\"></div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type=\"button\" class=\"btn btn-secondary\" abpClose>\r\n      {{ 'AbpIdentity::Cancel' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass=\"fa fa-check\" [disabled]=\"form?.invalid\" (click)=\"save()\">{{\r\n      'AbpIdentity::Save' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement=\"abpPermissionManagement\"\r\n  *abpReplaceableTemplate=\"\r\n    {\r\n      inputs: {\r\n        providerName: { value: 'U' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  \"\r\n  [entityDisplayName]=\"entityDisplayName\"\r\n  (abpInit)=\"init(abpPermissionManagement)\"\r\n>\r\n</abp-permission-management>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.ListService }, { type: i2.ConfirmationService }, { type: i3.IdentityUserService }, { type: i2.ToasterService }, { type: i4.UntypedFormBuilder }, { type: i0.Injector }]; }, propDecorators: { modalContent: [{
                type: ViewChild,
                args: ['modalContent', { static: false }]
            }] } });

const DEFAULT_ROLES_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Edit',
        action: data => {
            const component = data.getInjected(RolesComponent);
            component.edit(data.record.id);
        },
        permission: 'AbpIdentity.Roles.Update',
    },
    {
        text: 'AbpIdentity::Permissions',
        action: data => {
            const component = data.getInjected(RolesComponent);
            component.openPermissionsModal(data.record.name);
        },
        permission: 'AbpIdentity.Roles.ManagePermissions',
    },
    {
        text: 'AbpIdentity::Delete',
        action: data => {
            const component = data.getInjected(RolesComponent);
            component.delete(data.record.id, data.record.name);
        },
        permission: 'AbpIdentity.Roles.Delete',
        visible: data => !data.record.isStatic,
    },
]);

const DEFAULT_ROLES_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* ePropType.String */,
        name: 'name',
        displayName: 'AbpIdentity::RoleName',
        sortable: true,
        valueResolver: data => {
            const l10n = data.getInjected(LocalizationService);
            const t = l10n.instant.bind(l10n);
            const { isDefault, isPublic, name } = data.record;
            return of(escapeHtmlChars(name) +
                (isDefault
                    ? `<span class="badge rounded-pill bg-success ms-1">${t('AbpIdentity::DisplayName:IsDefault')}</span>`
                    : '') +
                (isPublic
                    ? `<span class="badge rounded-pill bg-info ms-1">${t('AbpIdentity::DisplayName:IsPublic')}</span>`
                    : ''));
        },
    },
]);

const DEFAULT_ROLES_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* ePropType.String */,
        name: 'name',
        displayName: 'AbpIdentity::RoleName',
        id: 'role-name',
        disabled: (data) => data.record && data.record.isStatic,
        validators: () => [Validators.required],
    },
    {
        type: "boolean" /* ePropType.Boolean */,
        name: 'isDefault',
        displayName: 'AbpIdentity::DisplayName:IsDefault',
        id: 'role-is-default',
        defaultValue: false,
    },
    {
        type: "boolean" /* ePropType.Boolean */,
        name: 'isPublic',
        displayName: 'AbpIdentity::DisplayName:IsPublic',
        id: 'role-is-public',
        defaultValue: false,
    },
]);
const DEFAULT_ROLES_EDIT_FORM_PROPS = DEFAULT_ROLES_CREATE_FORM_PROPS;

const DEFAULT_ROLES_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentity::NewRole',
        action: data => {
            const component = data.getInjected(RolesComponent);
            component.add();
        },
        permission: 'AbpIdentity.Roles.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_USERS_ENTITY_ACTIONS = EntityAction.createMany([
    {
        text: 'AbpIdentity::Edit',
        action: data => {
            const component = data.getInjected(UsersComponent);
            component.edit(data.record.id);
        },
        permission: 'AbpIdentity.Users.Update',
    },
    {
        text: 'AbpIdentity::Permissions',
        action: data => {
            const component = data.getInjected(UsersComponent);
            component.openPermissionsModal(data.record.id, data.record.userName);
        },
        permission: 'AbpIdentity.Users.ManagePermissions',
    }, {
        text: 'AbpIdentity::Delete',
        action: data => {
            const component = data.getInjected(UsersComponent);
            component.delete(data.record.id, data.record.name || data.record.userName);
        },
        visible: data => {
            const userName = data.record.userName;
            const configStateService = data.getInjected(ConfigStateService);
            const currentUser = configStateService.getOne("currentUser");
            return userName !== currentUser.userName;
        },
        permission: 'AbpIdentity.Users.Delete',
    },
]);

const DEFAULT_USERS_ENTITY_PROPS = EntityProp.createMany([
    {
        type: "string" /* ePropType.String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        sortable: true,
        columnWidth: 250,
        valueResolver: data => {
            const l10n = data.getInjected(LocalizationService);
            const t = l10n.instant.bind(l10n);
            const inactiveIcon = `<i title="${t('AbpIdentity::ThisUserIsNotActiveMessage')}" class="fas fa-ban text-danger me-1"></i>`;
            return of(`
        ${!data.record.isActive ? inactiveIcon : ''}
        <span class="${!data.record.isActive ? 'text-muted' : ''}">${escapeHtmlChars(data.record.userName)}</span>`);
        },
    },
    {
        type: "string" /* ePropType.String */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        sortable: true,
        columnWidth: 250,
    },
    {
        type: "string" /* ePropType.String */,
        name: 'phoneNumber',
        displayName: 'AbpIdentity::PhoneNumber',
        sortable: true,
        columnWidth: 250,
    },
]);

const DEFAULT_USERS_CREATE_FORM_PROPS = FormProp.createMany([
    {
        type: "string" /* ePropType.String */,
        name: 'userName',
        displayName: 'AbpIdentity::UserName',
        id: 'user-name',
        validators: () => [Validators.required, Validators.maxLength(256)],
    },
    {
        type: "password" /* ePropType.Password */,
        name: 'password',
        displayName: 'AbpIdentity::Password',
        id: 'password',
        autocomplete: 'new-password',
        validators: data => [Validators.required, ...getPasswordValidators({ get: data.getInjected })],
    },
    {
        type: "string" /* ePropType.String */,
        name: 'name',
        displayName: 'AbpIdentity::DisplayName:Name',
        id: 'name',
        validators: () => [Validators.maxLength(64)],
    },
    {
        type: "string" /* ePropType.String */,
        name: 'surname',
        displayName: 'AbpIdentity::DisplayName:Surname',
        id: 'surname',
        validators: () => [Validators.maxLength(64)],
    },
    {
        type: "email" /* ePropType.Email */,
        name: 'email',
        displayName: 'AbpIdentity::EmailAddress',
        id: 'email',
        validators: () => [Validators.required, Validators.maxLength(256), Validators.email],
    },
    {
        type: "string" /* ePropType.String */,
        name: 'phoneNumber',
        displayName: 'AbpIdentity::PhoneNumber',
        id: 'phone-number',
        validators: () => [Validators.maxLength(16)],
    },
    {
        type: "boolean" /* ePropType.Boolean */,
        name: 'isActive',
        displayName: 'AbpIdentity::DisplayName:IsActive',
        id: 'active-checkbox',
        defaultValue: true,
    },
    {
        type: "boolean" /* ePropType.Boolean */,
        name: 'lockoutEnabled',
        displayName: 'AbpIdentity::DisplayName:LockoutEnabled',
        id: 'lockout-checkbox',
        defaultValue: true,
    },
]);
const DEFAULT_USERS_EDIT_FORM_PROPS = DEFAULT_USERS_CREATE_FORM_PROPS.map(prop => {
    if (prop.name === 'password') {
        return {
            ...prop,
            validators: data => [...getPasswordValidators({ get: data.getInjected })],
        };
    }
    return prop;
});

const DEFAULT_USERS_TOOLBAR_ACTIONS = ToolbarAction.createMany([
    {
        text: 'AbpIdentity::NewUser',
        action: data => {
            const component = data.getInjected(UsersComponent);
            component.add();
        },
        permission: 'AbpIdentity.Users.Create',
        icon: 'fa fa-plus',
    },
]);

const DEFAULT_IDENTITY_ENTITY_ACTIONS = {
    ["Identity.RolesComponent" /* eIdentityComponents.Roles */]: DEFAULT_ROLES_ENTITY_ACTIONS,
    ["Identity.UsersComponent" /* eIdentityComponents.Users */]: DEFAULT_USERS_ENTITY_ACTIONS,
};
const DEFAULT_IDENTITY_TOOLBAR_ACTIONS = {
    ["Identity.RolesComponent" /* eIdentityComponents.Roles */]: DEFAULT_ROLES_TOOLBAR_ACTIONS,
    ["Identity.UsersComponent" /* eIdentityComponents.Users */]: DEFAULT_USERS_TOOLBAR_ACTIONS,
};
const DEFAULT_IDENTITY_ENTITY_PROPS = {
    ["Identity.RolesComponent" /* eIdentityComponents.Roles */]: DEFAULT_ROLES_ENTITY_PROPS,
    ["Identity.UsersComponent" /* eIdentityComponents.Users */]: DEFAULT_USERS_ENTITY_PROPS,
};
const DEFAULT_IDENTITY_CREATE_FORM_PROPS = {
    ["Identity.RolesComponent" /* eIdentityComponents.Roles */]: DEFAULT_ROLES_CREATE_FORM_PROPS,
    ["Identity.UsersComponent" /* eIdentityComponents.Users */]: DEFAULT_USERS_CREATE_FORM_PROPS,
};
const DEFAULT_IDENTITY_EDIT_FORM_PROPS = {
    ["Identity.RolesComponent" /* eIdentityComponents.Roles */]: DEFAULT_ROLES_EDIT_FORM_PROPS,
    ["Identity.UsersComponent" /* eIdentityComponents.Users */]: DEFAULT_USERS_EDIT_FORM_PROPS,
};
const IDENTITY_ENTITY_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_ACTION_CONTRIBUTORS');
const IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS = new InjectionToken('IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS');
const IDENTITY_ENTITY_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_ENTITY_PROP_CONTRIBUTORS');
const IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS');
const IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS = new InjectionToken('IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS');

class IdentityExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const actionContributors = this.injector.get(IDENTITY_ENTITY_ACTION_CONTRIBUTORS, null) || {};
        const toolbarContributors = this.injector.get(IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, null) || {};
        const propContributors = this.injector.get(IDENTITY_ENTITY_PROP_CONTRIBUTORS, null) || {};
        const createFormContributors = this.injector.get(IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, null) || {};
        const editFormContributors = this.injector.get(IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'Identity').pipe(map(entities => ({
            ["Identity.RolesComponent" /* eIdentityComponents.Roles */]: entities.Role,
            ["Identity.UsersComponent" /* eIdentityComponents.Users */]: entities.User,
        })), mapEntitiesToContributors(configState, 'AbpIdentity'), tap(objectExtensionContributors => {
            mergeWithDefaultActions(extensions.entityActions, DEFAULT_IDENTITY_ENTITY_ACTIONS, actionContributors);
            mergeWithDefaultActions(extensions.toolbarActions, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, toolbarContributors);
            mergeWithDefaultProps(extensions.entityProps, DEFAULT_IDENTITY_ENTITY_PROPS, objectExtensionContributors.prop, propContributors);
            mergeWithDefaultProps(extensions.createFormProps, DEFAULT_IDENTITY_CREATE_FORM_PROPS, objectExtensionContributors.createForm, createFormContributors);
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_IDENTITY_EDIT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
IdentityExtensionsGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityExtensionsGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
IdentityExtensionsGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityExtensionsGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityExtensionsGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

const routes = [
    { path: '', redirectTo: 'roles', pathMatch: 'full' },
    {
        path: '',
        component: RouterOutletComponent,
        canActivate: [AuthGuard, PermissionGuard, IdentityExtensionsGuard],
        children: [
            {
                path: 'roles',
                component: ReplaceableRouteContainerComponent,
                data: {
                    requiredPolicy: 'AbpIdentity.Roles',
                    replaceableComponent: {
                        key: "Identity.RolesComponent" /* eIdentityComponents.Roles */,
                        defaultComponent: RolesComponent,
                    },
                },
            },
            {
                path: 'users',
                component: ReplaceableRouteContainerComponent,
                data: {
                    requiredPolicy: 'AbpIdentity.Users',
                    replaceableComponent: {
                        key: "Identity.UsersComponent" /* eIdentityComponents.Users */,
                        defaultComponent: UsersComponent,
                    },
                },
            },
        ],
    },
];
class IdentityRoutingModule {
}
IdentityRoutingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IdentityRoutingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.3", ngImport: i0, type: IdentityRoutingModule, imports: [i1$1.RouterModule], exports: [RouterModule] });
IdentityRoutingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityRoutingModule, imports: [RouterModule.forChild(routes), RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityRoutingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule.forChild(routes)],
                    exports: [RouterModule],
                }]
        }] });

class IdentityModule {
    static forChild(options = {}) {
        return {
            ngModule: IdentityModule,
            providers: [
                {
                    provide: IDENTITY_ENTITY_ACTION_CONTRIBUTORS,
                    useValue: options.entityActionContributors,
                },
                {
                    provide: IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS,
                    useValue: options.toolbarActionContributors,
                },
                {
                    provide: IDENTITY_ENTITY_PROP_CONTRIBUTORS,
                    useValue: options.entityPropContributors,
                },
                {
                    provide: IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS,
                    useValue: options.createFormPropContributors,
                },
                {
                    provide: IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS,
                    useValue: options.editFormPropContributors,
                },
                IdentityExtensionsGuard,
            ],
        };
    }
    static forLazy(options = {}) {
        return new LazyModuleFactory(IdentityModule.forChild(options));
    }
}
IdentityModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IdentityModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.3", ngImport: i0, type: IdentityModule, declarations: [RolesComponent, UsersComponent], imports: [CoreModule,
        IdentityRoutingModule,
        NgbNavModule,
        ThemeSharedModule,
        UiExtensionsModule,
        NgbDropdownModule,
        PermissionManagementModule,
        NgxValidateCoreModule], exports: [RolesComponent, UsersComponent] });
IdentityModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityModule, imports: [CoreModule,
        IdentityRoutingModule,
        NgbNavModule,
        ThemeSharedModule,
        UiExtensionsModule,
        NgbDropdownModule,
        PermissionManagementModule,
        NgxValidateCoreModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: IdentityModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RolesComponent, UsersComponent],
                    exports: [RolesComponent, UsersComponent],
                    imports: [
                        CoreModule,
                        IdentityRoutingModule,
                        NgbNavModule,
                        ThemeSharedModule,
                        UiExtensionsModule,
                        NgbDropdownModule,
                        PermissionManagementModule,
                        NgxValidateCoreModule,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DEFAULT_IDENTITY_CREATE_FORM_PROPS, DEFAULT_IDENTITY_EDIT_FORM_PROPS, DEFAULT_IDENTITY_ENTITY_ACTIONS, DEFAULT_IDENTITY_ENTITY_PROPS, DEFAULT_IDENTITY_TOOLBAR_ACTIONS, IDENTITY_CREATE_FORM_PROP_CONTRIBUTORS, IDENTITY_EDIT_FORM_PROP_CONTRIBUTORS, IDENTITY_ENTITY_ACTION_CONTRIBUTORS, IDENTITY_ENTITY_PROP_CONTRIBUTORS, IDENTITY_TOOLBAR_ACTION_CONTRIBUTORS, IdentityExtensionsGuard, IdentityModule, RolesComponent, UsersComponent };
//# sourceMappingURL=abp-ng.identity.mjs.map
