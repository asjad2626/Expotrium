import { Injectable, Injector } from '@angular/core';
import { ExtensionsService, getObjectExtensionEntitiesFromStore, mapEntitiesToContributors, mergeWithDefaultProps, } from '@abp/ng.theme.shared/extensions';
import { ConfigStateService } from '@abp/ng.core';
import { tap, map, mapTo } from 'rxjs/operators';
import { ACCOUNT_EDIT_FORM_PROP_CONTRIBUTORS, DEFAULT_ACCOUNT_FORM_PROPS, } from '../tokens/extensions.token';
import * as i0 from "@angular/core";
export class AccountExtensionsGuard {
    constructor(injector) {
        this.injector = injector;
    }
    canActivate() {
        const extensions = this.injector.get(ExtensionsService);
        const editFormContributors = this.injector.get(ACCOUNT_EDIT_FORM_PROP_CONTRIBUTORS, null) || {};
        const configState = this.injector.get(ConfigStateService);
        return getObjectExtensionEntitiesFromStore(configState, 'Identity').pipe(map(entities => ({
            ["Account.PersonalSettingsComponent" /* eAccountComponents.PersonalSettings */]: entities.User,
        })), mapEntitiesToContributors(configState, 'AbpIdentity'), tap(objectExtensionContributors => {
            mergeWithDefaultProps(extensions.editFormProps, DEFAULT_ACCOUNT_FORM_PROPS, objectExtensionContributors.editForm, editFormContributors);
        }), mapTo(true));
    }
}
AccountExtensionsGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: AccountExtensionsGuard, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
AccountExtensionsGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: AccountExtensionsGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: AccountExtensionsGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5zaW9ucy5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FjY291bnQvc3JjL2xpYi9ndWFyZHMvZXh0ZW5zaW9ucy5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdyRCxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLG1DQUFtQyxFQUNuQyx5QkFBeUIsRUFDekIscUJBQXFCLEdBQ3RCLE1BQU0saUNBQWlDLENBQUM7QUFDekMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFDTCxtQ0FBbUMsRUFDbkMsMEJBQTBCLEdBQzNCLE1BQU0sNEJBQTRCLENBQUM7O0FBS3BDLE1BQU0sT0FBTyxzQkFBc0I7SUFDakMsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFMUMsV0FBVztRQUNULE1BQU0sVUFBVSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRTNFLE1BQU0sb0JBQW9CLEdBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVyRSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzFELE9BQU8sbUNBQW1DLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDdEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNmLCtFQUFxQyxFQUFFLFFBQVEsQ0FBQyxJQUFJO1NBQ3JELENBQUMsQ0FBQyxFQUNILHlCQUF5QixDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsRUFDckQsR0FBRyxDQUFDLDJCQUEyQixDQUFDLEVBQUU7WUFDaEMscUJBQXFCLENBQ25CLFVBQVUsQ0FBQyxhQUFhLEVBQ3hCLDBCQUEwQixFQUMxQiwyQkFBMkIsQ0FBQyxRQUFRLEVBQ3BDLG9CQUFvQixDQUNyQixDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQ0YsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUNaLENBQUM7SUFDSixDQUFDOzttSEF6QlUsc0JBQXNCO3VIQUF0QixzQkFBc0I7MkZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENhbkFjdGl2YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1xyXG4gIEV4dGVuc2lvbnNTZXJ2aWNlLFxyXG4gIGdldE9iamVjdEV4dGVuc2lvbkVudGl0aWVzRnJvbVN0b3JlLFxyXG4gIG1hcEVudGl0aWVzVG9Db250cmlidXRvcnMsXHJcbiAgbWVyZ2VXaXRoRGVmYXVsdFByb3BzLFxyXG59IGZyb20gJ0BhYnAvbmcudGhlbWUuc2hhcmVkL2V4dGVuc2lvbnMnO1xyXG5pbXBvcnQgeyBDb25maWdTdGF0ZVNlcnZpY2UgfSBmcm9tICdAYWJwL25nLmNvcmUnO1xyXG5pbXBvcnQgeyB0YXAsIG1hcCwgbWFwVG8gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7XHJcbiAgQUNDT1VOVF9FRElUX0ZPUk1fUFJPUF9DT05UUklCVVRPUlMsXHJcbiAgREVGQVVMVF9BQ0NPVU5UX0ZPUk1fUFJPUFMsXHJcbn0gZnJvbSAnLi4vdG9rZW5zL2V4dGVuc2lvbnMudG9rZW4nO1xyXG5pbXBvcnQgeyBBY2NvdW50RWRpdEZvcm1Qcm9wQ29udHJpYnV0b3JzIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy1vcHRpb25zJztcclxuaW1wb3J0IHsgZUFjY291bnRDb21wb25lbnRzIH0gZnJvbSAnLi4vZW51bXMvY29tcG9uZW50cyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBY2NvdW50RXh0ZW5zaW9uc0d1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7fVxyXG5cclxuICBjYW5BY3RpdmF0ZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IGV4dGVuc2lvbnM6IEV4dGVuc2lvbnNTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoRXh0ZW5zaW9uc1NlcnZpY2UpO1xyXG5cclxuICAgIGNvbnN0IGVkaXRGb3JtQ29udHJpYnV0b3JzOiBBY2NvdW50RWRpdEZvcm1Qcm9wQ29udHJpYnV0b3JzID1cclxuICAgICAgdGhpcy5pbmplY3Rvci5nZXQoQUNDT1VOVF9FRElUX0ZPUk1fUFJPUF9DT05UUklCVVRPUlMsIG51bGwpIHx8IHt9O1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZ1N0YXRlID0gdGhpcy5pbmplY3Rvci5nZXQoQ29uZmlnU3RhdGVTZXJ2aWNlKTtcclxuICAgIHJldHVybiBnZXRPYmplY3RFeHRlbnNpb25FbnRpdGllc0Zyb21TdG9yZShjb25maWdTdGF0ZSwgJ0lkZW50aXR5JykucGlwZShcclxuICAgICAgbWFwKGVudGl0aWVzID0+ICh7XHJcbiAgICAgICAgW2VBY2NvdW50Q29tcG9uZW50cy5QZXJzb25hbFNldHRpbmdzXTogZW50aXRpZXMuVXNlcixcclxuICAgICAgfSkpLFxyXG4gICAgICBtYXBFbnRpdGllc1RvQ29udHJpYnV0b3JzKGNvbmZpZ1N0YXRlLCAnQWJwSWRlbnRpdHknKSxcclxuICAgICAgdGFwKG9iamVjdEV4dGVuc2lvbkNvbnRyaWJ1dG9ycyA9PiB7XHJcbiAgICAgICAgbWVyZ2VXaXRoRGVmYXVsdFByb3BzKFxyXG4gICAgICAgICAgZXh0ZW5zaW9ucy5lZGl0Rm9ybVByb3BzLFxyXG4gICAgICAgICAgREVGQVVMVF9BQ0NPVU5UX0ZPUk1fUFJPUFMsXHJcbiAgICAgICAgICBvYmplY3RFeHRlbnNpb25Db250cmlidXRvcnMuZWRpdEZvcm0sXHJcbiAgICAgICAgICBlZGl0Rm9ybUNvbnRyaWJ1dG9ycyxcclxuICAgICAgICApO1xyXG4gICAgICB9KSxcclxuICAgICAgbWFwVG8odHJ1ZSksXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=