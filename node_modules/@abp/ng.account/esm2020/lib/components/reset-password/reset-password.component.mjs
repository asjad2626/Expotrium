import { AccountService } from '@abp/ng.account.core/proxy';
import { getPasswordValidators } from '@abp/ng.theme.shared';
import { Component, Injector } from '@angular/core';
import { UntypedFormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { comparePasswords } from '@ngx-validate/core';
import { finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@abp/ng.account.core/proxy";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common";
import * as i5 from "@abp/ng.core";
import * as i6 from "@abp/ng.theme.shared";
import * as i7 from "@ngx-validate/core";
const PASSWORD_FIELDS = ['password', 'confirmPassword'];
export class ResetPasswordComponent {
    constructor(fb, accountService, route, router, injector) {
        this.fb = fb;
        this.accountService = accountService;
        this.route = route;
        this.router = router;
        this.injector = injector;
        this.inProgress = false;
        this.isPasswordReset = false;
        this.mapErrorsFn = (errors, groupErrors, control) => {
            if (PASSWORD_FIELDS.indexOf(String(control.name)) < 0)
                return errors;
            return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));
        };
    }
    ngOnInit() {
        this.route.queryParams.subscribe(({ userId, resetToken }) => {
            if (!userId || !resetToken)
                this.router.navigateByUrl('/account/login');
            this.form = this.fb.group({
                userId: [userId, [Validators.required]],
                resetToken: [resetToken, [Validators.required]],
                password: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
                confirmPassword: ['', [Validators.required, ...getPasswordValidators(this.injector)]],
            }, {
                validators: [comparePasswords(PASSWORD_FIELDS)],
            });
        });
    }
    onSubmit() {
        if (this.form.invalid || this.inProgress)
            return;
        this.inProgress = true;
        this.accountService
            .resetPassword({
            userId: this.form.get('userId').value,
            resetToken: this.form.get('resetToken').value,
            password: this.form.get('password').value,
        })
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(() => {
            this.isPasswordReset = true;
        });
    }
}
ResetPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ResetPasswordComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: i2.AccountService }, { token: i3.ActivatedRoute }, { token: i3.Router }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
ResetPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: ResetPasswordComponent, selector: "abp-reset-password", ngImport: i0, template: "<h4>{{ 'AbpAccount::ResetPassword' | abpLocalization }}</h4>\r\n\r\n<form\r\n  *ngIf=\"!isPasswordReset; else passwordResetTemplate\"\r\n  [formGroup]=\"form\"\r\n  [mapErrorsFn]=\"mapErrorsFn\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n>\r\n  <p>{{ 'AbpAccount::ResetPassword_Information' | abpLocalization }}</p>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input type=\"password\" id=\"input-password\" class=\"form-control\" formControlName=\"password\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-confirm-password\" class=\"form-label\">{{\r\n      'AbpAccount::ConfirmPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input\r\n      type=\"password\"\r\n      id=\"input-confirm-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"confirmPassword\"\r\n    />\r\n  </div>\r\n  <button class=\"me-2 btn btn-secondary\" type=\"button\" routerLink=\"/account/login\">\r\n    {{ 'AbpAccount::Cancel' | abpLocalization }}\r\n  </button>\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    buttonClass=\"me-2 btn btn-primary\"\r\n    [loading]=\"inProgress\"\r\n    (click)=\"onSubmit()\"\r\n  >\r\n    {{ 'AbpAccount::Submit' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n\r\n<ng-template #passwordResetTemplate>\r\n  <p>\r\n    {{ 'AbpAccount::YourPasswordIsSuccessfullyReset' | abpLocalization }}\r\n  </p>\r\n\r\n  <a routerLink=\"/account/login\">\r\n    <button class=\"d-block mt-2 mb-3 btn btn-primary\">\r\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\r\n    </button>\r\n  </a>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i3.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i5.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { kind: "component", type: i6.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "directive", type: i7.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "directive", type: i7.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { kind: "pipe", type: i5.LocalizationPipe, name: "abpLocalization" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: ResetPasswordComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-reset-password', template: "<h4>{{ 'AbpAccount::ResetPassword' | abpLocalization }}</h4>\r\n\r\n<form\r\n  *ngIf=\"!isPasswordReset; else passwordResetTemplate\"\r\n  [formGroup]=\"form\"\r\n  [mapErrorsFn]=\"mapErrorsFn\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n>\r\n  <p>{{ 'AbpAccount::ResetPassword_Information' | abpLocalization }}</p>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input type=\"password\" id=\"input-password\" class=\"form-control\" formControlName=\"password\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-confirm-password\" class=\"form-label\">{{\r\n      'AbpAccount::ConfirmPassword' | abpLocalization\r\n    }}</label\r\n    ><span> * </span>\r\n    <input\r\n      type=\"password\"\r\n      id=\"input-confirm-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"confirmPassword\"\r\n    />\r\n  </div>\r\n  <button class=\"me-2 btn btn-secondary\" type=\"button\" routerLink=\"/account/login\">\r\n    {{ 'AbpAccount::Cancel' | abpLocalization }}\r\n  </button>\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    buttonClass=\"me-2 btn btn-primary\"\r\n    [loading]=\"inProgress\"\r\n    (click)=\"onSubmit()\"\r\n  >\r\n    {{ 'AbpAccount::Submit' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n\r\n<ng-template #passwordResetTemplate>\r\n  <p>\r\n    {{ 'AbpAccount::YourPasswordIsSuccessfullyReset' | abpLocalization }}\r\n  </p>\r\n\r\n  <a routerLink=\"/account/login\">\r\n    <button class=\"d-block mt-2 mb-3 btn btn-primary\">\r\n      {{ 'AbpAccount::BackToLogin' | abpLocalization }}\r\n    </button>\r\n  </a>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: i2.AccountService }, { type: i3.ActivatedRoute }, { type: i3.Router }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,