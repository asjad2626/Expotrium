import { ProfileService } from '@abp/ng.account.core/proxy';
import { Confirmation, ConfirmationService, ToasterService } from '@abp/ng.theme.shared';
import { Component, Inject, Injector } from '@angular/core';
import { UntypedFormBuilder } from '@angular/forms';
import { finalize, filter } from 'rxjs/operators';
import { ManageProfileStateService } from '../../services/manage-profile.state.service';
import { AuthService } from '@abp/ng.core';
import { RE_LOGIN_CONFIRMATION_TOKEN } from '../../tokens';
import { EXTENSIONS_IDENTIFIER, FormPropData, generateFormFromProps, } from '@abp/ng.theme.shared/extensions';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@abp/ng.theme.shared";
import * as i3 from "@abp/ng.account.core/proxy";
import * as i4 from "../../services/manage-profile.state.service";
import * as i5 from "@abp/ng.core";
import * as i6 from "@angular/common";
import * as i7 from "@ngx-validate/core";
import * as i8 from "@abp/ng.theme.shared/extensions";
export class PersonalSettingsComponent {
    constructor(fb, toasterService, profileService, manageProfileState, authService, confirmationService, isPersonalSettingsChangedConfirmationActive, injector) {
        this.fb = fb;
        this.toasterService = toasterService;
        this.profileService = profileService;
        this.manageProfileState = manageProfileState;
        this.authService = authService;
        this.confirmationService = confirmationService;
        this.isPersonalSettingsChangedConfirmationActive = isPersonalSettingsChangedConfirmationActive;
        this.injector = injector;
        this.logoutConfirmation = () => {
            this.authService.logout().subscribe();
        };
    }
    buildForm() {
        this.selected = this.manageProfileState.getProfile();
        if (!this.selected) {
            return;
        }
        const data = new FormPropData(this.injector, this.selected);
        this.form = generateFormFromProps(data);
    }
    ngOnInit() {
        this.buildForm();
    }
    submit() {
        if (this.form.invalid)
            return;
        const isLogOutConfirmMessageVisible = this.isLogoutConfirmMessageActive();
        this.inProgress = true;
        this.profileService
            .update(this.form.value)
            .pipe(finalize(() => (this.inProgress = false)))
            .subscribe(profile => {
            this.manageProfileState.setProfile(profile);
            this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });
            if (isLogOutConfirmMessageVisible) {
                this.showLogoutConfirmMessage();
            }
        });
    }
    isLogoutConfirmMessageActive() {
        return this.isPersonalSettingsChangedConfirmationActive;
    }
    showLogoutConfirmMessage() {
        this.confirmationService
            .info('AbpAccount::PersonalSettingsChangedConfirmationModalDescription', 'AbpAccount::PersonalSettingsChangedConfirmationModalTitle')
            .pipe(filter(status => status === Confirmation.Status.confirm))
            .subscribe(this.logoutConfirmation);
    }
}
PersonalSettingsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: PersonalSettingsComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: i2.ToasterService }, { token: i3.ProfileService }, { token: i4.ManageProfileStateService }, { token: i5.AuthService }, { token: i2.ConfirmationService }, { token: RE_LOGIN_CONFIRMATION_TOKEN }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
PersonalSettingsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: PersonalSettingsComponent, selector: "abp-personal-settings-form", providers: [
        {
            provide: EXTENSIONS_IDENTIFIER,
            useValue: "Account.PersonalSettingsComponent" /* eAccountComponents.PersonalSettings */,
        },
    ], exportAs: ["abpPersonalSettingsForm"], ngImport: i0, template: "<form [formGroup]=\"form\"   *ngIf=\"form\"  (ngSubmit)=\"submit()\" validateOnSubmit>\r\n  <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    iconClass=\"fa fa-check\"\r\n    buttonClass=\"btn btn-primary color-white\"\r\n    [loading]=\"inProgress\"\r\n  >\r\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n", dependencies: [{ kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { kind: "component", type: i2.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "directive", type: i7.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "component", type: i8.ExtensibleFormComponent, selector: "abp-extensible-form", inputs: ["selectedRecord"], exportAs: ["abpExtensibleForm"] }, { kind: "pipe", type: i5.LocalizationPipe, name: "abpLocalization" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: PersonalSettingsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-personal-settings-form', exportAs: 'abpPersonalSettingsForm', providers: [
                        {
                            provide: EXTENSIONS_IDENTIFIER,
                            useValue: "Account.PersonalSettingsComponent" /* eAccountComponents.PersonalSettings */,
                        },
                    ], template: "<form [formGroup]=\"form\"   *ngIf=\"form\"  (ngSubmit)=\"submit()\" validateOnSubmit>\r\n  <abp-extensible-form [selectedRecord]=\"selected\"></abp-extensible-form>\r\n\r\n  <abp-button\r\n    buttonType=\"submit\"\r\n    iconClass=\"fa fa-check\"\r\n    buttonClass=\"btn btn-primary color-white\"\r\n    [loading]=\"inProgress\"\r\n  >\r\n    {{ 'AbpIdentity::Save' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: i2.ToasterService }, { type: i3.ProfileService }, { type: i4.ManageProfileStateService }, { type: i5.AuthService }, { type: i2.ConfirmationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [RE_LOGIN_CONFIRMATION_TOKEN]
                }] }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,