import { AccountService } from '@abp/ng.account.core/proxy';
import { AuthService, ConfigStateService } from '@abp/ng.core';
import { getPasswordValidators, ToasterService } from '@abp/ng.theme.shared';
import { Component, Injector } from '@angular/core';
import { UntypedFormBuilder, Validators } from '@angular/forms';
import { throwError } from 'rxjs';
import { catchError, finalize, switchMap } from 'rxjs/operators';
import { getRedirectUrl } from '../../utils/auth-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@abp/ng.account.core/proxy";
import * as i3 from "@abp/ng.core";
import * as i4 from "@abp/ng.theme.shared";
import * as i5 from "@angular/common";
import * as i6 from "@angular/router";
import * as i7 from "@ngx-validate/core";
const { maxLength, required, email } = Validators;
export class RegisterComponent {
    constructor(fb, accountService, configState, toasterService, authService, injector) {
        this.fb = fb;
        this.accountService = accountService;
        this.configState = configState;
        this.toasterService = toasterService;
        this.authService = authService;
        this.injector = injector;
        this.isSelfRegistrationEnabled = true;
        this.authWrapperKey = "Account.AuthWrapperComponent" /* eAccountComponents.AuthWrapper */;
    }
    ngOnInit() {
        this.init();
        this.buildForm();
    }
    init() {
        this.isSelfRegistrationEnabled =
            (this.configState.getSetting('Abp.Account.IsSelfRegistrationEnabled') || '').toLowerCase() !==
                'false';
        if (!this.isSelfRegistrationEnabled) {
            this.toasterService.warn({
                key: 'AbpAccount::SelfRegistrationDisabledMessage',
                defaultValue: 'Self registration is disabled.',
            }, null, { life: 10000 });
            return;
        }
    }
    buildForm() {
        this.form = this.fb.group({
            username: ['', [required, maxLength(255)]],
            password: ['', [required, ...getPasswordValidators(this.injector)]],
            email: ['', [required, email]],
        });
    }
    onSubmit() {
        if (this.form.invalid)
            return;
        this.inProgress = true;
        const newUser = {
            userName: this.form.get('username').value,
            password: this.form.get('password').value,
            emailAddress: this.form.get('email').value,
            appName: 'Angular',
        };
        this.accountService
            .register(newUser)
            .pipe(switchMap(() => this.authService.login({
            username: newUser.userName,
            password: newUser.password,
            redirectUrl: getRedirectUrl(this.injector),
        })), catchError(err => {
            this.toasterService.error(err.error?.error_description ||
                err.error?.error.message ||
                'AbpAccount::DefaultErrorMessage', null, { life: 7000 });
            return throwError(err);
        }), finalize(() => (this.inProgress = false)))
            .subscribe();
    }
}
RegisterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: RegisterComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: i2.AccountService }, { token: i3.ConfigStateService }, { token: i4.ToasterService }, { token: i3.AuthService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
RegisterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.3", type: RegisterComponent, selector: "abp-register", ngImport: i0, template: "<h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\r\n<strong>\r\n  {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/login\">{{\r\n    'AbpAccount::Login' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form\r\n  *ngIf=\"isSelfRegistrationEnabled\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n  class=\"mt-4\"\r\n>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-user-name\" class=\"form-label\">{{\r\n      'AbpAccount::UserName' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      autofocus\r\n      type=\"text\"\r\n      id=\"input-user-name\"\r\n      class=\"form-control\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::EmailAddress' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"input-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Register' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i6.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i3.AutofocusDirective, selector: "[autofocus]", inputs: ["autofocus"] }, { kind: "directive", type: i3.FormSubmitDirective, selector: "form[ngSubmit][formGroup]", inputs: ["debounce", "notValidateOnSubmit", "markAsDirtyWhenSubmit"], outputs: ["ngSubmit"] }, { kind: "component", type: i4.ButtonComponent, selector: "abp-button", inputs: ["buttonId", "buttonClass", "buttonType", "formName", "iconClass", "loading", "disabled", "attributes"], outputs: ["click", "focus", "blur", "abpClick", "abpFocus", "abpBlur"] }, { kind: "directive", type: i7.ValidationGroupDirective, selector: "[formGroup],[formGroupName]", exportAs: ["validationGroup"] }, { kind: "directive", type: i7.ValidationDirective, selector: "[formControl],[formControlName]", exportAs: ["validationDirective"] }, { kind: "pipe", type: i3.LocalizationPipe, name: "abpLocalization" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.3", ngImport: i0, type: RegisterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'abp-register', template: "<h4>{{ 'AbpAccount::Register' | abpLocalization }}</h4>\r\n<strong>\r\n  {{ 'AbpAccount::AlreadyRegistered' | abpLocalization }}\r\n  <a class=\"text-decoration-none\" routerLink=\"/account/login\">{{\r\n    'AbpAccount::Login' | abpLocalization\r\n  }}</a>\r\n</strong>\r\n<form\r\n  *ngIf=\"isSelfRegistrationEnabled\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"onSubmit()\"\r\n  validateOnSubmit\r\n  class=\"mt-4\"\r\n>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-user-name\" class=\"form-label\">{{\r\n      'AbpAccount::UserName' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      autofocus\r\n      type=\"text\"\r\n      id=\"input-user-name\"\r\n      class=\"form-control\"\r\n      formControlName=\"username\"\r\n      autocomplete=\"username\"\r\n    />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-email-address\" class=\"form-label\">{{\r\n      'AbpAccount::EmailAddress' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input type=\"email\" id=\"input-email-address\" class=\"form-control\" formControlName=\"email\" />\r\n  </div>\r\n  <div class=\"mb-3 form-group\">\r\n    <label for=\"input-password\" class=\"form-label\">{{\r\n      'AbpAccount::Password' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type=\"password\"\r\n      id=\"input-password\"\r\n      class=\"form-control\"\r\n      formControlName=\"password\"\r\n      autocomplete=\"current-password\"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    [loading]=\"inProgress\"\r\n    buttonType=\"submit\"\r\n    name=\"Action\"\r\n    buttonClass=\"btn-block btn-lg mt-3 btn btn-primary\"\r\n  >\r\n    {{ 'AbpAccount::Register' | abpLocalization }}\r\n  </abp-button>\r\n</form>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: i2.AccountService }, { type: i3.ConfigStateService }, { type: i4.ToasterService }, { type: i3.AuthService }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,